{"version":3,"file":"fsync.js","sourceRoot":"","sources":["../src/fsync/amath/BLRect.ts","../src/fsync/amath/FloatMath.ts","../src/fsync/amath/FloatMatrix.ts","../src/fsync/amath/Math.ts","../src/fsync/amath/Rect.ts","../src/fsync/amath/Vector.ts","../src/fsync/amath/ZSize.ts","../src/fsync/box2d/b2data/ABasic.ts","../src/fsync/box2d/b2data/Box.ts","../src/fsync/box2d/b2data/Box2DBody.ts","../src/fsync/box2d/b2data/Box2DHelper.ts","../src/fsync/box2d/b2data/Box2DNode.ts","../src/fsync/box2d/b2data/Box2DTransform.ts","../src/fsync/box2d/b2data/Box2DUnion.ts","../src/fsync/box2d/b2data/Box2DUnionData.ts","../src/fsync/box2d/b2data/Box2DUserData.ts","../src/fsync/box2d/b2data/Box2DWorld.ts","../src/fsync/box2d/b2data/CCPolygonSeparator.ts","../src/fsync/box2d/b2data/Collider.ts","../src/fsync/box2d/b2data/CollisionGroup.ts","../src/fsync/box2d/b2data/FixedContact.ts","../src/fsync/box2d/b2data/ISkillExtra.ts","../src/fsync/box2d/b2data/Joint.ts","../src/fsync/box2d/b2data/NodeConvertTool.ts","../src/fsync/box2d/b2data/OutsideFixedContact.ts","../src/fsync/box2d/b2data/PAPhysicsCollider.ts","../src/fsync/box2d/b2data/PhysicsBoxCollider.ts","../src/fsync/box2d/b2data/PhysicsCircleCollider.ts","../src/fsync/box2d/b2data/PhysicsPolygonCollider.ts","../src/fsync/box2d/b2data/PrismaticJoint.ts","../src/fsync/box2d/b2data/RevoluteJoint.ts","../src/fsync/box2d/b2data/RigidBody.ts","../src/fsync/box2d/b2data/WeldJoint.ts","../src/fsync/box2d/b2data/WheelJoint.ts","../src/fsync/common/BaseType.ts","../src/fsync/lang/ArrayHelper.ts","../src/fsync/lang/MapHelper.ts","../src/fsync/lang/ObjectUtils.ts","../src/fsync/common/Basic.ts","../src/fsync/common/Buffer.ts","../src/fsync/common/CompDeco.ts","../src/fsync/common/Debug.ts","../src/fsync/common/IClear.ts","../src/fsync/common/IClone.ts","../src/fsync/common/IMerge.ts","../src/fsync/common/IRollback.ts","../src/fsync/common/Intervals.ts","../src/fsync/common/Promise.ts","../src/fsync/common/SimpleEvent.ts","../src/fsync/ds/Basic.ts","../src/fsync/ds/DataClass.ts","../src/fsync/ds/DataFeature.ts","../src/fsync/ds/DataContainer.ts","../src/fsync/ds/DataManager.ts","../src/fsync/ds/DataQuery.ts","../src/fsync/ds/DecoDataClass.ts","../src/fsync/ds/DirtyManager.ts","../src/fsync/ecs/ArrayExt.ts","../src/fsync/ecs/Component.ts","../src/fsync/ecs/DataBase.ts","../src/fsync/ecs/ECSComponentConvertDecorator.ts","../src/fsync/ecs/Entity.ts","../src/fsync/ecs/FrameSyncUtils.ts","../src/fsync/ecs/EntityManager.ts","../src/fsync/ecs/EntityQuery.ts","../src/fsync/ecs/FrameSyncRandom.ts","../src/fsync/ecs/SystemBase.ts","../src/fsync/ecs/UpdaterGroup.ts","../src/fsync/ecs/World.ts","../src/fsync/ecs/WorldEnv.ts","../src/fsync/ecs/base/BasicType.ts","../src/fsync/ecs/utils/IOverwrite.ts","../src/fsync/ecs/utils/IUpdater.ts","../src/fsync/ecs/utils/NetDelay.ts","../src/fsync/ecs/utils/PrefabHelper.ts","../src/fsync/ecs/utils/Timer.ts","../src/fsync/ecs/utils/UniqueID.ts","../src/fsync/ecs/utils/Updater.ts","../src/fsync/ecsproxy/zexport.ts","../src/fsync/ecsproxy/input/ECSCompProxy.ts","../src/fsync/ecsproxy/input/ECSDecorators.ts","../src/fsync/ecsproxy/input/ECSEntityProxy.ts","../src/fsync/ecsproxy/input/EntityProxyBase.ts","../src/fsync/ecsproxy/input/EntityProxyHelper.ts","../src/fsync/ecsproxy/input/EntityProxyQuery.ts","../src/fsync/ecsproxy/input/ProxyArray.ts","../src/fsync/ecsproxy/input/ProxyClasses.ts","../src/fsync/ecsproxy/input/ProxySystemBase.ts","../src/fsync/ecsproxy/input/Tuple.ts","../src/fsync/ecsproxy/input/ZEntityProxy.ts","../src/fsync/ecsproxy/input/basic.ts","../src/fsync/engine/components/Transform.ts","../src/fsync/engine/hardware/Device.ts","../src/fsync/engine/hardware/Platform.ts","../src/fsync/engine/hardware/UserInput.ts","../src/fsync/engine/physics/CollisionWorld.ts","../src/fsync/engine/physics/Shape.ts","../src/fsync/engine/stuff/IPrefab.ts","../src/fsync/engine/stuff/PrefabBase.ts","../src/fsync/engine/stuff/PrefabManager.ts","../src/fsync/engine/stuff/Scene.ts","../src/fsync/export/export.ts","../src/fsync/forapp/GameSceneBase.ts","../src/fsync/forapp/GameWorld.ts","../src/fsync/forapp/SubScene.ts","../src/fsync/forapp/SubWorld.ts","../src/fsync/forapp/SubWorldInitInput.ts","../src/fsync/input/IGameInputCmd.ts","../src/fsync/input/InputCmdBuffer.ts","../src/fsync/input/LocalInputPost.ts","../src/fsync/input/NetworkCmdTranslator.ts","../src/fsync/kitten/export.ts","../src/fsync/kitten/gamepad/CircleStick.ts","../src/fsync/kitten/gamepad/CircleStickView.ts","../src/fsync/kitten/gamepad/GameStick.ts","../src/fsync/kitten/gamepad/MainSkillStick.ts","../src/fsync/kitten/gamepad/MoveStick.ts","../src/fsync/kitten/gamepad/NormalGamepad.ts","../src/fsync/kitten/gamepad/StickCtrlState.ts","../src/fsync/kitten/gamepad/StickSharedState.ts","../src/fsync/kitten/guesture/Guesture.ts","../src/fsync/kitten/rpg/cmdbuffer/ActorCmdBuffer.ts","../src/fsync/kitten/rpg/cmdbuffer/IActorCmd.ts","../src/fsync/kitten/rpg/cmdbuffer/ICmdTranslator.ts","../src/fsync/kitten/rpg/cmdbuffer/RPGPlayerCmd.ts","../src/fsync/kitten/rpg/cmdbuffer/RPGPlayerCmdTranslator.ts","../src/fsync/kitten/rpg/cmdbuffer/RPGRoleDataBase.ts","../src/fsync/kitten/uievent/UIEvent.ts","../src/fsync/lang/Log.ts","../src/fsync/network/BWebSocketClient.ts","../src/fsync/network/ClientFactory.ts","../src/fsync/network/INetClient.ts","../src/fsync/network/PBClient.ts","../src/fsync/network/ProtoPool.ts","../src/fsync/network/ProtoTool.ts","../src/fsync/network/basic.ts","../src/fsync/rollbackable/EntityMergeSystem.ts","../src/fsync/rollbackable/ForceMergeSystem.ts","../src/fsync/rollbackable/FrameSyncStrategy.ts","../src/fsync/rollbackable/WorldMainProcess.ts","../src/fsync/rollbackable/ds/ECSDataMergeSystem.ts","../src/fsync/rollbackable/ds/ECSDataForceMergeSystem.ts","../src/fsync/roomserver/RoomClientFactory.ts","../src/fsync/roomserver/common/IRoomClient.ts","../src/fsync/roomserver/common/basic.ts","../src/fsync/roomserver/common/reqid.ts","../src/fsync/roomserver/common/protos/serverproto.proto.ts","../src/fsync/roomserver/common/protos/serverproto.ts","../src/fsync/roomserver/tencent_mgobe/TencentRoomClient.ts","../src/fsync/roomserver/v1/RoomClient.ts","../src/fsync/viewbinding/Prefab.ts","../src/fsync/viewbinding/ViewAdapter.ts","../src/fsync/viewbinding/ViewBindManager.ts","../src/fsync/viewbinding/graph.ts","../src/fsync/viewbinding/syncsystem/TransformSyncSystem.ts"],"names":[],"mappings":"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","sourcesContent":["namespace fsync {\n\texport interface IBLWHRectSpec {\n\t\tx: number,\n\t\ty: number,\n\t\twidth: number,\n\t\theight: number,\n\t}\n\n\t/**\n\t * BLRect = 左下角 + size\n\t */\n\texport class BLRect {\n\n\t\tconstructor(\n\t\t\tpublic x: number = 0,\n\t\t\tpublic y: number = 0,\n\t\t\tpublic width: number = 0,\n\t\t\tpublic height: number = 0,\n\t\t) {\n\n\t\t}\n\n\t\tstatic top(self: BLRect): Vector2 {\n\t\t\treturn new Vector2(self.x + self.width / 2, self.y + self.height)\n\t\t}\n\n\t\tstatic bottom(self: BLRect): Vector2 {\n\t\t\treturn new Vector2(self.x + self.width / 2, self.y)\n\t\t}\n\n\t\tstatic center(self: BLRect): Vector2 {\n\t\t\treturn new Vector2(self.x + self.width / 2, self.y + self.height / 2)\n\t\t}\n\n\t\tstatic fromRectLike({ x, y, width, height }: IBLWHRectSpec): BLRect {\n\t\t\treturn new BLRect(x, y, width, height)\n\t\t}\n\n\t\tstatic copyRectLike(self: BLRect, { x, y, width, height }: IBLWHRectSpec): BLRect {\n\t\t\tself.x = x\n\t\t\tself.y = y\n\t\t\tself.width = width\n\t\t\tself.height = height\n\t\t\treturn self\n\t\t}\n\n\t\tstatic reset(self: BLRect) {\n\t\t\tself.x = 0\n\t\t\tself.y = 0\n\t\t\tself.width = 0\n\t\t\tself.height = 0\n\t\t\treturn self\n\t\t}\n\n\t\tstatic mergeFrom(self: BLRect, rect: BLRect) {\n\t\t\tself.width = rect.width\n\t\t\tself.height = rect.height\n\t\t\tself.x = rect.x\n\t\t\tself.y = rect.y\n\t\t\treturn self\n\t\t}\n\n\t\tstatic clone(self: BLRect) {\n\t\t\tlet rect = new BLRect()\n\t\t\tthis.mergeFrom(rect, self)\n\t\t\treturn rect\n\t\t}\n\n\t\tstatic containPoint(rect: BLRect, pt: IVector): bool {\n\t\t\tlet ns = pt.getBinData()\n\t\t\tlet x = ns[0]\n\t\t\tlet y = ns[1]\n\t\t\tif (\n\t\t\t\t(rect.x - x) * (rect.x + rect.width - x) <= 0\n\t\t\t\t&& (rect.y - y) * (rect.y + rect.height - y) <= 0\n\t\t\t) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 将点就近限制在矩形框内\n\t\t * @param rect\n\t\t * @param pt\n\t\t */\n\t\tstatic limitPointSelf(rect: BLRect, pt: IVector): void {\n\t\t\tlet ns = pt.getBinData()\n\t\t\tlet x = ns[0]\n\t\t\tlet y = ns[1]\n\t\t\tif (x < rect.x) {\n\t\t\t\tx = rect.x\n\t\t\t}\n\t\t\tlet rx = rect.x + rect.width\n\t\t\tif (x > rx) {\n\t\t\t\tx = rx\n\t\t\t}\n\t\t\tif (y < rect.y) {\n\t\t\t\ty = rect.y\n\t\t\t}\n\t\t\tlet ry = rect.y + rect.height\n\t\t\tif (y > ry) {\n\t\t\t\ty = ry\n\t\t\t}\n\t\t\tns[0] = x\n\t\t\tns[1] = y\n\t\t}\n\t}\n\n}","namespace fsync {\n\nexport class FloatMath{\n\n}\n\n}","namespace fsync {\n\nexport class FloatMatrix{\n\n}\n\n}","\nnamespace fsync.math {\n\texport function randomRange(min: number, max: number): number {\n\t\treturn Math.random() * (max - min) + min\n\t}\n\n\texport function bezier3(C1: number, C2: number, C3: number, C4: number, t: number): number {\n\t\tconst t1 = 1 - t;\n\t\treturn C1 * t1 * t1 * t1 +\n\t\t\tC2 * 3 * t1 * t1 * t +\n\t\t\tC3 * 3 * t1 * t * t +\n\t\t\tC4 * t * t * t;\n\t}\n\n\texport function bezier2(C1: number, C2: number, C3: number, t: number): number {\n\t\tconst t1 = 1 - t;\n\t\treturn C1 * t1 * t1 +\n\t\t\tC2 * 2 * t1 * t +\n\t\t\tC3 * t * t;\n\t}\n\n\texport function bezier2Vec3(out: fsync.Vector3, vin: fsync.Vector3, C1: number, C2: number, C3: number) {\n\t\tout.x = bezier2(C1, C2, C3, vin.x)\n\t\tout.y = bezier2(C1, C2, C3, vin.y)\n\t\tout.z = bezier2(C1, C2, C3, vin.z)\n\t}\n\n\texport function minByAbs(v1: number, v2: number) {\n\t\tlet v1abs = Math.abs(v1)\n\t\tlet v2abs = Math.abs(v2)\n\t\tif (v1abs > v2abs) {\n\t\t\treturn v2\n\t\t} else {\n\t\t\treturn v1\n\t\t}\n\t}\n\n\t/**\n\t * 2次贝塞尔曲线参数\n\t */\n\texport type BezierParams2 = {\n\t\t/**\n\t\t * 贝塞尔参数\n\t\t */\n\t\tC1: number,\n\t\tC2: number,\n\t\tC3: number,\n\t\t/**\n\t\t * 基础倍率\n\t\t */\n\t\tspeed: number,\n\t}\n\n\t/**\n\t * 转换为脉冲信号\n\t * @param th \n\t */\n\texport const getSign = (th: number) => {\n\t\tif (th == 0) {\n\t\t\treturn 1\n\t\t} else {\n\t\t\treturn th / Math.abs(th)\n\t\t}\n\t}\n\n\t/**\n\t * 计算最小等价角度\n\t * @param angle \n\t */\n\texport const calcMinAngle = (angle: number) => {\n\t\tangle = angle % 360\n\t\tif (angle > 180) {\n\t\t\treturn angle - 360\n\t\t} else if (angle < -180) {\n\t\t\treturn angle + 360\n\t\t} else {\n\t\t\treturn angle\n\t\t}\n\t}\n}\n","namespace fsync {\n\texport interface IWHRectSpec {\n\t\tx: number,\n\t\ty: number,\n\t\twidth: number,\n\t\theight: number,\n\t}\n\n\t/**\n\t * Rect = center + size\n\t */\n\texport class Rect {\n\n\t\tconstructor(\n\t\t\tpublic x: number = 0,\n\t\t\tpublic y: number = 0,\n\t\t\tpublic width: number = 0,\n\t\t\tpublic height: number = 0,\n\t\t) {\n\n\t\t}\n\n\t\tstatic top(self: Rect): Vector2 {\n\t\t\treturn new Vector2(self.x, self.y + self.height / 2)\n\t\t}\n\n\t\tstatic bottom(self: Rect): Vector2 {\n\t\t\treturn new Vector2(self.x, self.y - self.height / 2)\n\t\t}\n\n\t\tstatic center(self: Rect): Vector2 {\n\t\t\treturn new Vector2(self.x, self.y)\n\t\t}\n\n\t\tstatic fromRectLike({ x, y, width, height }: IWHRectSpec): Rect {\n\t\t\treturn new Rect(x, y, width, height)\n\t\t}\n\n\t\tstatic copyRectLike(self: Rect, { x, y, width, height }: IWHRectSpec): Rect {\n\t\t\tself.x = x\n\t\t\tself.y = y\n\t\t\tself.width = width\n\t\t\tself.height = height\n\t\t\treturn self\n\t\t}\n\n\t\tstatic reset(self: Rect) {\n\t\t\tself.x = 0\n\t\t\tself.y = 0\n\t\t\tself.width = 0\n\t\t\tself.height = 0\n\t\t\treturn self\n\t\t}\n\n\t\tstatic mergeFrom(self: Rect, rect: Rect) {\n\t\t\tself.width = rect.width\n\t\t\tself.height = rect.height\n\t\t\tself.x = rect.x\n\t\t\tself.y = rect.y\n\t\t\treturn self\n\t\t}\n\n\t\tstatic clone(self: Rect) {\n\t\t\tlet rect = new Rect()\n\t\t\tthis.mergeFrom(rect, self)\n\t\t\treturn rect\n\t\t}\n\n\t\tstatic containPoint(rect: Rect, pt: IVector): bool {\n\t\t\tlet ns = pt.getBinData()\n\t\t\tlet x = ns[0]\n\t\t\tlet y = ns[1]\n\t\t\tif (\n\t\t\t\t(rect.x - rect.width / 2 - x) * (rect.x + rect.width / 2 - x) <= 0\n\t\t\t\t&& (rect.y - rect.height / 2 - y) * (rect.y + rect.height / 2 - y) <= 0\n\t\t\t) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 将点就近限制在矩形框内\n\t\t * @param rect \n\t\t * @param pt \n\t\t */\n\t\tstatic limitPointSelf(rect: Rect, pt: IVector): void {\n\t\t\tlet ns = pt.getBinData()\n\t\t\tlet x = ns[0]\n\t\t\tlet y = ns[1]\n\n\t\t\tlet lx = rect.x - rect.width / 2\n\t\t\tif (x < lx) {\n\t\t\t\tx = lx\n\t\t\t}\n\t\t\tlet rx = rect.x + rect.width / 2\n\t\t\tif (x > rx) {\n\t\t\t\tx = rx\n\t\t\t}\n\t\t\tlet ly = rect.y - rect.height / 2\n\t\t\tif (y < ly) {\n\t\t\t\ty = ly\n\t\t\t}\n\t\t\tlet ry = rect.y + rect.height / 2\n\t\t\tif (y > ry) {\n\t\t\t\ty = ry\n\t\t\t}\n\t\t\tns[0] = x\n\t\t\tns[1] = y\n\t\t}\n\t}\n\n}","namespace fsync {\r\n\r\n\tconst halfToRad = 0.5 * Math.PI / 180.0;\r\n\r\n\texport interface IVector extends IClone {\r\n\t\tgetBinData(): number[]\r\n\t\tclone(): IVector\r\n\t}\r\n\r\n\tconst _d2r = Math.PI / 180.0;\r\n\r\n\tconst _r2d = 180.0 / Math.PI;\r\n\r\n\texport function toDegree(a: number) {\r\n\t\treturn a * _r2d;\r\n\t}\r\n\r\n\texport class NumberArray {\r\n\t\tstatic lenSQ(ns: number[]) {\r\n\t\t\tlet lsq = 0\r\n\t\t\tfor (let i = 0; i < ns.length; i++) {\r\n\t\t\t\tlsq += ns[i] * ns[i]\r\n\t\t\t}\r\n\t\t\treturn lsq\r\n\t\t}\r\n\t\tstatic len(ns: number[]) {\r\n\t\t\tlet lsq = 0\r\n\t\t\tfor (let i = 0; i < ns.length; i++) {\r\n\t\t\t\tlsq += ns[i] * ns[i]\r\n\t\t\t}\r\n\t\t\treturn Math.sqrt(lsq)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 覆盖\r\n\t\t * @param out \r\n\t\t * @param ns2 \r\n\t\t */\r\n\t\tstatic merge(out: number[], ns2: number[]): number[] {\r\n\t\t\tfor (let i = 0; i < ns2.length; i++) {\r\n\t\t\t\tout[i] = ns2[i]\r\n\t\t\t}\r\n\t\t\treturn out\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 最小合并\r\n\t\t * @param ns1 \r\n\t\t * @param ns2 \r\n\t\t */\r\n\t\tstatic collect(ns1: number[], ns2: number[]): number[] {\r\n\t\t\tlet count = Math.min(ns1.length, ns2.length)\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tns1[i] = ns2[i]\r\n\t\t\t}\r\n\t\t\treturn ns1\r\n\t\t}\r\n\r\n\t\tstatic normalizeSelf(n1: number[]): number[] {\r\n\t\t\tlet lsq = 0\r\n\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\tlsq += n1[i] * n1[i]\r\n\t\t\t}\r\n\t\t\tif (lsq == 0) {\r\n\t\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\t\tn1[i] = 0\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlet l = Math.sqrt(lsq)\r\n\t\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\t\tn1[i] /= l\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n1\r\n\t\t}\r\n\r\n\t\tstatic transEulerToQuaternion(ns4: number[], ns3: number[]): number[] {\r\n\t\t\tlet x = ns3[0]\r\n\t\t\tlet y = ns3[1]\r\n\t\t\tlet z = ns3[2]\r\n\r\n\t\t\tx *= halfToRad;\r\n\t\t\ty *= halfToRad;\r\n\t\t\tz *= halfToRad;\r\n\r\n\t\t\tconst sx = Math.sin(x);\r\n\t\t\tconst cx = Math.cos(x);\r\n\t\t\tconst sy = Math.sin(y);\r\n\t\t\tconst cy = Math.cos(y);\r\n\t\t\tconst sz = Math.sin(z);\r\n\t\t\tconst cz = Math.cos(z);\r\n\r\n\t\t\tns4[0] = sx * cy * cz + cx * sy * sz;\r\n\t\t\tns4[1] = cx * sy * cz + sx * cy * sz;\r\n\t\t\tns4[2] = cx * cy * sz - sx * sy * cz;\r\n\t\t\tns4[3] = cx * cy * cz - sx * sy * sz;\r\n\r\n\t\t\treturn ns4;\r\n\t\t}\r\n\r\n\t\tstatic transQuaternionToEuler(ns3: number[], ns4: number[], outerZ?: boolean) {\r\n\t\t\tconst x = ns4[0]\r\n\t\t\tconst y = ns4[1]\r\n\t\t\tconst z = ns4[2]\r\n\t\t\tconst w = ns4[3]\r\n\r\n\t\t\tlet bank = 0;\r\n\t\t\tlet heading = 0;\r\n\t\t\tlet attitude = 0;\r\n\t\t\tconst test = x * y + z * w;\r\n\t\t\tif (test > 0.499999) {\r\n\t\t\t\tbank = 0; // default to zero\r\n\t\t\t\theading = toDegree(2 * Math.atan2(x, w));\r\n\t\t\t\tattitude = 90;\r\n\t\t\t} else if (test < -0.499999) {\r\n\t\t\t\tbank = 0; // default to zero\r\n\t\t\t\theading = -toDegree(2 * Math.atan2(x, w));\r\n\t\t\t\tattitude = -90;\r\n\t\t\t} else {\r\n\t\t\t\tconst sqx = x * x;\r\n\t\t\t\tconst sqy = y * y;\r\n\t\t\t\tconst sqz = z * z;\r\n\t\t\t\tbank = toDegree(Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz));\r\n\t\t\t\theading = toDegree(Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz));\r\n\t\t\t\tattitude = toDegree(Math.asin(2 * test));\r\n\t\t\t\tif (outerZ) {\r\n\t\t\t\t\tbank = -180 * Math.sign(bank + 1e-6) + bank;\r\n\t\t\t\t\theading = -180 * Math.sign(heading + 1e-6) + heading;\r\n\t\t\t\t\tattitude = 180 * Math.sign(attitude + 1e-6) - attitude;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// x\r\n\t\t\tns3[0] = bank;\r\n\t\t\t// y\r\n\t\t\tns3[1] = heading;\r\n\t\t\t// z\r\n\t\t\tns3[2] = attitude;\r\n\t\t\treturn ns3;\r\n\t\t}\r\n\r\n\r\n\t\t/**\r\n\t\t * @zh 四元数乘法\r\n\t\t */\r\n\t\tpublic static multiplyQuaternion(out: number[], a: number[], b: number[]) {\r\n\t\t\tconst x = a[0] * b[3] + a[3] * b[0] + a[1] * b[2] - a[2] * b[1];\r\n\t\t\tconst y = a[1] * b[3] + a[3] * b[1] + a[2] * b[0] - a[0] * b[2];\r\n\t\t\tconst z = a[2] * b[3] + a[3] * b[2] + a[0] * b[1] - a[1] * b[0];\r\n\t\t\tconst w = a[3] * b[3] - a[0] * b[0] - a[1] * b[1] - a[2] * b[2];\r\n\t\t\tout[0] = x;\r\n\t\t\tout[1] = y;\r\n\t\t\tout[2] = z;\r\n\t\t\tout[3] = w;\r\n\t\t\treturn out;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport abstract class CommonVector implements IVector {\r\n\t\tabstract getBinData(): number[]\r\n\t\tabstract clone(): IVector\r\n\r\n\t\tdistanceSQ(vec2: IVector): number {\r\n\t\t\treturn Vector.distanceSQ(this, vec2)\r\n\t\t}\r\n\r\n\t\tdistance(vec2: IVector): number {\r\n\t\t\treturn Vector.distance(this, vec2)\r\n\t\t}\r\n\r\n\t\tequal(vec2: IVector): bool {\r\n\t\t\treturn Vector.equal(this, vec2)\r\n\t\t}\r\n\r\n\t\tsubDown<T extends IVector>(vec2: T): T {\r\n\t\t\treturn Vector.subDown(this as any as T, vec2)\r\n\t\t}\r\n\r\n\t\taddUp<T extends IVector>(vec2: T): T {\r\n\t\t\treturn Vector.addUp(this as IVector as T, vec2)\r\n\t\t}\r\n\r\n\t\tmultUp<T extends IVector>(vec2: T): T {\r\n\t\t\treturn Vector.multUp(this as IVector as T, vec2)\r\n\t\t}\r\n\r\n\t\tmultUpVar(v: number) {\r\n\t\t\treturn Vector.multUpVar(this, v)\r\n\t\t}\r\n\r\n\t\tmultVar<T extends IVector>(v: number): T {\r\n\t\t\treturn Vector.multVar(this as IVector as T, v)\r\n\t\t}\r\n\r\n\t\tnormalizeSelf(): this {\r\n\t\t\treturn Vector.normalizeSelf(this)\r\n\t\t}\r\n\r\n\t\tlen<T extends IVector>(): number {\r\n\t\t\treturn Vector.len(this as IVector as T)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 覆盖\r\n\t\t * @param out \r\n\t\t * @param vec2 \r\n\t\t */\r\n\t\tmerge<T extends IVector>(vec2: T): T {\r\n\t\t\treturn Vector.merge(this as IVector as T, vec2)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 最小合并\r\n\t\t * @param vec1 \r\n\t\t * @param vec2 \r\n\t\t */\r\n\t\tcollect<T extends IVector>(vec2: T): T {\r\n\t\t\treturn Vector.collect(this as IVector as T, vec2)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @default value = 0\r\n\t\t */\r\n\t\tresetValues(value: number = 0) {\r\n\t\t\treturn Vector.resetValues(this, value)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 根据x，y决定的方向转换为角度 [-PI~PI]\r\n\t\t * @param b \r\n\t\t */\r\n\t\tpublic getRotationZ2(): number {\r\n\t\t\tlet data = this.getBinData()\r\n\t\t\tlet th = Math.atan2(data[1], data[0])\r\n\t\t\treturn th\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 根据x，y决定的方向转换为角度 [-PI~PI]\r\n\t\t * @param b \r\n\t\t */\r\n\t\tpublic getRotation2(): Vector3 {\r\n\t\t\tlet data = this.getBinData()\r\n\t\t\tlet th = Math.atan2(data[1], data[0])\r\n\t\t\treturn fsync.Vector3.fromNumArray([0, 0, th])\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 绕原点按笛卡尔坐标系弧度旋转\r\n\t\t * @param out \r\n\t\t */\r\n\t\tpublic rotateSelfByZero2(angle: number) {\r\n\t\t\tlet od = this.getBinData()\r\n\t\t\tlet cosInc = Math.cos(angle)\r\n\t\t\tlet sinInc = Math.sin(angle)\r\n\t\t\tlet x = cosInc * od[0] - sinInc * od[1];\r\n\t\t\tlet y = sinInc * od[0] + cosInc * od[1];\r\n\t\t\tod[0] = x\r\n\t\t\tod[1] = y\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tasVectorN<T extends IVector>(): T {\r\n\t\t\treturn this as IVector as T\r\n\t\t}\r\n\r\n\t\tasVector2(): Vector2 {\r\n\t\t\treturn this as IVector as Vector2\r\n\t\t}\r\n\r\n\t\tasVector3(): Vector3 {\r\n\t\t\treturn this as IVector as Vector3\r\n\t\t}\r\n\r\n\t\tasVector4(): Vector4 {\r\n\t\t\treturn this as IVector as Vector4\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport interface IVector2Like {\r\n\t\tx?: number\r\n\t\ty?: number\r\n\t}\r\n\r\n\texport class Vector2 extends CommonVector {\r\n\t\tprotected data: number[] = [0, 0]\r\n\r\n\t\tstatic zero: Vector2 = new Vector2()\r\n\r\n\t\tstatic fromNumArray(ns: number[]): Vector2 {\r\n\t\t\tlet vec = new Vector2()\r\n\t\t\tvec.data[0] = ns[0] || 0\r\n\t\t\tvec.data[1] = ns[1] || 0\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tclone(): Vector2 {\r\n\t\t\treturn Vector2.fromNumArray(this.getBinData())\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Vector2.constructor\r\n\t\t * @param x 默认等于 0\r\n\t\t * @param y 默认等于 0\r\n\t\t */\r\n\t\tconstructor(x: number = 0, y: number = 0) {\r\n\t\t\tsuper()\r\n\r\n\t\t\tthis.x = x\r\n\t\t\tthis.y = y\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * vector的尺寸, vector2 为 2\r\n\t\t */\r\n\t\tget size() {\r\n\t\t\treturn 2\r\n\t\t}\r\n\r\n\t\tgetBinData(): number[] {\r\n\t\t\treturn this.data\r\n\t\t}\r\n\r\n\t\tsetBinData(data: number[]) {\r\n\t\t\tthis.data = data\r\n\t\t}\r\n\r\n\t\tpublic get x(): number {\r\n\t\t\treturn this.data[0]\r\n\t\t}\r\n\t\tpublic set x(value: number) {\r\n\t\t\tthis.data[0] = value\r\n\t\t}\r\n\t\tpublic get y(): number {\r\n\t\t\treturn this.data[1]\r\n\t\t}\r\n\t\tpublic set y(value: number) {\r\n\t\t\tthis.data[1] = value\r\n\t\t}\r\n\r\n\t\tcopy(vec: IVector) {\r\n\t\t\treturn Vector.merge(this, vec)\r\n\t\t}\r\n\r\n\t\tcopyXYLike({ x, y }: { x?: number, y?: number }) {\r\n\t\t\tif (typeof (x) == \"number\") {\r\n\t\t\t\tthis.x = x\r\n\t\t\t}\r\n\t\t\tif (typeof (y) == \"number\") {\r\n\t\t\t\tthis.y = y\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tstatic fromXYZLike({ x, y }: { x?: number, y?: number }): Vector2 {\r\n\t\t\tlet vec = this.fromNumArray([x, y])\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tmergeToXYZLike<T extends IVector2Like>(v?: T): T {\r\n\t\t\tconst data = this.data\r\n\t\t\tv.x = data[0]\r\n\t\t\tv.y = data[1]\r\n\t\t\treturn v\r\n\t\t}\r\n\t}\r\n\r\n\texport interface IVector3SpecInput {\r\n\t\tx?: number,\r\n\t\ty?: number,\r\n\t\tz?: number,\r\n\t}\r\n\r\n\texport class Vector3 extends CommonVector {\r\n\t\tprotected data: number[] = [0, 0, 0]\r\n\r\n\t\tstatic zero: Vector3 = new Vector3()\r\n\r\n\t\tstatic fromNumArray(ns: number[]): Vector3 {\r\n\t\t\tlet vec = new Vector3()\r\n\t\t\tconst data = vec.data\r\n\t\t\tdata[0] = ns[0] || 0\r\n\t\t\tdata[1] = ns[1] || 0\r\n\t\t\tdata[2] = ns[2] || 0\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tcopyNumArray(ns: number[]): Vector3 {\r\n\t\t\tconst data = this.data\r\n\t\t\tdata[0] = ns[0] || 0\r\n\t\t\tdata[1] = ns[1] || 0\r\n\t\t\tdata[2] = ns[2] || 0\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tclone(): Vector3 {\r\n\t\t\treturn Vector3.fromNumArray(this.getBinData())\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Vector3.constructor\r\n\t\t * @param x 默认等于 0\r\n\t\t * @param y 默认等于 0\r\n\t\t * @param z 默认等于 0\r\n\t\t */\r\n\t\tconstructor(x: number = 0, y: number = 0, z: number = 0) {\r\n\t\t\tsuper()\r\n\r\n\t\t\tthis.x = x\r\n\t\t\tthis.y = y\r\n\t\t\tthis.z = z\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * vector的尺寸, vector3 为 3\r\n\t\t */\r\n\t\tget size() {\r\n\t\t\treturn 3\r\n\t\t}\r\n\r\n\t\tgetBinData(): number[] {\r\n\t\t\treturn this.data\r\n\t\t}\r\n\r\n\t\tsetBinData(data: number[]) {\r\n\t\t\tthis.data = data\r\n\t\t}\r\n\r\n\t\tpublic get x(): number {\r\n\t\t\treturn this.data[0]\r\n\t\t}\r\n\t\tpublic set x(value: number) {\r\n\t\t\tthis.data[0] = value\r\n\t\t}\r\n\t\tpublic get y(): number {\r\n\t\t\treturn this.data[1]\r\n\t\t}\r\n\t\tpublic set y(value: number) {\r\n\t\t\tthis.data[1] = value\r\n\t\t}\r\n\t\tpublic get z(): number {\r\n\t\t\treturn this.data[2]\r\n\t\t}\r\n\t\tpublic set z(value: number) {\r\n\t\t\tthis.data[2] = value\r\n\t\t}\r\n\r\n\t\tcopy(vec: IVector) {\r\n\t\t\treturn Vector.merge(this, vec)\r\n\t\t}\r\n\r\n\t\tcopyXYZLike({ x, y, z }: IVector3SpecInput) {\r\n\t\t\tif (typeof (x) == \"number\") {\r\n\t\t\t\tthis.x = x\r\n\t\t\t}\r\n\t\t\tif (typeof (y) == \"number\") {\r\n\t\t\t\tthis.y = y\r\n\t\t\t}\r\n\t\t\tif (typeof (z) == \"number\") {\r\n\t\t\t\tthis.z = z\r\n\t\t\t}\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tstatic fromXYZLike({ x, y, z }: IVector3SpecInput): Vector3 {\r\n\t\t\tlet vec = this.fromNumArray([x, y, z])\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\ttoXYZLike<T extends IVector3SpecInput>(cls: new () => T): T {\r\n\t\t\tconst v = new cls()\r\n\t\t\tconst data = this.data\r\n\t\t\tv.x = data[0]\r\n\t\t\tv.y = data[1]\r\n\t\t\tv.z = data[2]\r\n\t\t\treturn v\r\n\t\t}\r\n\r\n\t\tmergeToXYZLike<T extends IVector3SpecInput>(v: T): T {\r\n\t\t\tconst data = this.data\r\n\t\t\tv.x = data[0]\r\n\t\t\tv.y = data[1]\r\n\t\t\tv.z = data[2]\r\n\t\t\treturn v\r\n\t\t}\r\n\t}\r\n\r\n\texport class Vector4 extends CommonVector {\r\n\t\tprotected data: number[] = [0, 0, 0, 0]\r\n\r\n\t\tstatic fromNumArray(ns: number[]): Vector4 {\r\n\t\t\tlet vec = new Vector4()\r\n\t\t\tvec.data[0] = ns[0] || 0\r\n\t\t\tvec.data[1] = ns[1] || 0\r\n\t\t\tvec.data[2] = ns[2] || 0\r\n\t\t\tvec.data[3] = ns[3] || 0\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tclone(): Vector4 {\r\n\t\t\treturn Vector4.fromNumArray(this.getBinData())\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Vector4.constructor\r\n\t\t * @param x 默认等于 0\r\n\t\t * @param y 默认等于 0\r\n\t\t * @param z 默认等于 0\r\n\t\t * @param w 默认等于 0\r\n\t\t */\r\n\t\tconstructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\r\n\t\t\tsuper()\r\n\r\n\t\t\tthis.x = x\r\n\t\t\tthis.y = y\r\n\t\t\tthis.z = z\r\n\t\t\tthis.w = w\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * vector的尺寸, vector4 为 4\r\n\t\t */\r\n\t\tget size() {\r\n\t\t\treturn 4\r\n\t\t}\r\n\r\n\t\tgetBinData(): number[] {\r\n\t\t\treturn this.data\r\n\t\t}\r\n\r\n\t\tsetBinData(data: number[]) {\r\n\t\t\tthis.data = data\r\n\t\t}\r\n\r\n\t\tpublic get x(): number {\r\n\t\t\treturn this.data[0]\r\n\t\t}\r\n\t\tpublic set x(value: number) {\r\n\t\t\tthis.data[0] = value\r\n\t\t}\r\n\t\tpublic get y(): number {\r\n\t\t\treturn this.data[1]\r\n\t\t}\r\n\t\tpublic set y(value: number) {\r\n\t\t\tthis.data[1] = value\r\n\t\t}\r\n\t\tpublic get z(): number {\r\n\t\t\treturn this.data[2]\r\n\t\t}\r\n\t\tpublic set z(value: number) {\r\n\t\t\tthis.data[2] = value\r\n\t\t}\r\n\t\tpublic get w(): number {\r\n\t\t\treturn this.data[3]\r\n\t\t}\r\n\t\tpublic set w(value: number) {\r\n\t\t\tthis.data[3] = value\r\n\t\t}\r\n\r\n\t\tcopy(vec: IVector) {\r\n\t\t\treturn Vector.merge(this, vec)\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport const Quat = Vector4\r\n\texport type Quat = Vector4\r\n\r\n\texport class Vector {\r\n\r\n\t\tprotected static _fromNumArray3(ns: number[]): Vector3 {\r\n\t\t\tlet vec = new Vector3()\r\n\t\t\tvec.setBinData(ns)\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tprotected static _fromNumArray4(ns: number[]): Vector4 {\r\n\t\t\tlet vec = new Vector4()\r\n\t\t\tvec.setBinData(ns)\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tstatic distanceSQ(vec1: IVector, vec2: IVector): number {\r\n\t\t\tconst n1 = vec1.getBinData()\r\n\t\t\tconst n2 = vec2.getBinData()\r\n\t\t\tlet total = 0\r\n\t\t\tfor (let i = 0; i < Math.min(n1.length, n2.length); i++) {\r\n\t\t\t\ttotal += (n1[i] - n2[i]) * (n1[i] - n2[i])\r\n\t\t\t}\r\n\t\t\treturn total\r\n\t\t}\r\n\r\n\t\tstatic distance(vec1: IVector, vec2: IVector): number {\r\n\t\t\tconst total = this.distanceSQ(vec1, vec2)\r\n\t\t\treturn Math.sqrt(total)\r\n\t\t}\r\n\r\n\t\tstatic equal(vec1: IVector, vec2: IVector): bool {\r\n\t\t\tconst n1 = vec1.getBinData()\r\n\t\t\tconst n2 = vec2.getBinData()\r\n\t\t\tif (n1.length != n2.length) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\r\n\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\tif (n1[i] != n2[i]) {\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tstatic subDown<T extends IVector>(vec1: T, vec2: T): T {\r\n\t\t\tconst n1 = vec1.getBinData()\r\n\t\t\tconst n2 = vec2.getBinData()\r\n\t\t\tfor (let i = 0; i < Math.min(n1.length, n2.length); i++) {\r\n\t\t\t\tn1[i] -= n2[i]\r\n\t\t\t}\r\n\t\t\treturn vec1\r\n\t\t}\r\n\r\n\t\tstatic addUp<T extends IVector>(vec1: T, vec2: T): T {\r\n\t\t\tconst n1 = vec1.getBinData()\r\n\t\t\tconst n2 = vec2.getBinData()\r\n\t\t\tfor (let i = 0; i < Math.min(n1.length, n2.length); i++) {\r\n\t\t\t\tn1[i] += n2[i]\r\n\t\t\t}\r\n\t\t\treturn vec1\r\n\t\t}\r\n\r\n\t\tstatic multUp<T extends IVector>(vec1: T, vec2: T): T {\r\n\t\t\tconst n1 = vec1.getBinData()\r\n\t\t\tconst n2 = vec2.getBinData()\r\n\t\t\tfor (let i = 0; i < Math.min(n1.length, n2.length); i++) {\r\n\t\t\t\tn1[i] *= n2[i]\r\n\t\t\t}\r\n\t\t\treturn vec1\r\n\t\t}\r\n\r\n\t\tstatic multUpVar<T extends IVector>(vec1: T, v: number): T {\r\n\t\t\tconst n1 = vec1.getBinData()\r\n\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\tn1[i] *= v\r\n\t\t\t}\r\n\t\t\treturn vec1\r\n\t\t}\r\n\r\n\t\tstatic multVar<T extends IVector>(vec1: T, v: number): T {\r\n\t\t\tlet newVec = new Vector3() as IVector\r\n\t\t\tconst n1 = newVec.getBinData()\r\n\t\t\tconst n2 = vec1.getBinData()\r\n\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\tn1[i] = n2[i] * v\r\n\t\t\t}\r\n\t\t\treturn newVec as T\r\n\t\t}\r\n\r\n\t\tstatic normalizeSelf<T extends IVector>(vec: T): T {\r\n\t\t\tconst n1 = vec.getBinData()\r\n\t\t\tlet lsq = 0\r\n\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\tlsq += n1[i] * n1[i]\r\n\t\t\t}\r\n\t\t\tif (lsq == 0) {\r\n\t\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\t\tn1[i] = 0\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tlet l = Math.sqrt(lsq)\r\n\t\t\t\tfor (let i = 0; i < n1.length; i++) {\r\n\t\t\t\t\tn1[i] /= l\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tstatic len<T extends IVector>(vec: T): number {\r\n\t\t\tconst n1 = vec.getBinData()\r\n\t\t\treturn NumberArray.len(n1)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 覆盖\r\n\t\t * @param out \r\n\t\t * @param vec2 \r\n\t\t */\r\n\t\tstatic merge<T extends IVector>(out: T, vec2: T): T {\r\n\t\t\tNumberArray.merge(out.getBinData(), vec2.getBinData())\r\n\t\t\treturn out\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 最小合并\r\n\t\t * @param vec1 \r\n\t\t * @param vec2 \r\n\t\t */\r\n\t\tstatic collect<T extends IVector>(vec1: T, vec2: T): T {\r\n\t\t\tNumberArray.collect(vec1.getBinData(), vec2.getBinData())\r\n\t\t\treturn vec1\r\n\t\t}\r\n\r\n\t\tstatic transEulerToQuaternion(quat: Vector4, vec3: Vector3) {\r\n\t\t\tNumberArray.transEulerToQuaternion(quat.getBinData(), vec3.getBinData())\r\n\t\t\treturn quat\r\n\t\t}\r\n\r\n\t\tstatic transQuaternionToEuler(vec3: Vector3, quat: Vector4, outerZ?: boolean) {\r\n\t\t\tNumberArray.transQuaternionToEuler(vec3.getBinData(), quat.getBinData(), outerZ)\r\n\t\t\treturn vec3\r\n\t\t}\r\n\r\n\t\tpublic static multiplyQuaternion(out: Vector4, a: Vector4, b: Vector4) {\r\n\t\t\tNumberArray.multiplyQuaternion(out.getBinData(), a.getBinData(), b.getBinData())\r\n\t\t\treturn out\r\n\t\t}\r\n\r\n\t\tpublic static resetValues(vec: IVector, value: number = 0) {\r\n\t\t\tlet ns = vec.getBinData()\r\n\t\t\tfor (let i = 0; i < ns.length; i++) {\r\n\t\t\t\tns[i] = value\r\n\t\t\t}\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 3维叉乘\r\n\t\t * @param out \r\n\t\t * @param a \r\n\t\t */\r\n\t\tpublic static crossBy3(out: Vector3, a: Vector3) {\r\n\t\t\tconst { x: ax, y: ay, z: az } = a;\r\n\t\t\tconst { x: bx, y: by, z: bz } = out;\r\n\t\t\tout.x = ay * bz - az * by;\r\n\t\t\tout.y = az * bx - ax * bz;\r\n\t\t\tout.z = ax * by - ay * bx;\r\n\t\t\treturn out;\r\n\t\t}\r\n\r\n\t\tpublic static dot(out: Vector3, a: Vector3): number {\r\n\t\t\tlet n = 0\r\n\t\t\tlet ns1 = out.getBinData()\r\n\t\t\tlet ns2 = a.getBinData()\r\n\t\t\tlet l = Math.min(ns1.length, ns2.length)\r\n\t\t\tfor (let i = 0; i < l; i++) {\r\n\t\t\t\tn += (ns1[i] * ns2[i])\r\n\t\t\t}\r\n\t\t\treturn n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 根据x，y决定的方向转换为角度 [-PI~PI]\r\n\t\t * @param b \r\n\t\t */\r\n\t\tpublic static getRotationZ2(b: IVector): number {\r\n\t\t\tlet data = b.getBinData()\r\n\t\t\tlet th = Math.atan2(data[1], data[0])\r\n\t\t\treturn th\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 根据x，y决定的方向转换为角度 [-PI~PI]\r\n\t\t * @param b \r\n\t\t */\r\n\t\tpublic static getRotation2(b: IVector): Vector3 {\r\n\t\t\tlet data = b.getBinData()\r\n\t\t\tlet th = Math.atan2(data[1], data[0])\r\n\t\t\treturn fsync.Vector3.fromNumArray([0, 0, th])\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 绕原点按笛卡尔坐标系弧度旋转\r\n\t\t * @param out \r\n\t\t */\r\n\t\tpublic static rotateSelfByZero2(out: IVector, angle: number): IVector {\r\n\t\t\tlet od = out.getBinData()\r\n\t\t\tlet cosInc = Math.cos(angle)\r\n\t\t\tlet sinInc = Math.sin(angle)\r\n\t\t\tlet x = cosInc * od[0] - sinInc * od[1];\r\n\t\t\tlet y = sinInc * od[0] + cosInc * od[1];\r\n\t\t\tod[0] = x\r\n\t\t\tod[1] = y\r\n\t\t\treturn out\r\n\t\t}\r\n\r\n\t\tpublic static asVectorN<T extends IVector>(b: IVector): T {\r\n\t\t\treturn b as T\r\n\t\t}\r\n\r\n\t\tpublic static asVector2(b: IVector): Vector2 {\r\n\t\t\treturn b as Vector2\r\n\t\t}\r\n\r\n\t\tpublic static asVector3(b: IVector): Vector3 {\r\n\t\t\treturn b as Vector3\r\n\t\t}\r\n\r\n\t\tpublic static asVector4(b: IVector): Vector4 {\r\n\t\t\treturn b as Vector4\r\n\t\t}\r\n\r\n\t}\r\n\r\n}","namespace fsync {\r\n\r\n\texport interface ISize2Spec {\r\n\t\twidth?: number\r\n\t\theight?: number\r\n\t}\r\n\r\n\texport class Size2 extends Vector2 {\r\n\t\tconstructor(width?: number, height?: number) {\r\n\t\t\tsuper(width, height)\r\n\t\t}\r\n\t\tget width(): number {\r\n\t\t\treturn this.x\r\n\t\t}\r\n\t\tset width(n: number) {\r\n\t\t\tthis.x = n\r\n\t\t}\r\n\t\tget height(): number {\r\n\t\t\treturn this.y\r\n\t\t}\r\n\t\tset height(n: number) {\r\n\t\t\tthis.y = n\r\n\t\t}\r\n\r\n\t\tstatic fromSize2Like(size2: ISize2Spec): Size2 {\r\n\t\t\tlet vec = new Size2().copySize2ike(size2)\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tcopySize2ike({ width, height }: ISize2Spec) {\r\n\t\t\tif (typeof (width) == \"number\") {\r\n\t\t\t\tthis.x = width\r\n\t\t\t}\r\n\t\t\tif (typeof (height) == \"number\") {\r\n\t\t\t\tthis.y = height\r\n\t\t\t}\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tstatic fromNumArray(ns: number[]): Size2 {\r\n\t\t\tlet vec = new Size2()\r\n\t\t\tvec.data[0] = ns[0] || 0\r\n\t\t\tvec.data[1] = ns[1] || 0\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport interface ISize3Spec {\r\n\t\twidth?: number\r\n\t\theight?: number\r\n\t\tdepth?: number\r\n\t}\r\n\r\n\texport class Size3 extends Vector3 {\r\n\t\tconstructor(width?: number, height?: number, depth?: number) {\r\n\t\t\tsuper(width, height, depth)\r\n\t\t}\r\n\t\tget width(): number {\r\n\t\t\treturn this.x\r\n\t\t}\r\n\t\tset width(n: number) {\r\n\t\t\tthis.x = n\r\n\t\t}\r\n\t\tget height(): number {\r\n\t\t\treturn this.y\r\n\t\t}\r\n\t\tset height(n: number) {\r\n\t\t\tthis.y = n\r\n\t\t}\r\n\t\tget depth(): number {\r\n\t\t\treturn this.z\r\n\t\t}\r\n\t\tset depth(n: number) {\r\n\t\t\tthis.z = n\r\n\t\t}\r\n\r\n\t\tstatic fromSize3Like(size3: ISize3Spec): Size3 {\r\n\t\t\tlet vec = new Size3().copySize3ike(size3)\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t\tcopySize3ike({ width, height, depth }: ISize3Spec) {\r\n\t\t\tif (typeof (width) == \"number\") {\r\n\t\t\t\tthis.x = width\r\n\t\t\t}\r\n\t\t\tif (typeof (height) == \"number\") {\r\n\t\t\t\tthis.y = height\r\n\t\t\t}\r\n\t\t\tif (typeof (depth) == \"number\") {\r\n\t\t\t\tthis.z = depth\r\n\t\t\t}\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tstatic fromNumArray(ns: number[]): Size3 {\r\n\t\t\tlet vec = new Size3()\r\n\t\t\tvec.data[0] = ns[0] || 0\r\n\t\t\tvec.data[1] = ns[1] || 0\r\n\t\t\tvec.data[2] = ns[2] || 0\r\n\t\t\treturn vec\r\n\t\t}\r\n\r\n\t}\r\n\r\n}","\r\nnamespace fsync.box2d.b2data {\r\n\texport import Vec2 = fsync.Vector2;\r\n\texport import Vec3 = fsync.Vector3;\r\n\texport import Vec4 = fsync.Vector4;\r\n\texport import Size = fsync.Size2;\r\n\r\n\texport type TFlip = 1 | -1\r\n\r\n\texport interface IBox2DModel {\r\n\t\toid: string\r\n\t}\r\n\r\n\texport class ComponentBase implements IBox2DModel {\r\n\t\tparent: Box2DParent\r\n\r\n\t\tloadFromJson(child: ComponentBase) {\r\n\t\t\tthis.oid = child.oid\r\n\t\t\tthis.ctype = child.ctype\r\n\t\t}\r\n\t\toid: string\r\n\t\tctype: string\r\n\r\n\t\t/**\r\n\t\t * 缩放倍率\r\n\t\t */\r\n\t\tPTM_RATIO: number = 1\r\n\r\n\t\tgetPTMRatio() {\r\n\t\t\tif (this.parent && this.parent['getPTMRatio']) {\r\n\t\t\t\treturn this.PTM_RATIO * this.parent['getPTMRatio']()\r\n\t\t\t}\r\n\t\t\treturn this.PTM_RATIO\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\r\n\t\t}\r\n\r\n\t\tgetInUnionRotationZ() {\r\n\t\t\tlet body = this.parent\r\n\t\t\tlet node = body.parent\r\n\r\n\t\t\tlet rotationZ = body.transform.rotation + node.transform.rotation\r\n\t\t\treturn rotationZ\r\n\t\t}\r\n\r\n\t\tgetWorldFlipY() {\r\n\t\t\tlet p1 = this.parent\r\n\t\t\tlet p2 = p1.parent\r\n\t\t\tlet p3 = p2.parent\r\n\r\n\t\t\tlet flipY = p1.transform.flip * p2.transform.flip * p3.transform.flip\r\n\t\t\treturn flipY\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport class Component extends ComponentBase {\r\n\t\tparent: Box2DBody\r\n\t\tisSelfDead: bool\r\n\t\tisDead() {\r\n\t\t\treturn this.isSelfDead || this.parent.isDead()\r\n\t\t}\r\n\r\n\t\tloadFromJson(child: ComponentBase) {\r\n\t\t\tsuper.loadFromJson(child)\r\n\t\t\tthis.isSelfDead = false\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\t/** !#en Defines a Box Collider .\r\n!#zh 用来定义包围盒碰撞体 */\r\n\texport interface Box {\r\n\t\t/** !#en Position offset\r\n\t\t!#zh 位置偏移量 */\r\n\t\toffset: Vec2;\r\n\t\t/** !#en Box size\r\n\t\t!#zh 包围盒大小 */\r\n\t\tsize: Size;\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\r\n\texport interface Box2DParent {\r\n\t\ttransform: Transform\r\n\t\tparent: Box2DParent\r\n\t}\r\n\r\n\t/**\r\n\t * 对应带有rigidbody组件的节点\r\n\t */\r\n\texport class Box2DBody implements Box2DParent {\r\n\r\n\t\tupdateParent() {\r\n\t\t\tthis.transform.parent = this\r\n\t\t\tfor (let child of this.components) {\r\n\t\t\t\tchild.parent = this\r\n\t\t\t}\r\n\r\n\t\t\tlet unionData = this.getUnionData()\r\n\t\t\tthis.collisionGroup.setTeamInfo(unionData.team, unionData.totalTeams)\r\n\t\t\tthis.collisionGroup.updateCollisionGroup()\r\n\t\t}\r\n\r\n\t\tname: string\r\n\t\toid: string\r\n\t\tcomponents: Component[] = []\r\n\t\ttransform: Transform\r\n\r\n\t\tcollisionGroup: CollisionGroup\r\n\r\n\t\tparent: Box2DNode\r\n\r\n\t\t/**\r\n\t\t * 等待清理\r\n\t\t */\r\n\t\tisSelfDead: bool\r\n\t\tisDead() {\r\n\t\t\treturn this.isSelfDead || this.parent.isDead()\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 缩放倍率\r\n\t\t */\r\n\t\tPTM_RATIO: number = 1\r\n\r\n\t\tgetNodeAngle() {\r\n\t\t\treturn this.parent.transform.rotation\r\n\t\t}\r\n\r\n\t\tgetBodyAngle() {\r\n\t\t\treturn this.transform.rotation\r\n\t\t}\r\n\r\n\t\tgetInUnionPosition2() {\r\n\t\t\tlet bodyPos = Vec2.fromXYZLike(this.transform.position)\r\n\t\t\tbodyPos.x = bodyPos.x * this.getNodeFlip()\r\n\t\t\tlet nodeAngle = this.parent.transform.rotation\r\n\t\t\t// node的旋转会对body的位置产生影响\r\n\t\t\tVector.rotateSelfByZero2(bodyPos, nodeAngle)\r\n\t\t\tlet nodePos = Vec2.fromXYZLike(this.parent.transform.position)\r\n\t\t\tVector.addUp(bodyPos, nodePos)\r\n\t\t\tbodyPos.x = bodyPos.x * this.getUnionFlip()\r\n\r\n\t\t\treturn bodyPos\r\n\t\t}\r\n\r\n\t\tgetBodyFlip(): TFlip {\r\n\t\t\treturn this.transform.flip\r\n\t\t}\r\n\r\n\t\tgetNodeFlip(): TFlip {\r\n\t\t\treturn this.parent.transform.flip\r\n\t\t}\r\n\r\n\t\tgetUnionFlip(): TFlip {\r\n\t\t\treturn this.parent.parent.transform.flip\r\n\t\t}\r\n\r\n\t\tgetMainBodyPosInUnion() {\r\n\t\t\treturn this.getInUnionPosition2()\r\n\t\t}\r\n\r\n\t\tgetMainBodyPosInWorld() {\r\n\t\t\tlet bodyPos = this.getMainBodyPosInUnion()\r\n\t\t\tlet worldPos = this.getUnionData().calcPtInParent(bodyPos)\r\n\t\t\treturn worldPos\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 计算body上的点在union上的坐标\r\n\t\t * @param shapePt \r\n\t\t */\r\n\t\tcalcShapePtInUnion(shapePt: Vec2) {\r\n\t\t\tlet selfBodyPosInNode = Vector2.fromXYZLike(this.transform.position)\r\n\t\t\tlet selfNodePosInUnion = Vector2.fromXYZLike(this.parent.transform.position)\r\n\t\t\tlet selfBodyAngleInNode = this.transform.rotation\r\n\t\t\tlet selfNodeAngleInUnion = this.parent.transform.rotation\r\n\t\t\tlet selfBodyAngleInUnion = selfBodyAngleInNode + selfNodeAngleInUnion\r\n\r\n\t\t\t// 算出node旋转产生的整体位移效应\r\n\t\t\tlet rotatedOffset = selfBodyPosInNode.clone()\r\n\t\t\t// 应对node自身翻转\r\n\t\t\trotatedOffset.x = rotatedOffset.x * this.getNodeFlip()\r\n\t\t\tVector.rotateSelfByZero2(rotatedOffset, selfNodeAngleInUnion)\r\n\t\t\t// 叠加整体位移\r\n\t\t\tlet bodyOffsetInUnion = Vector.addUp(selfNodePosInUnion.clone(), rotatedOffset)\r\n\t\t\t// 应对union自身翻转\r\n\t\t\tbodyOffsetInUnion.x = bodyOffsetInUnion.x * this.getUnionFlip()\r\n\r\n\t\t\t// 算出shape自身每个点的总旋转效应\r\n\t\t\tlet shapePtInUnion = shapePt.clone()\r\n\t\t\tVector.rotateSelfByZero2(shapePtInUnion, selfBodyAngleInUnion)\r\n\t\t\t// 应对node自身旋转\r\n\t\t\tshapePtInUnion.x = shapePtInUnion.x * this.getNodeFlip() * this.getUnionFlip()\r\n\t\t\tVector.addUp(shapePtInUnion, bodyOffsetInUnion)\r\n\t\t\treturn shapePtInUnion\r\n\t\t}\r\n\r\n\t\tcalcShapePtInWorld(shapePt: Vec2) {\r\n\t\t\tlet bodyPos = this.calcShapePtInUnion(shapePt)\r\n\t\t\tlet worldPos = this.getUnionData().calcPtInParent(bodyPos)\r\n\t\t\treturn worldPos\r\n\t\t}\r\n\r\n\t\tcalcAngleInFixture(mainBody: Box2DBody) {\r\n\t\t\treturn this.transform.rotation\r\n\t\t}\r\n\r\n\t\tcalcFlipInMainBody(mainBody: Box2DBody) {\r\n\t\t\treturn this.transform.flip * this.parent.transform.flip * this.parent.parent.transform.flip\r\n\t\t}\r\n\r\n\t\tcalcShapePtInMainBody(mainBody: Box2DBody, shapePt: Vector2) {\r\n\r\n\t\t\tlet bodyPosInWorld = mainBody.getMainBodyPosInUnion();\r\n\r\n\t\t\tlet shapePtInWorld = this.calcShapePtInUnion(shapePt)\r\n\r\n\t\t\tlet shapePtInMainBody = Vector.subDown(shapePtInWorld.clone(), bodyPosInWorld);\r\n\t\t\treturn shapePtInMainBody;\r\n\t\t}\r\n\r\n\t\tcalcJointAnchor(mainBody: Box2DBody, anchor: Vec2): Vec2 {\r\n\t\t\treturn this.calcShapePtInMainBody(mainBody, anchor)\r\n\t\t}\r\n\r\n\t\tgetPTMRatio() {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\treturn this.PTM_RATIO * this.parent.getPTMRatio()\r\n\t\t\t}\r\n\t\t\treturn this.PTM_RATIO\r\n\t\t}\r\n\r\n\t\tfindRigidBody(): RigidBody {\r\n\t\t\treturn this.components.find(comp => comp instanceof RigidBody) as RigidBody\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\t\t\tthis.transform.updatePTMRatio()\r\n\t\t\tthis.components.forEach((comp) => comp.updatePTMRatio())\r\n\t\t}\r\n\r\n\t\tgetUnionData() {\r\n\t\t\treturn this.parent.parent\r\n\t\t}\r\n\r\n\t\tloadFromJson(json: Box2DBody) {\r\n\t\t\tthis.oid = json.oid\r\n\t\t\tthis.name = json.name\r\n\r\n\t\t\tthis.isSelfDead = false\r\n\r\n\t\t\tthis.transform = new Transform()\r\n\t\t\tthis.transform.loadFromJson(json.transform)\r\n\r\n\t\t\tthis.collisionGroup = new CollisionGroup()\r\n\t\t\tthis.collisionGroup.loadFromJson(json.collisionGroup)\r\n\r\n\t\t\tthis.components = []\r\n\t\t\tfor (let child of json.components) {\r\n\t\t\t\tlet childCopy: b2data.Component\r\n\t\t\t\tswitch (child.ctype) {\r\n\t\t\t\t\tcase \"cc_RigidBody\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new RigidBody()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"cc_PhysicsBoxCollider\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new PhysicsBoxCollider()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"cc_PhysicsCircleCollider\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new PhysicsCircleCollider()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"cc_PhysicsPolygonCollider\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new PhysicsPolygonCollider()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"cc_PhysicsBoxCollider\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new PhysicsBoxCollider()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"cc_RevoluteJoint\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new RevoluteJoint()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"cc_WheelJoint\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new WheelJoint()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcase \"cc_WeldJoint\":\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildCopy = new WeldJoint()\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.warn(\"unsupport type\", child.ctype)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (childCopy) {\r\n\t\t\t\t\tchildCopy.loadFromJson(child)\r\n\t\t\t\t\tthis.components.push(childCopy)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","\r\n\r\nnamespace fsync.box2d {\r\n\texport class Box2DHelper {\r\n\t\tgetBodyAABB(b: b2.Body, vs: b2.AABB) {\r\n\t\t\tfor (let fx = b.GetFixtureList(); fx; fx = fx.GetNext()) {\r\n\t\t\t\tfor (let pi = 0; pi < fx.m_proxies.length; pi++) {\r\n\t\t\t\t\tlet proxy = fx.m_proxies[pi]\r\n\t\t\t\t\tlet ab = proxy.aabb\r\n\t\t\t\t\tif (proxy.treeNode) {\r\n\t\t\t\t\t\tab = proxy.treeNode.aabb\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvs.lowerBound.x = Math.min(vs.lowerBound.x, ab.lowerBound.x)\r\n\t\t\t\t\tvs.lowerBound.y = Math.min(vs.lowerBound.y, ab.lowerBound.y)\r\n\t\t\t\t\tvs.upperBound.x = Math.max(vs.upperBound.x, ab.upperBound.x)\r\n\t\t\t\t\tvs.upperBound.y = Math.max(vs.upperBound.y, ab.upperBound.y)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn vs\r\n\t\t}\r\n\t}\r\n\texport const box2DHelper = new Box2DHelper()\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\r\n\t/**\r\n\t * 节点皮肤信息\r\n\t */\r\n\texport class NodeSkinInfo {\r\n\t\tskinId: number = -1\r\n\r\n\t\tparent: Box2DNode\r\n\r\n\t\tloadFromJson(json: NodeSkinInfo) {\r\n\t\t\tthis.skinId = json.skinId\r\n\t\t}\r\n\r\n\t\tgetSkinId() {\r\n\t\t\tif (this.skinId >= 0) {\r\n\t\t\t\treturn this.skinId\r\n\t\t\t}\r\n\t\t\tif (this.parent != null) {\r\n\t\t\t\treturn this.parent.parent.skinInfo.getSkinId()\r\n\t\t\t}\r\n\t\t\treturn -1\r\n\t\t}\r\n\r\n\t\tsetSkinId(skinId: number) {\r\n\t\t\tthis.skinId = skinId\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * 对应box预制体根节点\r\n\t */\r\n\texport class Box2DNode implements IBox2DModel, Box2DParent {\r\n\t\toid: string\r\n\t\tname: string\r\n\t\tchildren: Box2DBody[] = []\r\n\t\ttransform: Transform\r\n\t\tparent: Box2DUnionData\r\n\r\n\t\t/**\r\n\t\t * 等待清理\r\n\t\t */\r\n\t\tisSelfDead: bool\r\n\t\tisDead() {\r\n\t\t\treturn this.isSelfDead || this.parent.isDead()\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 缩放倍率\r\n\t\t */\r\n\t\tPTM_RATIO: number = 1\r\n\r\n\t\t/**\r\n\t\t * 图层顺序\r\n\t\t */\r\n\t\tlayerOrder: number = 0\r\n\r\n\t\t/**\r\n\t\t * 皮肤信息\r\n\t\t */\r\n\t\tskinInfo: NodeSkinInfo = new NodeSkinInfo()\r\n\r\n\t\tgetPTMRatio() {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\treturn this.PTM_RATIO * this.parent.getPTMRatio()\r\n\t\t\t}\r\n\t\t\treturn this.PTM_RATIO\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\t\t\tthis.transform.updatePTMRatio()\r\n\t\t\tthis.children.forEach((comp) => comp.updatePTMRatio())\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 所挂技能附件的信息\r\n\t\t */\r\n\t\tskillExtras: ISkillExtra[] = []\r\n\r\n\t\tupdateParent() {\r\n\t\t\tthis.transform.parent = this\r\n\t\t\tthis.skinInfo.parent = this\r\n\t\t\tfor (let child of this.children) {\r\n\t\t\t\tchild.parent = this\r\n\t\t\t\tchild.updateParent()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tloadFromJson(json: Box2DNode) {\r\n\t\t\tthis.oid = json.oid\r\n\t\t\tthis.name = json.name\r\n\r\n\t\t\tthis.isSelfDead = false\r\n\r\n\t\t\tthis.layerOrder = json.layerOrder\r\n\r\n\t\t\tthis.skinInfo.loadFromJson(json.skinInfo)\r\n\r\n\t\t\tthis.transform = new Transform()\r\n\t\t\tthis.transform.loadFromJson(json.transform)\r\n\r\n\t\t\tthis.children = []\r\n\t\t\tfor (let child of json.children) {\r\n\t\t\t\tlet childCopy = new Box2DBody()\r\n\t\t\t\tchildCopy.loadFromJson(child)\r\n\t\t\t\tthis.children.push(childCopy)\r\n\t\t\t}\r\n\r\n\t\t\tthis.skillExtras = json.skillExtras\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport class Transform extends ComponentBase {\r\n\t\t/**\r\n\t\t * 相对坐标\r\n\t\t */\r\n\t\tposition: Vec3 = new Vec3()\r\n\t\t/**\r\n\t\t * 旋转弧度/角度\r\n\t\t * - 加载阶段会从cocos角度值转换为box2d内部使用的弧度值\r\n\t\t */\r\n\t\trotation: number = 0\r\n\t\t/**\r\n\t\t * 按x轴翻转\r\n\t\t */\r\n\t\tflip: TFlip = 1\r\n\r\n\t\t/**\r\n\t\t * 从json加载box2d纯数据模型对象\r\n\t\t * @param json \r\n\t\t */\r\n\t\tloadFromJson(json: Transform) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\r\n\t\t\tthis.position = Vec3.fromNumArray(json.position['data'])\r\n\t\t\tthis.flip = json.flip\r\n\t\t\tthis.rotation = json.rotation * ANGLE_TO_PHYSICS_ANGLE\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 更新缩放倍率\r\n\t\t */\r\n\t\tupdatePTMRatio() {\r\n\t\t\tlet rptm = 1 / this.getPTMRatio()\r\n\t\t\tVector.multUpVar(this.position, rptm)\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport interface WithUserData {\r\n\t\tGetUserData(): IBox2DUserData\r\n\t}\r\n\r\n\texport class Box2DUnion implements IBox2DModel {\r\n\t\tname: string\r\n\t\t/**\r\n\t\t * 标签列表，可调试用\r\n\t\t */\r\n\t\ttags: string[] = []\r\n\t\toid: string\r\n\t\tmid: string\r\n\t\tbodies: b2.Body[] = []\r\n\t\tjoints: b2.Joint[] = []\r\n\t\tfixtures: b2.Fixture[] = []\r\n\t\toutsideFixture: b2.Fixture[] = []\r\n\t\theadBody: b2.Body\r\n\t\tisOutsideHeadBody: bool = false\r\n\t\tskillExtras: ISkillExtra[] = []\r\n\t\tmodelToTargetMap: { [key: string]: string }\r\n\r\n\t\tbox2dUnionData: Box2DUnionData\r\n\r\n\t\tupdateUserData(uidTool: UniqueIDTool) {\r\n\t\t\tthis.oid = uidTool.genTypedId(\"Box2DUnion\")\r\n\t\t\tfor (let body of this.bodies) {\r\n\t\t\t\tlet userData = body.GetUserData() as IBox2DBodyData\r\n\t\t\t\tuserData.oid = uidTool.genTypedId(\"b2body\")\r\n\t\t\t\tuserData.unionId = this.oid\r\n\t\t\t}\r\n\t\t\tfor (let fixture of this.fixtures) {\r\n\t\t\t\tlet userData = fixture.GetUserData() as IBox2DFixtureData\r\n\t\t\t\tuserData.oid = uidTool.genTypedId(\"b2fixture\")\r\n\t\t\t\tuserData.unionId = this.oid\r\n\t\t\t}\r\n\t\t\tfor (let joint of this.joints) {\r\n\t\t\t\tlet userData = joint.GetUserData() as IBox2DJointData\r\n\t\t\t\tuserData.oid = uidTool.genTypedId(\"b2joint\")\r\n\t\t\t\tuserData.unionId = this.oid\r\n\t\t\t}\r\n\r\n\t\t\tlet compsMap: { [key: string]: string } = {}\r\n\t\t\tlet comps: WithUserData[] = [].concat(this.bodies).concat(this.joints).concat(this.fixtures)\r\n\t\t\tcomps.forEach((comp) => {\r\n\t\t\t\tlet mid = comp.GetUserData().mid\r\n\t\t\t\tcompsMap[mid] = comp.GetUserData().oid\r\n\t\t\t})\r\n\r\n\t\t\tthis.modelToTargetMap = compsMap\r\n\r\n\t\t\t// let skillExtras = this.skillExtras\r\n\t\t\t// let skillExtrasConvert: ISkillExtra[] = []\r\n\t\t\t// for (let skillExtra of skillExtras) {\r\n\t\t\t// \tlet newExtra = EmptyTable()\r\n\t\t\t// \tfor (let key in skillExtra) {\r\n\t\t\t// \t\tlet value = skillExtra[key]\r\n\t\t\t// \t\tlet mapValue = compsMap[value]\r\n\t\t\t// \t\tif (mapValue != null) {\r\n\t\t\t// \t\t\tnewExtra[key] = mapValue\r\n\t\t\t// \t\t} else {\r\n\t\t\t// \t\t\tnewExtra[key] = value\r\n\t\t\t// \t\t}\r\n\t\t\t// \t}\r\n\t\t\t// \tskillExtrasConvert.push(newExtra)\r\n\t\t\t// }\r\n\t\t\t// this.skillExtras = skillExtrasConvert\r\n\r\n\t\t}\r\n\r\n\t\tgetFixturesByModelId(id: string): b2.Fixture[] {\r\n\t\t\tlet fs = this.fixtures.filter(fixture => (fixture as WithUserData).GetUserData().mid == id)\r\n\t\t\treturn fs\r\n\t\t}\r\n\r\n\t\tgetFixturesByBodyModel(bodyModel: Box2DBody) {\r\n\t\t\tlet comps = bodyModel.components.filter(comp => comp instanceof b2data.PhysicsCollider)\r\n\t\t\tlet fixtures: b2.Fixture[] = []\r\n\t\t\tcomps.forEach(comp => {\r\n\t\t\t\tlet fs = this.getFixturesByModelId(comp.oid)\r\n\t\t\t\tfs.forEach(fixture => {\r\n\t\t\t\t\tfixtures.push(fixture)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\treturn fixtures\r\n\t\t}\r\n\r\n\t\tgetFixturesByNodeModel(nodeModel: Box2DNode) {\r\n\t\t\tlet fixtuers: b2.Fixture[] = []\r\n\t\t\tnodeModel.children.forEach(bodyModel => {\r\n\t\t\t\tthis.getFixturesByBodyModel(bodyModel).forEach(fixture => {\r\n\t\t\t\t\tfixtuers.push(fixture)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\treturn fixtuers\r\n\t\t}\r\n\r\n\t\tcalcAABB() {\r\n\t\t\tlet minX = Number.MAX_VALUE\r\n\t\t\tlet maxX = -Number.MAX_VALUE\r\n\t\t\tlet minY = Number.MAX_VALUE\r\n\t\t\tlet maxY = -Number.MAX_VALUE\r\n\r\n\t\t\tlet vs = new b2.AABB()\r\n\t\t\tvs.lowerBound.x = Number.MAX_VALUE\r\n\t\t\tvs.lowerBound.y = Number.MAX_VALUE\r\n\t\t\tvs.upperBound.x = -Number.MAX_VALUE\r\n\t\t\tvs.upperBound.y = -Number.MAX_VALUE\r\n\r\n\t\t\tlet bodyExist = false\r\n\r\n\t\t\tfor (let body of this.bodies) {\r\n\t\t\t\tbox2DHelper.getBodyAABB(body, vs)\r\n\t\t\t\tbodyExist = true\r\n\t\t\t}\r\n\r\n\t\t\tif (!bodyExist) {\r\n\t\t\t\tthrow new Error(\"invalid body for calc AABB\")\r\n\t\t\t}\r\n\r\n\t\t\tminX = vs.lowerBound.x\r\n\t\t\tminY = vs.lowerBound.y\r\n\t\t\tmaxX = vs.upperBound.x\r\n\t\t\tmaxY = vs.upperBound.y\r\n\r\n\t\t\treturn {\r\n\t\t\t\tx: (minX + (maxX - minX) / 2),\r\n\t\t\t\ty: (minY + (maxY - minY) / 2),\r\n\t\t\t\twidth: Math.abs(maxX - minX),\r\n\t\t\t\theight: Math.abs(maxY - minY),\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetPosition(pos: b2data.Vec2) {\r\n\t\t\tlet b2Pos = new b2.Vec2(pos.x, pos.y)\r\n\t\t\tlet headPos = this.headBody.GetPosition()\r\n\t\t\tlet offset = b2Pos.Clone().SelfSub(headPos)\r\n\t\t\tthis.bodies.forEach(body => {\r\n\t\t\t\tbody.SetPosition(body.GetPosition().SelfAdd(offset))\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport class UnionSkinInfo {\r\n\t\tskinId: number = -1\r\n\r\n\t\tparent: Box2DUnionData\r\n\r\n\t\tloadFromJson(json: UnionSkinInfo) {\r\n\t\t\tthis.skinId = json.skinId\r\n\t\t}\r\n\r\n\t\tgetSkinId() {\r\n\t\t\treturn this.skinId\r\n\t\t}\r\n\r\n\t\tsetSkinId(skinId: number) {\r\n\t\t\tthis.skinId = skinId\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport class Box2DUnionData implements IBox2DModel, Box2DParent {\r\n\t\tname: string\r\n\t\t/**\r\n\t\t * 标签列表，可调试用\r\n\t\t */\r\n\t\ttags: string[] = []\r\n\t\ttransform: Transform = new Transform()\r\n\r\n\t\tparent: Box2DParent\r\n\r\n\t\toid: string\r\n\t\tchildren: Box2DNode[] = []\r\n\t\t/**\r\n\t\t * 关联信息\r\n\t\t */\r\n\t\tfixedContacts: FixedContact[] = []\r\n\t\t/**\r\n\t\t * 锚点主体\r\n\t\t */\r\n\t\tbodyName: string\r\n\r\n\t\t/**\r\n\t\t * 等待清理\r\n\t\t */\r\n\t\tisSelfDead: bool\r\n\t\tisDead() {\r\n\t\t\treturn this.isSelfDead\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 缩放倍率\r\n\t\t */\r\n\t\tPTM_RATIO: number = 1\r\n\r\n\t\t/**\r\n\t\t * 队伍归属，用于碰撞分组\r\n\t\t */\r\n\t\tteam: number = 0\r\n\t\t/**\r\n\t\t * 所有队伍\r\n\t\t */\r\n\t\ttotalTeams: number[] = []\r\n\r\n\t\t/**\r\n\t\t * 皮肤信息\r\n\t\t */\r\n\t\tskinInfo: UnionSkinInfo = new UnionSkinInfo()\r\n\r\n\t\t/**\r\n\t\t * 外部关联信息\r\n\t\t */\r\n\t\toutsideFixedContact: OutsideFixedContact = new OutsideFixedContact()\r\n\r\n\t\tcalcPtInParent(pt: Vec2) {\r\n\t\t\tlet unionAngle = this.transform.rotation\r\n\t\t\tlet bodyOffset = Vector.rotateSelfByZero2(pt, unionAngle)\r\n\t\t\tlet unionPos = this.transform.position\r\n\t\t\tlet worldPos = Vector.addUp(Vector2.fromXYZLike(unionPos), bodyOffset)\r\n\t\t\treturn worldPos\r\n\t\t}\r\n\r\n\t\tgetPTMRatio() {\r\n\t\t\treturn this.PTM_RATIO\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\t\t\tif (this.transform) {\r\n\t\t\t\tthis.transform.updatePTMRatio()\r\n\t\t\t}\r\n\t\t\tthis.children.forEach((comp) => comp.updatePTMRatio())\r\n\t\t}\r\n\r\n\t\tloadFromJson(json: Box2DUnionData) {\r\n\t\t\tthis.oid = json.oid\r\n\t\t\tthis.name = json.name\r\n\t\t\tjson.tags.forEach(tag => this.tags.push(tag))\r\n\t\t\tthis.bodyName = json.bodyName\r\n\t\t\tthis.isSelfDead = false\r\n\t\t\tthis.transform.loadFromJson(json.transform)\r\n\t\t\tthis.skinInfo.loadFromJson(json.skinInfo)\r\n\t\t\tthis.fixedContacts = json.fixedContacts\r\n\t\t\tthis.children = json.children.map((child) => {\r\n\t\t\t\tlet node = new Box2DNode()\r\n\t\t\t\tnode.loadFromJson(child)\r\n\t\t\t\treturn node\r\n\t\t\t})\r\n\t\t\tthis.team = json.team\r\n\t\t\tthis.totalTeams = json.totalTeams.concat()\r\n\t\t}\r\n\r\n\t\tupdateParent() {\r\n\t\t\tif (this.transform) {\r\n\t\t\t\tthis.transform.parent = this\r\n\t\t\t}\r\n\t\t\tif (this.skinInfo) {\r\n\t\t\t\tthis.skinInfo.parent = this\r\n\t\t\t}\r\n\t\t\tfor (let child of this.children) {\r\n\t\t\t\tchild.parent = this\r\n\t\t\t\tchild.updateParent()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetBelongedZoneId(body: Box2DBody) {\r\n\t\t\tlet bodyId = body.findRigidBody().oid\r\n\t\t\tlet connect = this.fixedContacts.find(c => c.groupId == bodyId)\r\n\t\t\tif (connect) {\r\n\t\t\t\treturn connect.connectZoneId\r\n\t\t\t} else {\r\n\t\t\t\treturn bodyId\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetBelongedZone(body: Box2DBody) {\r\n\t\t\tlet bodyId = body.findRigidBody().oid\r\n\t\t\tlet connect = this.fixedContacts.find(c => c.groupId == bodyId)\r\n\t\t\tlet zoneId = bodyId\r\n\t\t\tif (connect) {\r\n\t\t\t\tzoneId = connect.connectZoneId\r\n\t\t\t}\r\n\r\n\t\t\t// 整合为一个body群\r\n\t\t\tlet molecules: Box2DBody[] = []\r\n\t\t\tthis.children.forEach(childNode => {\r\n\t\t\t\tchildNode.children.forEach((childBody) => {\r\n\t\t\t\t\tmolecules.push(childBody)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tlet zone = molecules.find(body => body.findRigidBody().oid == zoneId)\r\n\t\t\treturn zone\r\n\t\t}\r\n\r\n\t\tcreateUnion(world: b2.World): Box2DUnion {\r\n\r\n\t\t\tlet outsideFixedContact: OutsideFixedContact = this.outsideFixedContact\r\n\r\n\t\t\tlet b2Union = new Box2DUnion()\r\n\t\t\tb2Union.name = this.name\r\n\t\t\tb2Union.mid = this.oid\r\n\t\t\tthis.tags.forEach(tag => b2Union.tags.push(tag))\r\n\t\t\tb2Union.box2dUnionData = this\r\n\r\n\t\t\t// 合并 skillextra 信息\r\n\t\t\tb2Union.skillExtras.length = 0\r\n\t\t\tthis.children.forEach((childNode) => {\r\n\t\t\t\tchildNode.skillExtras.forEach((extra) => {\r\n\t\t\t\t\tb2Union.skillExtras.push(extra)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\t// 整合为一个body群\r\n\t\t\tlet molecules: Box2DBody[] = []\r\n\t\t\tthis.children.forEach(childNode => {\r\n\t\t\t\tchildNode.children.forEach((childBody) => {\r\n\t\t\t\t\tmolecules.push(childBody)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\t// 找到 main body\r\n\t\t\tlet mainNode = this.children.find(child => child.name == this.bodyName)\r\n\t\t\tif (mainNode == null) {\r\n\t\t\t\tmainNode = this.children[0]\r\n\t\t\t}\r\n\t\t\tlet mainBody = mainNode.children.find(body => body.name == \"Main\")\r\n\t\t\tif (mainBody == null) {\r\n\t\t\t\tmainBody = mainNode.children[0]\r\n\t\t\t}\r\n\t\t\tlet mainRigidBody = mainBody.findRigidBody()\r\n\r\n\t\t\tlet zoneMap: { [key: string]: string } = {}\r\n\t\t\tfor (let contact of this.fixedContacts) {\r\n\t\t\t\tzoneMap[contact.groupId] = contact.connectZoneId\r\n\t\t\t}\r\n\t\t\tfor (let contact of outsideFixedContact.fixedContacts) {\r\n\t\t\t\tzoneMap[contact.groupId] = contact.connectZoneId\r\n\t\t\t}\r\n\r\n\t\t\tlet bodyMaps: { [key: string]: Box2DBody } = {}\r\n\t\t\tmolecules.forEach((molecule) => {\r\n\t\t\t\tbodyMaps[molecule.findRigidBody().oid] = molecule\r\n\t\t\t})\r\n\t\t\toutsideFixedContact.bodyModels.forEach((molecule) => {\r\n\t\t\t\tbodyMaps[molecule.findRigidBody().oid] = molecule\r\n\t\t\t})\r\n\r\n\t\t\tlet zoneMoleculesMap: { [key: string]: Box2DBody[] } = EmptyTable()\r\n\t\t\tmolecules.forEach((molecule) => {\r\n\t\t\t\tlet targetRigidBody = molecule.findRigidBody()\r\n\t\t\t\tlet zoneId = zoneMap[targetRigidBody.oid]\r\n\t\t\t\t// 如果没有焊死，那么独立成为一个body，(除了主体，通常不会出现)\r\n\t\t\t\tif (zoneId == null) {\r\n\t\t\t\t\tzoneId = targetRigidBody.oid\r\n\t\t\t\t}\r\n\t\t\t\tlet ls = zoneMoleculesMap[zoneId] = zoneMoleculesMap[zoneId] || []\r\n\t\t\t\tls.push(molecule)\r\n\t\t\t})\r\n\r\n\t\t\tlet zoneB2BodyMap: { [key: string]: b2.Body } = {}\r\n\t\t\toutsideFixedContact.bodies.forEach((body, index) => {\r\n\t\t\t\tlet molecule = outsideFixedContact.bodyModels[index]\r\n\t\t\t\tzoneB2BodyMap[molecule.findRigidBody().oid] = body\r\n\t\t\t})\r\n\r\n\t\t\t// 遍历所有 zone 创建body,并附加 fixture\r\n\t\t\tfor (let zoneId in zoneMoleculesMap) {\r\n\t\t\t\t// 区域中需要合并的body\r\n\t\t\t\tlet zoneMolecules = zoneMoleculesMap[zoneId]\r\n\r\n\t\t\t\t// 区域的主体body，区域中所有body合并到此body中\r\n\t\t\t\tlet zonBodyModel = bodyMaps[zoneId]\r\n\r\n\t\t\t\tlet isOutsideFixture = false\r\n\t\t\t\tlet zoneBody: b2.Body\r\n\t\t\t\tif (zoneB2BodyMap[zoneId]) {\r\n\t\t\t\t\tzoneBody = zoneB2BodyMap[zoneId]\r\n\t\t\t\t\tisOutsideFixture = true\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet zoneRigidBody = zonBodyModel.components.find(comp => comp instanceof RigidBody) as RigidBody\r\n\t\t\t\t\tlet zoneBodyDef = zoneRigidBody.createBodyDef()\r\n\t\t\t\t\tlet zoneName = zoneRigidBody.parent.parent.name\r\n\t\t\t\t\tzoneBody = zoneRigidBody.createBody(zoneName, world, zoneBodyDef, b2Union.oid)\r\n\t\t\t\t\tlet bodyPos = zonBodyModel.getInUnionPosition2()\r\n\t\t\t\t\tzoneBody.SetPosition(new b2.Vec2(bodyPos.x, bodyPos.y))\r\n\t\t\t\t\tzoneB2BodyMap[zoneId] = zoneBody\r\n\t\t\t\t\tb2Union.bodies.push(zoneBody)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// 遍历创建fixture\r\n\t\t\t\tzoneMolecules.forEach((molecule) => {\r\n\t\t\t\t\tmolecule.components.forEach((comp) => {\r\n\t\t\t\t\t\tif (comp instanceof PhysicsCollider) {\r\n\t\t\t\t\t\t\tlet shapes = comp.createShapes(zonBodyModel)\r\n\t\t\t\t\t\t\tfor (let shape of shapes) {\r\n\t\t\t\t\t\t\t\tlet fixtureDef = comp.createFixtureDef()\r\n\t\t\t\t\t\t\t\tfixtureDef.shape = shape\r\n\r\n\t\t\t\t\t\t\t\tlet fixture = comp.createFixture(zoneBody, fixtureDef, b2Union.oid)\r\n\t\t\t\t\t\t\t\tb2Union.fixtures.push(fixture)\r\n\t\t\t\t\t\t\t\tif (isOutsideFixture) {\r\n\t\t\t\t\t\t\t\t\tb2Union.outsideFixture.push(fixture)\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet fixtureOffset = molecule.calcShapePtInMainBody(zonBodyModel, new Vec2())\r\n\t\t\t\t\t\t\t\tlet fixtureAngle = molecule.calcAngleInFixture(zonBodyModel)\r\n\t\t\t\t\t\t\t\tlet fixtureFlip = molecule.calcFlipInMainBody(zonBodyModel)\r\n\t\t\t\t\t\t\t\tlet fixtureTransform = new Transform()\r\n\t\t\t\t\t\t\t\tfixtureTransform.position = Vec3.fromXYZLike(fixtureOffset)\r\n\t\t\t\t\t\t\t\tfixtureTransform.rotation = fixtureAngle\r\n\t\t\t\t\t\t\t\tfixtureTransform.flip = fixtureFlip as TFlip\r\n\t\t\t\t\t\t\t\tfixture.GetUserData<IBox2DFixtureData>().transform = fixtureTransform\r\n\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\t// 设置整体原点信息\r\n\t\t\tlet headBodyId = zoneMap[mainRigidBody.oid]\r\n\t\t\tif (headBodyId == null) {\r\n\t\t\t\theadBodyId = mainRigidBody.oid\r\n\t\t\t}\r\n\t\t\tb2Union.headBody = zoneB2BodyMap[headBodyId]\r\n\r\n\t\t\t// 遍历创建joints\r\n\t\t\tmolecules.forEach((molecule) => {\r\n\t\t\t\tlet myGroupId = molecule.findRigidBody().oid\r\n\t\t\t\tlet myZoneId = zoneMap[myGroupId]\r\n\t\t\t\tif (myZoneId == null) {\r\n\t\t\t\t\tmyZoneId = myGroupId\r\n\t\t\t\t}\r\n\t\t\t\tlet myZoneB2Body = zoneB2BodyMap[myZoneId]\r\n\r\n\t\t\t\tmolecule.components.forEach((comp) => {\r\n\t\t\t\t\tif (comp instanceof Joint) {\r\n\t\t\t\t\t\tlet groupId = comp.connectedBody.oid\r\n\t\t\t\t\t\tlet zoneId = zoneMap[groupId]\r\n\t\t\t\t\t\tif (zoneId == null) {\r\n\t\t\t\t\t\t\tzoneId = groupId\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet b2body = zoneB2BodyMap[zoneId]\r\n\r\n\t\t\t\t\t\tlet mainBodyModelA = bodyMaps[myZoneId]\r\n\t\t\t\t\t\tlet bodyModelA = bodyMaps[myGroupId]\r\n\t\t\t\t\t\tlet mainBodyModelB = bodyMaps[zoneId]\r\n\t\t\t\t\t\tlet bodyModelB = bodyMaps[groupId]\r\n\r\n\t\t\t\t\t\tlet jointDef = comp.createJointDef(mainBodyModelA, bodyModelA, mainBodyModelB, bodyModelB)\r\n\t\t\t\t\t\tjointDef.bodyA = myZoneB2Body\r\n\t\t\t\t\t\tjointDef.bodyB = b2body\r\n\r\n\t\t\t\t\t\tlet b2Joint = comp.createJoint(world, jointDef, b2Union.oid)\r\n\t\t\t\t\t\tb2Union.joints.push(b2Joint)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tb2Union.setPosition(Vector.asVector2(this.transform.position))\r\n\r\n\t\t\tlet isOutsideBody = outsideFixedContact.bodies.indexOf(b2Union.headBody) >= 0\r\n\t\t\tb2Union.isOutsideHeadBody = isOutsideBody\r\n\t\t\tif (!isOutsideBody) {\r\n\t\t\t\t// 不去影响主体的旋转和位置\r\n\t\t\t\tb2Union.headBody.SetAngle(this.transform.rotation)\r\n\t\t\t}\r\n\r\n\t\t\treturn b2Union\r\n\t\t}\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport interface IB2ContactState {\r\n\t\t/**\r\n\t\t * 碰撞状态\r\n\t\t * - begin 已发生碰撞时\r\n\t\t * - on 进行中\r\n\t\t * - end 碰撞结束时\r\n\t\t */\r\n\t\tstate: \"begin\" | \"on\" | \"end\",\r\n\t\tcontact: b2.Contact,\r\n\t}\r\n\r\n\texport interface IBox2DUserData {\r\n\t\t/**\r\n\t\t * 标记\r\n\t\t */\r\n\t\tname: string\r\n\t\t/**\r\n\t\t * 自身唯一id\r\n\t\t */\r\n\t\toid: string\r\n\t\t/**\r\n\t\t * 对应模型节点的 oid\r\n\t\t */\r\n\t\tmid: string\r\n\t\t/**\r\n\t\t * 归属的unionId\r\n\t\t */\r\n\t\tunionId: string\r\n\t\tentityId?: string\r\n\t}\r\n\r\n\texport interface IBox2DFixtureData extends IBox2DUserData {\r\n\t\tdisplayKey?: string\r\n\t\t/**\r\n\t\t * 产生的碰撞信息\r\n\t\t */\r\n\t\tcontacts: IB2ContactState[]\r\n\t\t/**\r\n\t\t * fixture相对body的坐标\r\n\t\t */\r\n\t\ttransform?: Transform\r\n\t}\r\n\r\n\texport interface IBox2DBodyData extends IBox2DUserData {\r\n\t\t/**\r\n\t\t * 产生的碰撞信息\r\n\t\t */\r\n\t\tcontacts: IB2ContactState[]\r\n\t}\r\n\r\n\texport interface IBox2DJointData extends IBox2DUserData {\r\n\r\n\t}\r\n\r\n}\r\n","\r\n\r\nnamespace fsync.box2d.b2data {\r\n\r\n\tconst createContactListener = () => {\r\n\t\tclass ContactListener extends b2.ContactListener {\r\n\r\n\t\t\tmm = {}\r\n\t\t\t/**\r\n\t\t\t* Called when two fixtures begin to touch.\r\n\t\t\t* 当两个fixture碰撞时，触发该函数\r\n\t\t\t* @param contact Contact point.\r\n\t\t\t**/\r\n\t\t\tBeginContact(contact: b2.Contact): void {\r\n\t\t\t\t{\r\n\t\t\t\t\tlet a = contact.GetFixtureA().GetUserData() as IBox2DFixtureData\r\n\t\t\t\t\tlet b = contact.GetFixtureB().GetUserData() as IBox2DFixtureData\r\n\r\n\t\t\t\t\tlet fixtureA = contact.GetFixtureA()\r\n\t\t\t\t\tlet fixtureB = contact.GetFixtureB()\r\n\r\n\t\t\t\t\tthis.mm[fixtureA.GetUserData<any>().oid] = true\r\n\t\t\t\t\tthis.mm[fixtureB.GetUserData<any>().oid] = true\r\n\t\t\t\t\t// console.log(\"Collision-begin\", this.mm)\r\n\r\n\t\t\t\t\ta.contacts = a.contacts.filter(c => c.contact.GetFixtureA() != fixtureB && c.contact.GetFixtureB() != fixtureB)\r\n\t\t\t\t\tb.contacts = b.contacts.filter(c => c.contact.GetFixtureA() != fixtureA && c.contact.GetFixtureB() != fixtureA)\r\n\r\n\t\t\t\t\tlet state: \"begin\" | \"on\" | \"end\" = \"begin\";\r\n\r\n\t\t\t\t\tif (a) {\r\n\t\t\t\t\t\ta.contacts.push({ state, contact });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (b) {\r\n\t\t\t\t\t\tb.contacts.push({ state, contact });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t* Called when two fixtures cease to touch.\r\n\t\t\t* 当两个fixture停止碰撞时，触发该函数\r\n\t\t\t* @param contact Contact point.\r\n\t\t\t**/\r\n\t\t\tEndContact(contact: b2.Contact): void {\r\n\t\t\t\tlet a = contact.GetFixtureA().GetUserData() as IBox2DFixtureData\r\n\t\t\t\tlet b = contact.GetFixtureB().GetUserData() as IBox2DFixtureData\r\n\r\n\t\t\t\tlet fixtureA = contact.GetFixtureA()\r\n\t\t\t\tlet fixtureB = contact.GetFixtureB()\r\n\r\n\t\t\t\tthis.mm[fixtureA.GetUserData<any>().oid] = false\r\n\t\t\t\tthis.mm[fixtureB.GetUserData<any>().oid] = false\r\n\t\t\t\t// console.log(\"Collision-end\", this.mm)\r\n\r\n\r\n\t\t\t\ta.contacts = a.contacts.filter(c => c.contact.GetFixtureA() != fixtureB && c.contact.GetFixtureB() != fixtureB)\r\n\t\t\t\tb.contacts = b.contacts.filter(c => c.contact.GetFixtureA() != fixtureA && c.contact.GetFixtureB() != fixtureA)\r\n\r\n\t\t\t\tlet state: \"begin\" | \"on\" | \"end\" = \"end\";\r\n\r\n\t\t\t\tif (a) {\r\n\t\t\t\t\ta.contacts.push({ state, contact });\r\n\t\t\t\t}\r\n\t\t\t\tif (b) {\r\n\t\t\t\t\tb.contacts.push({ state, contact });\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t* This lets you inspect a contact after the solver is finished. This is useful for inspecting impulses. Note: the contact manifold does not include time of impact impulses, which can be arbitrarily large if the sub-step is small. Hence the impulse is provided explicitly in a separate data structure. Note: this is only called for contacts that are touching, solid, and awake.\r\n\t\t\t* 在碰撞检测之后，但在碰撞求解（物理模拟）之前，此函数的事件会被触发。这样是为了给开发者一个机会，根据当前情况来决定是否使这个接触失效。在回调的函数中使用一个设置函数就可以实现单侧碰撞的功能。每次碰撞处理时，接触会重新生效，开发者不得不在每一个时间步中都设置同一个接触无效。由于连续碰撞检测，PreSolve事件在单个时间步中有可能发生多次\r\n\t\t\t* @param contact Contact point.\r\n\t\t\t* @param impulse Contact impulse.\r\n\t\t\t**/\r\n\t\t\tPreSolve(contact: b2.Contact, oldManifold: b2.Manifold): void {\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t* This is called after a contact is updated. This allows you to inspect a contact before it goes to the solver. If you are careful, you can modify the contact manifold (e.g. disable contact). A copy of the old manifold is provided so that you can detect changes. Note: this is called only for awake bodies. Note: this is called even when the number of contact points is zero. Note: this is not called for sensors. Note: if you set the number of contact points to zero, you will not get an EndContact callback. However, you may get a BeginContact callback the next step.\r\n\t\t\t* 当引擎完成了碰撞求解，也就是物理模拟过程过后，开发者可以得到碰撞冲量（collision impulse）的结果时，函数postSolve就会被调用了。这将是提供给开发者附加碰撞结果的机会。\r\n\t\t\t* 在一个接触回调函数PostSolve中去改变物理世界的模拟数据，是一件神奇的工作。例如，在游戏中可能会以碰撞的方式来消灭敌人。此时开发者就可以在此函数中施加伤害，并试图摧毁关联的角色和它的刚体。然而，引擎并不允许开发者在回调函数中改变物理世界的物体，这样做是为了避免摧毁引擎正在运算的对象，造成访问错误。\r\n\t\t\t* @param contact Contact point.\r\n\t\t\t* @param oldManifold Old manifold.\r\n\t\t\t**/\r\n\t\t\tPostSolve(contact: b2.Contact, impulse: b2.ContactImpulse): void {\r\n\r\n\t\t\t}\r\n\r\n\t\t\tBeginContactFixtureParticle(system: b2.ParticleSystem, contact: b2.ParticleBodyContact): void {\r\n\r\n\t\t\t}\r\n\t\t\tEndContactFixtureParticle(system: b2.ParticleSystem, contact: b2.ParticleBodyContact): void {\r\n\r\n\t\t\t}\r\n\t\t\tBeginContactParticleParticle(system: b2.ParticleSystem, contact: b2.ParticleContact): void {\r\n\r\n\t\t\t}\r\n\t\t\tEndContactParticleParticle(system: b2.ParticleSystem, contact: b2.ParticleContact): void {\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn new ContactListener()\r\n\t}\r\n\r\n\texport class Box2DWorld {\r\n\t\tgravity: Vec2 = new Vec2(0, -10)\r\n\t\tconcatListener: b2.ContactListener\r\n\r\n\t\tloadFromJson(json: Box2DWorld) {\r\n\t\t\tthis.gravity = Vec2.fromNumArray(json.gravity['data'])\r\n\t\t}\r\n\r\n\t\tcreateWorld() {\r\n\t\t\tthis.concatListener = createContactListener()\r\n\r\n\t\t\tlet world: b2.World = new b2.World(new b2.Vec2(this.gravity.x, this.gravity.y), true);\r\n\t\t\tworld.SetContactListener(this.concatListener)\r\n\t\t\treturn world\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","/****************************************************************************\r\n Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.\r\n\r\n https://www.cocos.com/\r\n\r\n Permission is hereby granted, free of charge, to any person obtaining a copy\r\n of this software and associated engine source code (the \"Software\"), a limited,\r\n worldwide, royalty-free, non-assignable, revocable and non-exclusive license\r\n to use Cocos Creator solely to develop games on your target platforms. You shall\r\n not use Cocos Creator software for developing other software or tools that's\r\n used for developing games. You are not granted to publish, distribute,\r\n sublicense, and/or sell copies of Cocos Creator.\r\n\r\n The software or tools in this License Agreement are licensed, not sold.\r\n Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.\r\n\r\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n THE SOFTWARE.\r\n ****************************************************************************/\r\n\r\n// http://answers.unity3d.com/questions/977416/2d-polygon-convex-decomposition-code.html\r\n\r\n/// <summary>\r\n/// This class is took from the \"FarseerUnity\" physics engine, which uses Mark Bayazit's decomposition algorithm.\r\n/// I also have to make it work with self-intersecting polygons, so I'll use another different algorithm to decompose a self-intersecting polygon into several simple polygons,\r\n/// and then I would decompose each of them into convex polygons.\r\n/// </summary>\r\n\r\n//From phed rev 36\r\n\r\n/// <summary>\r\n/// Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)\r\n/// For more information about this algorithm, see http://mnbayazit.com/406/bayazit\r\n/// </summary>\r\n\r\nnamespace fsync.box2d.b2data.tools {\r\n    export function At(i, vertices) {\r\n        var s = vertices.length;\r\n        return vertices[i < 0 ? s - (-i % s) : i % s];\r\n    }\r\n\r\n    export function Copy(i, j, vertices) {\r\n        var p = [];\r\n        while (j < i) j += vertices.length;\r\n        //p.reserve(j - i + 1);\r\n        for (; i <= j; ++i) {\r\n            p.push(At(i, vertices));\r\n        }\r\n        return p;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Decompose the polygon into several smaller non-concave polygon.\r\n    /// If the polygon is already convex, it will return the original polygon, unless it is over Settings.MaxPolygonVertices.\r\n    /// Precondition: Counter Clockwise polygon\r\n    /// </summary>\r\n    /// <param name=\"vertices\"></param>\r\n    /// <returns></returns>\r\n    export function ConvexPartition(vertices) {\r\n        //We force it to CCW as it is a precondition in this algorithm.\r\n        ForceCounterClockWise(vertices);\r\n\r\n        var list = [];\r\n        var d, lowerDist, upperDist;\r\n        var p;\r\n        var lowerInt = { x: 0, y: 0 }\r\n        var upperInt = { x: 0, y: 0 }\r\n        var lowerIndex = 0, upperIndex = 0;\r\n        var lowerPoly, upperPoly;\r\n\r\n        for (var i = 0; i < vertices.length; ++i) {\r\n            if (Reflex(i, vertices)) {\r\n                lowerDist = upperDist = 10e7; // std::numeric_limits<qreal>::max();\r\n                for (var j = 0; j < vertices.length; ++j) {\r\n                    // if line intersects with an edge\r\n                    if (Left(At(i - 1, vertices), At(i, vertices), At(j, vertices)) &&\r\n                        RightOn(At(i - 1, vertices), At(i, vertices), At(j - 1, vertices))) {\r\n                        // find the povar of intersection\r\n                        p = LineIntersect(At(i - 1, vertices), At(i, vertices), At(j, vertices),\r\n                            At(j - 1, vertices));\r\n                        if (Right(At(i + 1, vertices), At(i, vertices), p)) {\r\n                            // make sure it's inside the poly\r\n                            d = SquareDist(At(i, vertices), p);\r\n                            if (d < lowerDist) {\r\n                                // keep only the closest intersection\r\n                                lowerDist = d;\r\n                                lowerInt = p;\r\n                                lowerIndex = j;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (Left(At(i + 1, vertices), At(i, vertices), At(j + 1, vertices)) &&\r\n                        RightOn(At(i + 1, vertices), At(i, vertices), At(j, vertices))) {\r\n                        p = LineIntersect(At(i + 1, vertices), At(i, vertices), At(j, vertices),\r\n                            At(j + 1, vertices));\r\n                        if (Left(At(i - 1, vertices), At(i, vertices), p)) {\r\n                            d = SquareDist(At(i, vertices), p);\r\n                            if (d < upperDist) {\r\n                                upperDist = d;\r\n                                upperIndex = j;\r\n                                upperInt = p;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // if there are no vertices to connect to, choose a povar in the middle\r\n                if (lowerIndex == (upperIndex + 1) % vertices.length) {\r\n                    // var sp = lowerInt.add(upperInt).div(2);\r\n                    var sp = {\r\n                        x: (lowerInt.x + upperInt.x) / 2,\r\n                        y: (lowerInt.y + upperInt.y) / 2,\r\n                    }\r\n\r\n                    lowerPoly = Copy(i, upperIndex, vertices);\r\n                    lowerPoly.push(sp);\r\n                    upperPoly = Copy(lowerIndex, i, vertices);\r\n                    upperPoly.push(sp);\r\n                }\r\n                else {\r\n                    var highestScore = 0, bestIndex = lowerIndex;\r\n\r\n                    while (upperIndex < lowerIndex) {\r\n                        upperIndex += vertices.length;\r\n                    }\r\n\r\n                    for (var j = lowerIndex; j <= upperIndex; ++j) {\r\n                        if (CanSee(i, j, vertices)) {\r\n                            var score = 1 / (SquareDist(At(i, vertices), At(j, vertices)) + 1);\r\n                            if (Reflex(j, vertices)) {\r\n                                if (RightOn(At(j - 1, vertices), At(j, vertices), At(i, vertices)) &&\r\n                                    LeftOn(At(j + 1, vertices), At(j, vertices), At(i, vertices))) {\r\n                                    score += 3;\r\n                                }\r\n                                else {\r\n                                    score += 2;\r\n                                }\r\n                            }\r\n                            else {\r\n                                score += 1;\r\n                            }\r\n\r\n                            if (score > highestScore) {\r\n                                bestIndex = j;\r\n                                highestScore = score;\r\n                            }\r\n                        }\r\n                    }\r\n                    lowerPoly = Copy(i, bestIndex, vertices);\r\n                    upperPoly = Copy(bestIndex, i, vertices);\r\n                }\r\n                list = list.concat(ConvexPartition(lowerPoly));\r\n                list = list.concat(ConvexPartition(upperPoly));\r\n                return list;\r\n            }\r\n        }\r\n\r\n        // polygon is already convex\r\n        list.push(vertices);\r\n\r\n        //Remove empty vertice collections\r\n        for (var i = list.length - 1; i >= 0; i--) {\r\n            if (list[i].length == 0)\r\n                list.splice(i, 0);\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    export function CanSee(i, j, vertices) {\r\n        if (Reflex(i, vertices)) {\r\n            if (LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices)) &&\r\n                RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices))) return false;\r\n        }\r\n        else {\r\n            if (RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices)) ||\r\n                LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices))) return false;\r\n        }\r\n        if (Reflex(j, vertices)) {\r\n            if (LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices)) &&\r\n                RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices))) return false;\r\n        }\r\n        else {\r\n            if (RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices)) ||\r\n                LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices))) return false;\r\n        }\r\n\r\n        for (var k = 0; k < vertices.length; ++k) {\r\n            if ((k + 1) % vertices.length == i || k == i || (k + 1) % vertices.length == j || k == j) {\r\n                continue; // ignore incident edges\r\n            }\r\n            var intersectionPoint = { x: 0, y: 0 }\r\n            if (LineIntersect2(At(i, vertices), At(j, vertices), At(k, vertices), At(k + 1, vertices), intersectionPoint)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // precondition: ccw\r\n    export function Reflex(i, vertices) {\r\n        return Right(i, vertices);\r\n    }\r\n\r\n    export function Right(a, b, c?) {\r\n        if (typeof c === 'undefined') {\r\n            var i = a, vertices = b;\r\n\r\n            a = At(i - 1, vertices);\r\n            b = At(i, vertices);\r\n            c = At(i + 1, vertices);\r\n        }\r\n\r\n        return Area(a, b, c) < 0;\r\n    }\r\n\r\n    export function Left(a, b, c) {\r\n        return Area(a, b, c) > 0;\r\n    }\r\n\r\n    export function LeftOn(a, b, c) {\r\n        return Area(a, b, c) >= 0;\r\n    }\r\n\r\n\r\n    export function RightOn(a, b, c) {\r\n        return Area(a, b, c) <= 0;\r\n    }\r\n\r\n    export function SquareDist(a, b) {\r\n        var dx = b.x - a.x;\r\n        var dy = b.y - a.y;\r\n        return dx * dx + dy * dy;\r\n    }\r\n\r\n    //forces counter clock wise order.\r\n    export function ForceCounterClockWise(vertices) {\r\n        if (!IsCounterClockWise(vertices)) {\r\n            vertices.reverse();\r\n        }\r\n    }\r\n\r\n    export function IsCounterClockWise(vertices) {\r\n        //We just return true for lines\r\n        if (vertices.length < 3)\r\n            return true;\r\n\r\n        return (GetSignedArea(vertices) > 0);\r\n    }\r\n\r\n    //gets the signed area.\r\n    export function GetSignedArea(vertices) {\r\n        var i;\r\n        var area = 0;\r\n\r\n        for (i = 0; i < vertices.length; i++) {\r\n            var j = (i + 1) % vertices.length;\r\n            area += vertices[i].x * vertices[j].y;\r\n            area -= vertices[i].y * vertices[j].x;\r\n        }\r\n        area /= 2;\r\n        return area;\r\n    }\r\n\r\n    //From Mark Bayazit's convex decomposition algorithm\r\n    export function LineIntersect(p1, p2, q1, q2) {\r\n        var i = { x: 0, y: 0 }\r\n        var a1 = p2.y - p1.y;\r\n        var b1 = p1.x - p2.x;\r\n        var c1 = a1 * p1.x + b1 * p1.y;\r\n        var a2 = q2.y - q1.y;\r\n        var b2 = q1.x - q2.x;\r\n        var c2 = a2 * q1.x + b2 * q1.y;\r\n        var det = a1 * b2 - a2 * b1;\r\n\r\n        if (!FloatEquals(det, 0)) {\r\n            // lines are not parallel\r\n            i.x = (b2 * c1 - b1 * c2) / det;\r\n            i.y = (a1 * c2 - a2 * c1) / det;\r\n        }\r\n        return i;\r\n    }\r\n\r\n    //from Eric Jordan's convex decomposition library, it checks if the lines a0->a1 and b0->b1 cross.\r\n    //if they do, intersectionPovar will be filled with the povar of crossing. Grazing lines should not return true.\r\n    export function LineIntersect2(a0, a1, b0, b1, intersectionPoint) {\r\n        if (a0 == b0 || a0 == b1 || a1 == b0 || a1 == b1)\r\n            return false;\r\n\r\n        var x1 = a0.x;\r\n        var y1 = a0.y;\r\n        var x2 = a1.x;\r\n        var y2 = a1.y;\r\n        var x3 = b0.x;\r\n        var y3 = b0.y;\r\n        var x4 = b1.x;\r\n        var y4 = b1.y;\r\n\r\n        //AABB early exit\r\n        if (Math.max(x1, x2) < Math.min(x3, x4) || Math.max(x3, x4) < Math.min(x1, x2))\r\n            return false;\r\n\r\n        if (Math.max(y1, y2) < Math.min(y3, y4) || Math.max(y3, y4) < Math.min(y1, y2))\r\n            return false;\r\n\r\n        var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3));\r\n        var ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3));\r\n        var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n        if (Math.abs(denom) < 10e-7) {\r\n            //Lines are too close to parallel to call\r\n            return false;\r\n        }\r\n        ua /= denom;\r\n        ub /= denom;\r\n\r\n        if ((0 < ua) && (ua < 1) && (0 < ub) && (ub < 1)) {\r\n            intersectionPoint.x = (x1 + ua * (x2 - x1));\r\n            intersectionPoint.y = (y1 + ua * (y2 - y1));\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function FloatEquals(value1, value2) {\r\n        return Math.abs(value1 - value2) <= 10e-7;\r\n    }\r\n\r\n\r\n    //returns a positive number if c is to the left of the line going from a to b. Positive number if povar is left, negative if povar is right, and 0 if points are collinear.</returns>\r\n    export function Area(a, b, c) {\r\n        return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);\r\n    }\r\n\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\t/** !#en Defines a Circle Collider .\r\n\t!#zh 用来定义圆形碰撞体 */\r\n\texport interface Circle {\r\n\t\t/** !#en Position offset\r\n\t\t!#zh 位置偏移量 */\r\n\t\toffset: Vec2;\r\n\t\t/** !#en Circle radius\r\n\t\t!#zh 圆形半径 */\r\n\t\tradius: number;\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport class CollisionGroup {\r\n\t\tenabled: boolean = false\r\n\t\tgroupIndex: string = \"\"\r\n\t\tcategoryBits: string = \"\"\r\n\t\tmaskBits: string = \"\"\r\n\r\n\t\tteam: number = 0\r\n\t\ttotalTeams: number[] = []\r\n\r\n\t\t/**\r\n\t\t * 启用自动双向碰撞\r\n\t\t */\r\n\t\tenableDuplex: bool = true\r\n\t\t/**\r\n\t\t * 检查单双向碰撞 maskbits 差异\r\n\t\t */\r\n\t\tcheckDuplexDifference: bool = false\r\n\r\n\t\tsetTeamInfo(team: number, totalTeams: number[]) {\r\n\t\t\tthis.team = team\r\n\t\t\tthis.totalTeams = totalTeams\r\n\t\t}\r\n\r\n\t\tloadFromJson(json: CollisionGroup) {\r\n\t\t\tthis.enabled = json.enabled\r\n\t\t\tthis.groupIndex = json.groupIndex\r\n\t\t\tthis.categoryBits = json.categoryBits\r\n\t\t\tthis.maskBits = json.maskBits\r\n\t\t}\r\n\r\n\t\tstatic groupIndexMap: { [key: string]: number } = {}\r\n\t\tstatic groupIndexAcc: number = 1\r\n\r\n\t\tstatic categoryMap: { [key: string]: number } = {}\r\n\t\tstatic categoryExpAcc: number = 1\r\n\t\tstatic categoryExpMax = 16\r\n\r\n\t\tstatic maskBitsMap: { [key: string]: number } = {}\r\n\r\n\t\tupdateCollisionGroup() {\r\n\t\t\tlet groupIndex = CollisionGroup.groupIndexMap[this.groupIndex]\r\n\t\t\tif (groupIndex == null) {\r\n\t\t\t\tif (!!this.groupIndex) {\r\n\t\t\t\t\tgroupIndex = CollisionGroup.groupIndexMap[this.groupIndex] = CollisionGroup.groupIndexAcc++\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateCategorys(this.categoryBits)\r\n\t\t\tthis.updateCategorys(this.maskBits)\r\n\r\n\t\t\tthis.updateMaskBitsMap(this.maskBits)\r\n\t\t}\r\n\r\n\t\tprotected updateMaskBitsMap(maskBits: string) {\r\n\t\t\tlet key = `${this.getCategoryBits()}`\r\n\t\t\tlet maskBitsNum = CollisionGroup.maskBitsMap[key]\r\n\t\t\tif (maskBitsNum == undefined) {\r\n\t\t\t\tmaskBitsNum = 0\r\n\t\t\t}\r\n\r\n\t\t\tlet categorys = maskBits.split(\";\")\r\n\t\t\tcategorys.forEach((category) => {\r\n\t\t\t\tthis.expandCategoryTeams(category, (category) => {\r\n\t\t\t\t\tlet categoryExpNum = CollisionGroup.categoryMap[category]\r\n\t\t\t\t\tlet categoryNum = 2 ** categoryExpNum\r\n\t\t\t\t\tmaskBitsNum = maskBitsNum | categoryNum\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tCollisionGroup.maskBitsMap[key] = maskBitsNum\r\n\t\t}\r\n\r\n\t\tprotected updateCategorys(categoryBits: string) {\r\n\t\t\tlet categorys = categoryBits.split(\";\")\r\n\t\t\tcategorys.forEach((category) => {\r\n\t\t\t\tthis.expandCategoryTeams(category, (category) => {\r\n\t\t\t\t\tlet categoryExpNum = CollisionGroup.categoryMap[category]\r\n\t\t\t\t\tif (categoryExpNum == null) {\r\n\t\t\t\t\t\tif (!!category) {\r\n\t\t\t\t\t\t\tlet n = CollisionGroup.categoryExpAcc++\r\n\t\t\t\t\t\t\tcategoryExpNum = CollisionGroup.categoryMap[category] = n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tprotected expandCategoryTeams(category: string, call: (c: string) => void) {\r\n\t\t\tif (category.startsWith(\"$\")) {\r\n\t\t\t\t// \t$开头，则替换为组序号\r\n\t\t\t\tlet teamCategory = category.replace(\"$\", `T${this.team}_`)\r\n\t\t\t\tcall(teamCategory)\r\n\t\t\t} else if (category.startsWith(\"~\")) {\r\n\t\t\t\t// \t~开头，则替换为其他组序号\r\n\t\t\t\tthis.totalTeams.forEach((team) => {\r\n\t\t\t\t\tif (team != this.team) {\r\n\t\t\t\t\t\tlet deCategory = category.replace(\"~\", `T${team}_`)\r\n\t\t\t\t\t\tcall(deCategory)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t} else if (category.startsWith(\"#\")) {\r\n\t\t\t\t// \t#开头，则替换为所有组序号\r\n\t\t\t\tthis.totalTeams.forEach((team) => {\r\n\t\t\t\t\tlet deCategory = category.replace(\"#\", `T${team}_`)\r\n\t\t\t\t\tcall(deCategory)\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tcall(category)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprotected mapCategorys(categoryBits: string) {\r\n\t\t\tlet categorys = categoryBits.split(\";\")\r\n\t\t\tlet categorysNum = 0\r\n\t\t\tcategorys.forEach((category) => {\r\n\t\t\t\tthis.expandCategoryTeams(category, (category) => {\r\n\t\t\t\t\tlet categoryExpNum = CollisionGroup.categoryMap[category]\r\n\t\t\t\t\tcategorysNum = categorysNum | 2 ** categoryExpNum\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\treturn categorysNum\r\n\t\t}\r\n\r\n\t\tgetGroupIndex() {\r\n\t\t\tif (!!this.groupIndex) {\r\n\t\t\t\treturn CollisionGroup.groupIndexMap[this.groupIndex]\r\n\t\t\t}\r\n\t\t\treturn 0\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* 表示刚体的分组信息，但不决定要碰撞的分组对象。另外，值得注意的，这个值必须是2的N次方。当然设置成其他值，程序不会报错，但是实际的碰撞分类效果，可能会出现意想不到的差错。\r\n\t\t*/\r\n\t\tgetCategoryBits(): number {\r\n\t\t\treturn this.mapCategorys(this.categoryBits)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t* 表示刚体要碰撞的那个刚体分组对象。这个值通常是另外一个FilterData对象的categoryBits属性，表示只与该类刚体发生碰撞。如果要对多组刚体进行碰撞，可以设置maskBits为多个categoryBits的加合。如要和categoryBits分别为2和4的刚体组都进行碰撞，可以设置maskBits属性为6。\r\n\t\t*/\r\n\t\tgetMaskBits(): number {\r\n\t\t\tif (this.enableDuplex) {\r\n\t\t\t\tlet key = `${this.getCategoryBits()}`\r\n\t\t\t\tlet bits = CollisionGroup.maskBitsMap[key]\r\n\r\n\t\t\t\tif (this.checkDuplexDifference) {\r\n\t\t\t\t\tlet bits1 = this.mapCategorys(this.maskBits)\r\n\t\t\t\t\tif (bits1 != bits) {\r\n\t\t\t\t\t\tconsole.warn(\"unmatched mask bits\", this)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn bits\r\n\t\t\t} else {\r\n\t\t\t\tlet bits1 = this.mapCategorys(this.maskBits)\r\n\t\t\t\treturn bits1\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport interface FixedContact {\r\n\t\t/**\r\n\t\t * 区域ID (rigidbody id)\r\n\t\t */\r\n\t\tconnectZoneId: string\r\n\t\t/**\r\n\t\t * 部件ID (rigidbody id)\r\n\t\t */\r\n\t\tgroupId: string\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport interface ISkillExtra {\r\n\t\toid: string\r\n\t\tnoid: string\r\n\t\tskillType: string\r\n\t\tskillName?: string;\r\n\t}\r\n\r\n\texport class SkillExtra implements ISkillExtra {\r\n\t\toid: string;\r\n\t\tnoid: string;\r\n\t\tskillType: string;\r\n\t\tskillName?: string;\r\n\t}\r\n}\r\n","namespace fsync.box2d.b2data {\r\n\r\n\t/** !#en\r\n\t\tBase class for joints to connect rigidbody.\r\n\t\t!#zh\r\n\t\t关节类的基类 */\r\n\texport class Joint extends Component {\r\n\t\t/** !#en\r\n\t\tThe anchor of the rigidbody.\r\n\t\t!#zh\r\n\t\t刚体的锚点。 */\r\n\t\tanchor: Vec2;\r\n\t\t/** !#en\r\n\t\tThe anchor of the connected rigidbody.\r\n\t\t!#zh\r\n\t\t关节另一端刚体的锚点。 */\r\n\t\tconnectedAnchor: Vec2;\r\n\t\t/** !#en\r\n\t\tThe rigidbody to which the other end of the joint is attached.\r\n\t\t!#zh\r\n\t\t关节另一端链接的刚体 */\r\n\t\tconnectedBody: RigidBody;\r\n\t\t/** !#en\r\n\t\tShould the two rigid bodies connected with this joint collide with each other?\r\n\t\t!#zh\r\n\t\t链接到关节上的两个刚体是否应该相互碰撞？ */\r\n\t\tcollideConnected: boolean;\r\n\r\n\t\tloadFromJson(json: Joint) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\r\n\t\t\tthis.anchor = Vec2.fromNumArray(json.anchor['data'])\r\n\t\t\tthis.connectedAnchor = Vec2.fromNumArray(json.connectedAnchor['data'])\r\n\t\t\tthis.connectedBody = new RigidBody()\r\n\t\t\tthis.connectedBody.loadFromJson(json.connectedBody)\r\n\t\t\tthis.collideConnected = json.collideConnected\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\t\t\tlet rptm = 1 / this.getPTMRatio()\r\n\t\t\tVector.multUpVar(this.anchor, rptm)\r\n\t\t\tVector.multUpVar(this.connectedAnchor, rptm)\r\n\t\t}\r\n\r\n\t\tcreateJointDef(mainBodyModelA: Box2DBody, bodyModelA: Box2DBody, mainBodyModelB: Box2DBody, bodyModelB: Box2DBody): b2.JointDef {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\tcreateJoint(world: b2.World, jointDef: b2.JointDef, unionId: string) {\r\n\t\t\tlet b2Joint = world.CreateJoint(jointDef)\r\n\t\t\tlet userData: IBox2DJointData = {\r\n\t\t\t\tname: this.parent.name,\r\n\t\t\t\tmid: this.oid,\r\n\t\t\t\toid: \"unknown\",\r\n\t\t\t\tunionId,\r\n\t\t\t}\r\n\t\t\tb2Joint.SetUserData(userData)\r\n\t\t\treturn b2Joint\r\n\t\t}\r\n\t}\r\n}\r\n","\n\nnamespace fsync.box2d.b2data {\n\n\tlet objIdMap: { [key: string]: string } = {}\n\tlet oidAcc = 1\n\tconst genOid = () => {\n\t\treturn oidAcc++\n\t}\n\n\texport function toExpression(varname: string | number | boolean) {\n\t\tif (typeof (varname) == \"string\") {\n\t\t\treturn `\"${varname}\"`\n\t\t} else {\n\t\t\treturn varname\n\t\t}\n\t}\n\n\texport function exportValueToTypescript(sentences: string[], depth: number, parentName: string, varname: string | number, node: string | number | boolean) {\n\t\tlet tab = '\\t'.repeat(depth)\n\t\tsentences.push(`${tab}${parentName}[${toExpression(varname)}] = ${toExpression(node)};`)\n\t}\n\n\texport function exportArrayToTypescript(sentences: string[], depth: number, parentName: string, varname: string | number, node: Object) {\n\t\tlet typeName = node.constructor.name\n\t\tlet varLocalKey = `var_${varname}`\n\t\tlet tab = '\\t'.repeat(depth)\n\t\tsentences.push(`${tab}const ${varLocalKey}: any[] = [];\\n`)\n\t\tsentences.push(`${tab}${parentName}[${toExpression(varname)}] = ${varLocalKey};`)\n\t\tsentences.push(`${tab}{\\n`)\n\n\t\tfor (let key of Object.getOwnPropertyNames(node)) {\n\t\t\tlet value = node[key]\n\t\t\tif (typeof (value) == \"object\") {\n\t\t\t\tif (value instanceof Array) {\n\t\t\t\t\texportObjectToTypescript(sentences, depth + 1, `${varLocalKey}`, key, value)\n\t\t\t\t} else {\n\t\t\t\t\texportObjectToTypescript(sentences, depth + 1, `${varLocalKey}`, key, value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texportValueToTypescript(sentences, depth + 1, `${varLocalKey}`, key, value)\n\t\t\t}\n\t\t}\n\n\t\tsentences.push(`${tab}}\\n`)\n\t}\n\n\texport function exportObjectToTypescript(sentences: string[], depth: number, parentName: string, varname: string | number, node: Object) {\n\t\tlet typeName = node.constructor.name\n\t\tif (b2data[typeName]) {\n\t\t\ttypeName = `b2data.${typeName}`\n\t\t} else if (fsync[typeName]) {\n\t\t\ttypeName = `fsync.${typeName}`\n\t\t}\n\t\tlet tab = '\\t'.repeat(depth)\n\n\t\tlet varLocalKey = `var_${varname}`\n\n\t\tlet oid = node[\"oid\"]\n\n\t\tif (oid && objIdMap[oid]) {\n\t\t\tlet gName = objIdMap[oid]\n\t\t\tsentences.push(`${tab}${parentName}[${toExpression(varname)}] = ${gName};`)\n\t\t} else {\n\t\t\tsentences.push(`${tab}const ${varLocalKey}: ${typeName} = new ${typeName}();`)\n\n\t\t\tif (oid) {\n\t\t\t\tlet gid = genOid()\n\t\t\t\tlet gName = `gvar_${gid}`\n\t\t\t\tobjIdMap[oid] = gName\n\t\t\t\tsentences.push(`${tab}var ${gName} = ${varLocalKey};`)\n\t\t\t}\n\n\t\t\tsentences.push(`${tab}${parentName}[${toExpression(varname)}] = ${varLocalKey};`)\n\t\t\tsentences.push(`${tab}{\\n`)\n\n\t\t\tfor (let key of Object.getOwnPropertyNames(node)) {\n\t\t\t\tlet value = node[key]\n\t\t\t\tif (typeof (value) == \"object\") {\n\t\t\t\t\tif (value instanceof Array) {\n\t\t\t\t\t\texportArrayToTypescript(sentences, depth + 1, `${varLocalKey}`, key, value)\n\t\t\t\t\t} else {\n\t\t\t\t\t\texportObjectToTypescript(sentences, depth + 1, `${varLocalKey}`, key, value)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\texportValueToTypescript(sentences, depth + 1, `${varLocalKey}`, key, value)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsentences.push(`${tab}}\\n`)\n\t\t}\n\n\t}\n\n\texport function exportB2NodeToTypescript(b2Node: Box2DNode) {\n\n\t\toidAcc = 1\n\t\tobjIdMap = {}\n\n\t\tlet sentences: string[] = []\n\t\tsentences.push(`namespace b2stuffs {`)\n\t\tsentences.push(`\\texport const get${b2Node.name}Data = () => {`)\n\t\tsentences.push(`\\t\\tconst b2Root = {};`)\n\t\tb2data.exportObjectToTypescript(sentences, 2, \"b2Root\", \"b2Var\", b2Node)\n\t\tsentences.push(`\\t\\tconst result${b2Node.name} = b2Root[\"b2Var\"];`)\n\t\tsentences.push(`\\t\\treturn result${b2Node.name};`)\n\t\tsentences.push(`\\t}`)\n\t\tsentences.push(`}`)\n\t\treturn sentences\n\t}\n\n}\n","\r\nnamespace fsync.box2d.b2data {\r\n\texport class OutsideFixedContact {\r\n\t\tfixedContacts: FixedContact[] = []\r\n\t\tbodies: b2.Body[] = []\r\n\t\tbodyModels: Box2DBody[] = []\r\n\t}\r\n}\r\n","namespace fsync.box2d.b2data {\r\n\texport const ANGLE_TO_PHYSICS_ANGLE = -Math.PI / 180;//在cocos中角度是反的，因此要加入-来转换\r\n\texport const PHYSICS_ANGLE_TO_ANGLE = -180 / Math.PI;\r\n\r\n\t/** !#en Collider component base class.\r\n\t\t!#zh 碰撞组件基类 */\r\n\texport class Collider extends Component {\r\n\t\t/** !#en Tag. If a node has several collider components, you can judge which type of collider is collided according to the tag.\r\n\t\t!#zh 标签。当一个节点上有多个碰撞组件时，在发生碰撞后，可以使用此标签来判断是节点上的哪个碰撞组件被碰撞了。 */\r\n\t\ttag: number;\r\n\r\n\t\tloadFromJson(json: Collider) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.tag = json.tag\r\n\t\t}\r\n\t}\r\n\r\n\t/** !#en Defines a Polygon Collider .\r\n\t\t!#zh 用来定义多边形碰撞体 */\r\n\texport interface Polygon {\r\n\t\t/** !#en Position offset\r\n\t\t!#zh 位置偏移量 */\r\n\t\toffset: Vec2;\r\n\t\t/** !#en Polygon points\r\n\t\t!#zh 多边形顶点数组 */\r\n\t\tpoints: Vec2[];\r\n\t}\r\n\r\n\t/** undefined */\r\n\texport class PhysicsCollider extends Collider {\r\n\t\t/** !#en\r\n\t\tThe density.\r\n\t\t!#zh\r\n\t\t密度 */\r\n\t\tdensity: number;\r\n\t\t/** !#en\r\n\t\tA sensor collider collects contact information but never generates a collision response\r\n\t\t!#zh\r\n\t\t一个传感器类型的碰撞体会产生碰撞回调，但是不会发生物理碰撞效果。 */\r\n\t\tsensor: boolean;\r\n\t\t/** !#en\r\n\t\tThe friction coefficient, usually in the range [0,1].\r\n\t\t!#zh\r\n\t\t摩擦系数，取值一般在 [0, 1] 之间 */\r\n\t\tfriction: number;\r\n\t\t/** !#en\r\n\t\tThe restitution (elasticity) usually in the range [0,1].\r\n\t\t!#zh\r\n\t\t弹性系数，取值一般在 [0, 1]之间 */\r\n\t\trestitution: number;\r\n\t\t/** !#en\r\n\t\tPhysics collider will find the rigidbody component on the node and set to this property.\r\n\t\t!#zh\r\n\t\t碰撞体会在初始化时查找节点上是否存在刚体，如果查找成功则赋值到这个属性上。 */\r\n\t\tbody: RigidBody;\r\n\r\n\t\t/**\r\n\t\t * 仅展示画面用\r\n\t\t */\r\n\t\tdisplayKey?: string\r\n\r\n\t\tloadFromJson(json: PhysicsCollider) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.density = json.density\r\n\t\t\tthis.sensor = json.sensor\r\n\t\t\tthis.friction = json.friction\r\n\t\t\tthis.restitution = json.restitution\r\n\t\t\tif (json.body) {\r\n\t\t\t\tthis.body = new RigidBody()\r\n\t\t\t\tthis.body.loadFromJson(json.body)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcreateShape(mainBody: Box2DBody): b2.Shape {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\tcreateShapes(mainBody: Box2DBody): b2.Shape[] {\r\n\t\t\treturn [this.createShape(mainBody)]\r\n\t\t}\r\n\r\n\t\tcreateFixtureDef(): b2.FixtureDef {\r\n\t\t\tvar def = new b2.FixtureDef()\r\n\r\n\t\t\tdef.density = this.density\r\n\t\t\tdef.friction = this.friction\r\n\t\t\tdef.isSensor = this.sensor\r\n\t\t\tdef.restitution = this.restitution\r\n\r\n\t\t\t// def.filter.categoryBits = categoryBits ?? this.categoryBits\r\n\t\t\t// def.filter.maskBits = maskBits ?? this.maskBits\r\n\t\t\t// def.filter.groupIndex = groupIndex ?? this.groupIndex\r\n\r\n\t\t\tconst collisionGroup = this.parent.collisionGroup\r\n\t\t\tif (collisionGroup.enabled) {\r\n\t\t\t\tdef.filter.categoryBits = this.parent.collisionGroup.getCategoryBits()\r\n\t\t\t\tdef.filter.maskBits = this.parent.collisionGroup.getMaskBits()\r\n\t\t\t\tdef.filter.groupIndex = this.parent.collisionGroup.getGroupIndex()\r\n\t\t\t}\r\n\r\n\t\t\treturn def\r\n\r\n\t\t}\r\n\r\n\t\tcreateFixture(zoneBody: b2.Body, fixtureDef: b2.FixtureDef, unionId: string) {\r\n\t\t\tlet fixture = zoneBody.CreateFixture(fixtureDef)\r\n\r\n\t\t\tlet userData: IBox2DFixtureData = {\r\n\t\t\t\tname: this.parent.name,\r\n\t\t\t\tmid: this.oid,\r\n\t\t\t\toid: \"unknown\",\r\n\t\t\t\tcontacts: [],\r\n\t\t\t\tunionId,\r\n\t\t\t\tdisplayKey: this.displayKey,\r\n\t\t\t}\r\n\t\t\tfixture.SetUserData(userData)\r\n\t\t\treturn fixture\r\n\t\t}\r\n\r\n\t\tcalcShaptPtInMainBody(mainBody: Box2DBody, shapePt: Vector2) {\r\n\t\t\treturn this.parent.calcShapePtInMainBody(mainBody, shapePt)\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\r\n\t/** undefined */\r\n\texport class PhysicsBoxCollider extends PhysicsCollider implements Box {\r\n\t\t/** !#en Position offset\r\n\t\t!#zh 位置偏移量 */\r\n\t\toffset: Vec2;\r\n\t\t/** !#en Box size\r\n\t\t!#zh 包围盒大小 */\r\n\t\tsize: Size;\r\n\r\n\t\tloadFromJson(json: PhysicsBoxCollider) {\r\n\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.offset = Vec2.fromNumArray(json.offset['data'])\r\n\t\t\tthis.size = Size2.fromNumArray(json.size['data'])\r\n\t\t}\r\n\t\tupdatePTMRatio() {\r\n\t\t\tlet rptm = 1 / this.getPTMRatio()\r\n\r\n\t\t\tVector.multUpVar(this.offset, rptm)\r\n\t\t\tVector.multUpVar(this.size, rptm)\r\n\t\t}\r\n\r\n\t\tcreateShape(mainBody: Box2DBody): b2.PolygonShape {\r\n\r\n\t\t\tlet centerPt = this.calcShaptPtInMainBody(mainBody, this.offset)\r\n\r\n\t\t\tlet angle = this.getInUnionRotationZ()\r\n\r\n\t\t\tlet polygon = new b2.PolygonShape();\r\n\t\t\tpolygon.SetAsBox(this.size.width / 2,\r\n\t\t\t\tthis.size.height / 2,\r\n\t\t\t\tnew b2.Vec2(centerPt.x,\r\n\t\t\t\t\tcenterPt.y),\r\n\t\t\t\tangle);\r\n\r\n\t\t\treturn polygon\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\r\n\t/** undefined */\r\n\texport class PhysicsCircleCollider extends PhysicsCollider implements Circle {\r\n\t\t/** !#en Position offset\r\n\t\t!#zh 位置偏移量 */\r\n\t\toffset: Vec2;\r\n\t\t/** !#en Circle radius\r\n\t\t!#zh 圆形半径 */\r\n\t\tradius: number;\r\n\r\n\t\tloadFromJson(json: PhysicsCircleCollider) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.offset = Vec2.fromNumArray(json.offset['data'])\r\n\t\t\tthis.radius = json.radius\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\t\t\tlet rptm = 1 / this.getPTMRatio()\r\n\t\t\tVector.multUpVar(this.offset, rptm)\r\n\t\t\tthis.radius = this.radius * rptm\r\n\t\t}\r\n\r\n\t\tcreateShape(mainBody: Box2DBody): b2.CircleShape {\r\n\r\n\t\t\tlet shapePtInMainBody = this.calcShaptPtInMainBody(mainBody, this.offset)\r\n\r\n\t\t\tlet cir = new b2.CircleShape()\r\n\t\t\t// cir.m_p.Set(shapePtInMainBody.x, shapePtInMainBody.y)\r\n\t\t\tcir.Set(new b2.Vec2(shapePtInMainBody.x, shapePtInMainBody.y), this.radius)\r\n\r\n\t\t\treturn cir\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\r\n\t/** undefined */\r\n\texport class PhysicsPolygonCollider extends PhysicsCollider implements Polygon {\r\n\t\t/** !#en Position offset\r\n\t\t!#zh 位置偏移量 */\r\n\t\toffset: Vec2;\r\n\t\t/** !#en Polygon points\r\n\t\t!#zh 多边形顶点数组 */\r\n\t\tpoints: Vec2[];\r\n\r\n\t\tloadFromJson(json: PhysicsPolygonCollider) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.offset = Vec2.fromNumArray(json.offset['data'])\r\n\t\t\tthis.points = json.points.map(vec => Vec2.fromNumArray(vec['data']))\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\t\t\tlet rptm = 1 / this.getPTMRatio()\r\n\r\n\t\t\tVector.multUpVar(this.offset, rptm)\r\n\t\t\tthis.points.map(pt => Vector.multUpVar(pt, rptm))\r\n\t\t}\r\n\r\n\t\tcreateShapes(mainBody: Box2DBody): b2.PolygonShape[] {\r\n\r\n\t\t\tvar shapes: b2.PolygonShape[] = [];\r\n\r\n\t\t\tvar points = this.points;\r\n\r\n\t\t\t// check if last point equal to first point\r\n\t\t\tif (points.length > 0 && Vector.equal(points[0], points[points.length - 1])) {\r\n\t\t\t\tpoints.length -= 1;\r\n\t\t\t}\r\n\r\n\t\t\tvar polys = tools.ConvexPartition(points);\r\n\r\n\t\t\tconst offset = this.offset\r\n\r\n\t\t\tfor (let i = 0; i < polys.length; i++) {\r\n\t\t\t\tvar poly = polys[i];\r\n\r\n\t\t\t\tvar shape: b2.PolygonShape = null, vertices = [];\r\n\t\t\t\tvar firstVertice = null;\r\n\r\n\t\t\t\tfor (var j = 0, l = poly.length; j < l; j++) {\r\n\t\t\t\t\tif (!shape) {\r\n\t\t\t\t\t\tshape = new b2.PolygonShape();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar p = poly[j];\r\n\t\t\t\t\tvar x = (p.x + offset.x);\r\n\t\t\t\t\tvar y = (p.y + offset.y);\r\n\t\t\t\t\tvar newP = new b2.Vec2(x, y);\r\n\r\n\t\t\t\t\t// //对点进行反转+旋转\r\n\t\t\t\t\t// v.x = flip * v.x;\r\n\r\n\t\t\t\t\t// {\r\n\t\t\t\t\t// \tlet cosInc = Math.cos(angle)\r\n\t\t\t\t\t// \tlet sinInc = Math.sin(angle)\r\n\t\t\t\t\t// \tlet x = cosInc * v.x - sinInc * v.y;\r\n\t\t\t\t\t// \tlet y = sinInc * v.x + cosInc * v.y;\r\n\t\t\t\t\t// \tv.x = x;\r\n\t\t\t\t\t// \tv.y = y;\r\n\t\t\t\t\t// }\r\n\t\t\t\t\tlet v = this.calcShaptPtInMainBody(mainBody, Vec2.fromXYZLike(newP))\r\n\r\n\t\t\t\t\tvertices.push(v);\r\n\r\n\t\t\t\t\tif (!firstVertice) {\r\n\t\t\t\t\t\tfirstVertice = v;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (vertices.length === b2.maxPolygonVertices) {\r\n\t\t\t\t\t\tshape.Set(vertices, vertices.length);\r\n\t\t\t\t\t\tshapes.push(shape);\r\n\r\n\t\t\t\t\t\tshape = null;\r\n\r\n\t\t\t\t\t\tif (j < l - 1) {\r\n\t\t\t\t\t\t\tvertices = [firstVertice, vertices[vertices.length - 1]];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (shape) {\r\n\t\t\t\t\tshape.Set(vertices, vertices.length);\r\n\t\t\t\t\tshapes.push(shape);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes\r\n\r\n\t\t}\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\t/** !#en\r\n\tA prismatic joint. This joint provides one degree of freedom: translation\r\n\talong an axis fixed in rigidbody. Relative rotation is prevented. You can\r\n\tuse a joint limit to restrict the range of motion and a joint motor to\r\n\tdrive the motion or to model joint friction.\r\n\t!#zh\r\n\t移动关节指定了只能在一个方向上移动刚体。\r\n\t你可以开启关节限制来设置刚体运行移动的间距，也可以开启马达来使用关节马达驱动刚体的运行。 */\r\n\texport class PrismaticJoint extends Joint {\r\n\t\t/** !#en\r\n\t\tThe local joint axis relative to rigidbody.\r\n\t\t!#zh\r\n\t\t指定刚体可以移动的方向。 */\r\n\t\tlocalAxisA: Vec2;\r\n\t\t/** !#en\r\n\t\tThe reference angle.\r\n\t\t!#zh\r\n\t\t相对角度 */\r\n\t\treferenceAngle: number;\r\n\t\t/** !#en\r\n\t\tEnable joint distance limit?\r\n\t\t!#zh\r\n\t\t是否开启关节的距离限制？ */\r\n\t\tenableLimit: boolean;\r\n\t\t/** !#en\r\n\t\tEnable joint motor?\r\n\t\t!#zh\r\n\t\t是否开启关节马达？ */\r\n\t\tenableMotor: boolean;\r\n\t\t/** !#en\r\n\t\tThe lower joint limit.\r\n\t\t!#zh\r\n\t\t刚体能够移动的最小值 */\r\n\t\tlowerLimit: number;\r\n\t\t/** !#en\r\n\t\tThe upper joint limit.\r\n\t\t!#zh\r\n\t\t刚体能够移动的最大值 */\r\n\t\tupperLimit: number;\r\n\t\t/** !#en\r\n\t\tThe maxium force can be applied to rigidbody to rearch the target motor speed.\r\n\t\t!#zh\r\n\t\t可以施加到刚体的最大力。 */\r\n\t\tmaxMotorForce: number;\r\n\t\t/** !#en\r\n\t\tThe expected motor speed.\r\n\t\t!#zh\r\n\t\t期望的马达速度。 */\r\n\t\tmotorSpeed: number;\r\n\r\n\t\tloadFromJson(json: PrismaticJoint) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.localAxisA = Vec2.fromNumArray(json.localAxisA[\"data\"])\r\n\t\t\tthis.referenceAngle = json.referenceAngle * ANGLE_TO_PHYSICS_ANGLE\r\n\t\t\tthis.enableLimit = json.enableLimit\r\n\t\t\tthis.enableMotor = json.enableMotor\r\n\t\t\tthis.lowerLimit = json.lowerLimit\r\n\t\t\tthis.upperLimit = json.upperLimit\r\n\t\t\tthis.maxMotorForce = json.maxMotorForce\r\n\t\t\tthis.motorSpeed = json.motorSpeed\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\r\n\t\t\tlet rptm = 1 / this.getPTMRatio()\r\n\r\n\t\t\tthis.lowerLimit = this.lowerLimit * rptm\r\n\t\t\tthis.upperLimit = this.upperLimit * rptm\r\n\t\t}\r\n\r\n\t\tcreateJointDef(mainBodyModelA: Box2DBody, bodyModelA: Box2DBody, mainBodyModelB: Box2DBody, bodyModelB: Box2DBody): b2.PrismaticJointDef {\r\n\r\n\t\t\tlet def = new b2.PrismaticJointDef()\r\n\t\t\tdef.collideConnected = this.collideConnected\r\n\t\t\tdef.enableMotor = this.enableMotor\r\n\t\t\tdef.referenceAngle = this.referenceAngle;\r\n\t\t\tdef.motorSpeed = this.motorSpeed\r\n\t\t\tdef.enableLimit = this.enableLimit;\r\n\t\t\tdef.lowerTranslation = this.lowerLimit;\r\n\t\t\tdef.upperTranslation = this.upperLimit;\r\n\t\t\tdef.maxMotorForce = this.maxMotorForce;\r\n\r\n\t\t\t// {\r\n\t\t\t// \tlet selfX = flip * this.anchor.x\r\n\t\t\t// \tlet cosInc = Math.cos(angle)\r\n\t\t\t// \tlet sinInc = Math.sin(angle)\r\n\t\t\t// \tlet x = cosInc * selfX - sinInc * this.anchor.y;\r\n\t\t\t// \tlet y = sinInc * selfX + cosInc * this.anchor.y;\r\n\t\t\t// \tdef.localAnchorA.Set(flip * x, y)\r\n\t\t\t// }\r\n\t\t\t// {\r\n\t\t\t// \tlet targetX = flip * this.connectedAnchor.x\r\n\t\t\t// \tlet cosInc = Math.cos(angle)\r\n\t\t\t// \tlet sinInc = Math.sin(angle)\r\n\t\t\t// \tlet x = cosInc * targetX - sinInc * this.connectedAnchor.y;\r\n\t\t\t// \tlet y = sinInc * targetX + cosInc * this.connectedAnchor.y;\r\n\t\t\t// \tdef.localAnchorB.Set(flip * x, y)\r\n\t\t\t// }\r\n\t\t\tlet anchorA = bodyModelA.calcJointAnchor(mainBodyModelA, this.anchor)\r\n\t\t\tdef.localAnchorA.Set(anchorA.x, anchorA.y)\r\n\t\t\tlet anchorB = bodyModelB.calcJointAnchor(mainBodyModelB, this.connectedAnchor)\r\n\t\t\tdef.localAnchorB.Set(anchorB.x, anchorB.y)\r\n\r\n\t\t\tdef.localAxisA.Set(this.getWorldFlipY() * this.localAxisA.x, this.localAxisA.y)\r\n\r\n\t\t\treturn def\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\t/** !#en\r\n\tA revolute joint constrains two bodies to share a common point while they\r\n\tare free to rotate about the point. The relative rotation about the shared\r\n\tpoint is the joint angle. You can limit the relative rotation with\r\n\ta joint limit that specifies a lower and upper angle. You can use a motor\r\n\tto drive the relative rotation about the shared point. A maximum motor torque\r\n\tis provided so that infinite forces are not generated.\r\n\t!#zh\r\n\t旋转关节可以约束两个刚体围绕一个点来进行旋转。\r\n\t你可以通过开启关节限制来限制旋转的最大角度和最小角度。\r\n\t你可以通过开启马达来施加一个扭矩力来驱动这两个刚体在这一点上的相对速度。 */\r\n\texport class RevoluteJoint extends Joint {\r\n\t\t/** !#en\r\n\t\tThe reference angle.\r\n\t\tAn angle between bodies considered to be zero for the joint angle.\r\n\t\t!#zh\r\n\t\t相对角度。\r\n\t\t两个物体之间角度为零时可以看作相等于关节角度 */\r\n\t\treferenceAngle: number;\r\n\t\t/** !#en\r\n\t\tThe lower angle.\r\n\t\t!#zh\r\n\t\t角度的最低限制。 */\r\n\t\tlowerAngle: number;\r\n\t\t/** !#en\r\n\t\tThe upper angle.\r\n\t\t!#zh\r\n\t\t角度的最高限制。 */\r\n\t\tupperAngle: number;\r\n\t\t/** !#en\r\n\t\tThe maxium torque can be applied to rigidbody to rearch the target motor speed.\r\n\t\t!#zh\r\n\t\t可以施加到刚体的最大扭矩。 */\r\n\t\tmaxMotorTorque: number;\r\n\t\t/** !#en\r\n\t\tThe expected motor speed.\r\n\t\t!#zh\r\n\t\t期望的马达速度。 */\r\n\t\tmotorSpeed: number;\r\n\t\t/** !#en\r\n\t\tEnable joint limit?\r\n\t\t!#zh\r\n\t\t是否开启关节的限制？ */\r\n\t\tenableLimit: boolean;\r\n\t\t/** !#en\r\n\t\tEnable joint motor?\r\n\t\t!#zh\r\n\t\t是否开启关节马达？ */\r\n\t\tenableMotor: boolean;\r\n\r\n\t\tloadFromJson(json: RevoluteJoint) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.referenceAngle = json.referenceAngle * ANGLE_TO_PHYSICS_ANGLE\r\n\t\t\tthis.lowerAngle = json.lowerAngle * ANGLE_TO_PHYSICS_ANGLE\r\n\t\t\tthis.upperAngle = json.upperAngle * ANGLE_TO_PHYSICS_ANGLE\r\n\t\t\tthis.maxMotorTorque = json.maxMotorTorque\r\n\t\t\tthis.motorSpeed = json.motorSpeed\r\n\t\t\tthis.enableLimit = json.enableLimit\r\n\t\t\tthis.enableMotor = json.enableMotor\r\n\t\t}\r\n\r\n\t\tcreateJointDef(mainBodyModelA: Box2DBody, bodyModelA: Box2DBody, mainBodyModelB: Box2DBody, bodyModelB: Box2DBody) {\r\n\r\n\t\t\tlet def = new b2.RevoluteJointDef()\r\n\t\t\tdef.referenceAngle = this.referenceAngle\r\n\t\t\tdef.enableLimit = this.enableLimit\r\n\t\t\tdef.lowerAngle = this.lowerAngle\r\n\t\t\tdef.upperAngle = this.upperAngle\r\n\t\t\tdef.collideConnected = this.collideConnected\r\n\t\t\tdef.enableMotor = this.enableMotor\r\n\t\t\tdef.maxMotorTorque = this.maxMotorTorque\r\n\t\t\tdef.motorSpeed = this.motorSpeed\r\n\r\n\t\t\t// {\r\n\t\t\t// \tlet selfX = flip * this.anchor.x\r\n\t\t\t// \tlet cosInc = Math.cos(angle)\r\n\t\t\t// \tlet sinInc = Math.sin(angle)\r\n\t\t\t// \tlet x = cosInc * selfX - sinInc * this.anchor.y;\r\n\t\t\t// \tlet y = sinInc * selfX + cosInc * this.anchor.y;\r\n\t\t\t// \tdef.localAnchorA.Set(flip * x, y)\r\n\t\t\t// }\r\n\t\t\t// {\r\n\t\t\t// \tlet targetX = flip * this.connectedAnchor.x\r\n\t\t\t// \tlet cosInc = Math.cos(angle)\r\n\t\t\t// \tlet sinInc = Math.sin(angle)\r\n\t\t\t// \tlet x = cosInc * targetX - sinInc * this.connectedAnchor.y;\r\n\t\t\t// \tlet y = sinInc * targetX + cosInc * this.connectedAnchor.y;\r\n\t\t\t// \tdef.localAnchorB.Set(flip * x, y)\r\n\t\t\t// }\r\n\r\n\t\t\tlet anchorA = bodyModelA.calcJointAnchor(mainBodyModelA, this.anchor)\r\n\t\t\tdef.localAnchorA.Set(anchorA.x, anchorA.y)\r\n\t\t\tlet anchorB = bodyModelB.calcJointAnchor(mainBodyModelB, this.connectedAnchor)\r\n\t\t\tdef.localAnchorB.Set(anchorB.x, anchorB.y)\r\n\r\n\t\t\t// if (this.bodyA.isBox) {\r\n\t\t\t// \tdef.bodyA = mainBody;\r\n\t\t\t// \tdef.localAnchorA.SelfAddXY(isFlip ? -this.bodyA.position.x : this.bodyA.position.x, this.bodyA.position.y);\r\n\t\t\t// } else {\r\n\t\t\t// \tdef.bodyA = this.findBodyByDef(world, this.bodyA)\r\n\t\t\t// }\r\n\r\n\t\t\t// if (this.bodyB.isBox) {\r\n\t\t\t// \tdef.bodyB = mainBody;\r\n\t\t\t// \tdef.localAnchorB.SelfAddXY(isFlip ? -this.bodyB.position.x : this.bodyB.position.x, this.bodyB.position.y);\r\n\t\t\t// } else {\r\n\t\t\t// \tdef.bodyB = this.findBodyByDef(world, this.bodyB)\r\n\t\t\t// }\r\n\r\n\t\t\treturn def\r\n\t\t}\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\t/** !#en Enum for RigidBodyType.\r\n\t!#zh 刚体类型 */\r\n\texport enum RigidBodyType {\r\n\t\tStatic = 0,\r\n\t\tKinematic = 0,\r\n\t\tDynamic = 0,\r\n\t\tAnimated = 0,\r\n\t}\r\n\r\n\t/** undefined */\r\n\texport class RigidBody extends Component {\r\n\t\t/** !#en\r\n\t\tShould enabled contact listener?\r\n\t\tWhen a collision is trigger, the collision callback will only be called when enabled contact listener.\r\n\t\t!#zh\r\n\t\t是否启用接触接听器。\r\n\t\t当 collider 产生碰撞时，只有开启了接触接听器才会调用相应的回调函数 */\r\n\t\tenabledContactListener: boolean;\r\n\r\n\t\t/** !#en\r\n\t\tIs this a fast moving body that should be prevented from tunneling through\r\n\t\tother moving bodies?\r\n\t\tNote :\r\n\t\t- All bodies are prevented from tunneling through kinematic and static bodies. This setting is only considered on dynamic bodies.\r\n\t\t- You should use this flag sparingly since it increases processing time.\r\n\t\t!#zh\r\n\t\t这个刚体是否是一个快速移动的刚体，并且需要禁止穿过其他快速移动的刚体？\r\n\t\t需要注意的是 :\r\n\t\t - 所有刚体都被禁止从 运动刚体 和 静态刚体 中穿过。此选项只关注于 动态刚体。\r\n\t\t - 应该尽量少的使用此选项，因为它会增加程序处理时间。 */\r\n\t\tbullet: boolean;\r\n\t\t/** !#en\r\n\t\tRigidbody type : Static, Kinematic, Dynamic or Animated.\r\n\t\t!#zh\r\n\t\t刚体类型： Static, Kinematic, Dynamic or Animated. */\r\n\t\ttype: RigidBodyType;\r\n\t\t/** !#en\r\n\t\tSet this flag to false if this body should never fall asleep.\r\n\t\tNote that this increases CPU usage.\r\n\t\t!#zh\r\n\t\t如果此刚体永远都不应该进入睡眠，那么设置这个属性为 false。\r\n\t\t需要注意这将使 CPU 占用率提高。 */\r\n\t\tallowSleep: boolean;\r\n\t\t/** !#en\r\n\t\tScale the gravity applied to this body.\r\n\t\t!#zh\r\n\t\t缩放应用在此刚体上的重力值 */\r\n\t\tgravityScale: number;\r\n\t\t/** !#en\r\n\t\tLinear damping is use to reduce the linear velocity.\r\n\t\tThe damping parameter can be larger than 1, but the damping effect becomes sensitive to the\r\n\t\ttime step when the damping parameter is large.\r\n\t\t!#zh\r\n\t\tLinear damping 用于衰减刚体的线性速度。衰减系数可以大于 1，但是当衰减系数比较大的时候，衰减的效果会变得比较敏感。 */\r\n\t\tlinearDamping: number;\r\n\t\t/** !#en\r\n\t\tAngular damping is use to reduce the angular velocity. The damping parameter\r\n\t\tcan be larger than 1 but the damping effect becomes sensitive to the\r\n\t\ttime step when the damping parameter is large.\r\n\t\t!#zh\r\n\t\tAngular damping 用于衰减刚体的角速度。衰减系数可以大于 1，但是当衰减系数比较大的时候，衰减的效果会变得比较敏感。 */\r\n\t\tangularDamping: number;\r\n\t\t/** !#en\r\n\t\tThe linear velocity of the body's origin in world co-ordinates.\r\n\t\t!#zh\r\n\t\t刚体在世界坐标下的线性速度 */\r\n\t\tlinearVelocity: Vec2;\r\n\t\t/** !#en\r\n\t\tThe angular velocity of the body.\r\n\t\t!#zh\r\n\t\t刚体的角速度 */\r\n\t\tangularVelocity: number;\r\n\t\t/** !#en\r\n\t\tShould this body be prevented from rotating?\r\n\t\t!#zh\r\n\t\t是否禁止此刚体进行旋转 */\r\n\t\tfixedRotation: boolean;\r\n\t\t/** !#en\r\n\t\tSet the sleep state of the body. A sleeping body has very low CPU cost.(When the rigid body is hit, if the rigid body is in sleep state, it will be immediately awakened.)\r\n\t\t!#zh\r\n\t\t设置刚体的睡眠状态。 睡眠的刚体具有非常低的 CPU 成本。（当刚体被碰撞到时，如果刚体处于睡眠状态，它会立即被唤醒） */\r\n\t\tawake: boolean;\r\n\t\t/** !#en\r\n\t\tWhether to wake up this rigid body during initialization\r\n\t\t!#zh\r\n\t\t是否在初始化时唤醒此刚体 */\r\n\t\tawakeOnLoad: boolean;\r\n\t\t/** !#en\r\n\t\tSet the active state of the body. An inactive body is not\r\n\t\tsimulated and cannot be collided with or woken up.\r\n\t\tIf body is active, all fixtures will be added to the\r\n\t\tbroad-phase.\r\n\t\tIf body is inactive, all fixtures will be removed from\r\n\t\tthe broad-phase and all contacts will be destroyed.\r\n\t\tFixtures on an inactive body are implicitly inactive and will\r\n\t\tnot participate in collisions, ray-casts, or queries.\r\n\t\tJoints connected to an inactive body are implicitly inactive.\r\n\t\t!#zh\r\n\t\t设置刚体的激活状态。一个非激活状态下的刚体是不会被模拟和碰撞的，不管它是否处于睡眠状态下。\r\n\t\t如果刚体处于激活状态下，所有夹具会被添加到 粗测阶段（broad-phase）。\r\n\t\t如果刚体处于非激活状态下，所有夹具会被从 粗测阶段（broad-phase）中移除。\r\n\t\t在非激活状态下的夹具不会参与到碰撞，射线，或者查找中\r\n\t\t链接到非激活状态下刚体的关节也是非激活的。 */\r\n\t\tactive: boolean;\r\n\r\n\t\tloadFromJson(json: RigidBody) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.enabledContactListener = json.enabledContactListener\r\n\t\t\tthis.bullet = json.bullet\r\n\t\t\tthis.type = json.type\r\n\t\t\tthis.allowSleep = json.allowSleep\r\n\t\t\tthis.gravityScale = json.gravityScale\r\n\t\t\tthis.linearDamping = json.linearDamping\r\n\t\t\tthis.angularDamping = json.angularDamping\r\n\t\t\tthis.linearVelocity = Vec2.fromNumArray(json.linearVelocity['data'])\r\n\t\t\tthis.angularVelocity = json.angularVelocity * ANGLE_TO_PHYSICS_ANGLE\r\n\t\t\tthis.fixedRotation = json.fixedRotation\r\n\t\t\tthis.awake = json.awake\r\n\t\t\tthis.awakeOnLoad = json.awakeOnLoad\r\n\t\t\tthis.active = json.active\r\n\t\t}\r\n\r\n\t\tupdatePTMRatio() {\r\n\t\t\tlet rptm = 1 / this.getPTMRatio()\r\n\t\t\tVector.multUpVar(this.linearVelocity, rptm)\r\n\t\t}\r\n\r\n\t\tcreateBodyDef(): b2.BodyDef {\r\n\t\t\tvar def = new b2.BodyDef()\r\n\r\n\t\t\tdef.linearVelocity.Set(this.linearVelocity.x, this.linearVelocity.y)\r\n\t\t\tdef.angularVelocity = this.angularVelocity;\r\n\t\t\tdef.linearDamping = this.linearDamping\r\n\t\t\tdef.angularDamping = this.angularDamping\r\n\t\t\tdef.allowSleep = this.allowSleep\r\n\t\t\tdef.awake = this.awake\r\n\t\t\tdef.fixedRotation = this.fixedRotation\r\n\t\t\tdef.bullet = this.bullet\r\n\t\t\t// def.type = rtype == RigidBodyType.Dynamic ? b2.BodyType.b2_dynamicBody : (rtype == RigidBodyType.Kinematic ? b2.BodyType.b2_kinematicBody : b2.BodyType.b2_staticBody);\r\n\t\t\tdef.type = this.type as number as b2.BodyType\r\n\t\t\tdef.active = this.active\r\n\t\t\tdef.gravityScale = this.gravityScale\r\n\r\n\t\t\treturn def\r\n\t\t}\r\n\r\n\t\tcreateBody(name: string, world: b2.World, zoneBodyDef: b2.BodyDef, unionId: string) {\r\n\t\t\tlet zoneBody = world.CreateBody(zoneBodyDef)\r\n\r\n\t\t\tlet userData: IBox2DBodyData = {\r\n\t\t\t\tname,\r\n\t\t\t\tmid: this.oid,\r\n\t\t\t\toid: \"unknown\",\r\n\t\t\t\tcontacts: [],\r\n\t\t\t\tunionId,\r\n\t\t\t}\r\n\t\t\tzoneBody.SetUserData(userData)\r\n\t\t\treturn zoneBody\r\n\t\t}\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\t/** !#en\r\n\tA weld joint essentially glues two bodies together. A weld joint may\r\n\tdistort somewhat because the island constraint solver is approximate.\r\n\t!#zh\r\n\t熔接关节相当于将两个刚体粘在了一起。\r\n\t熔接关节可能会使某些东西失真，因为约束求解器算出的都是近似值。 */\r\n\texport class WeldJoint extends Joint {\r\n\t\t/** !#en\r\n\t\tThe reference angle.\r\n\t\t!#zh\r\n\t\t相对角度。 */\r\n\t\treferenceAngle: number;\r\n\t\t/** !#en\r\n\t\tThe frequency.\r\n\t\t!#zh\r\n\t\t弹性系数。 */\r\n\t\tfrequency: number;\r\n\t\t/** !#en\r\n\t\tThe damping ratio.\r\n\t\t!#zh\r\n\t\t阻尼，表示关节变形后，恢复到初始状态受到的阻力。 */\r\n\t\tdampingRatio: number;\r\n\r\n\t\tloadFromJson(json: WeldJoint) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.referenceAngle = json.referenceAngle\r\n\t\t\tthis.frequency = json.frequency\r\n\t\t\tthis.dampingRatio = json.dampingRatio\r\n\t\t}\r\n\r\n\t\tcreateJointDef(mainBodyModelA: Box2DBody, bodyModelA: Box2DBody, mainBodyModelB: Box2DBody, bodyModelB: Box2DBody): b2.WeldJointDef {\r\n\r\n\t\t\tlet def = new b2.WeldJointDef()\r\n\t\t\tdef.referenceAngle = this.referenceAngle\r\n\t\t\tdef.frequencyHz = this.frequency\r\n\t\t\tdef.dampingRatio = this.dampingRatio\r\n\t\t\tdef.collideConnected = this.collideConnected\r\n\r\n\t\t\tlet anchorA = bodyModelA.calcJointAnchor(mainBodyModelA, this.anchor)\r\n\t\t\tdef.localAnchorA.Set(anchorA.x, anchorA.y)\r\n\t\t\tlet anchorB = bodyModelB.calcJointAnchor(mainBodyModelB, this.connectedAnchor)\r\n\t\t\tdef.localAnchorB.Set(anchorB.x, anchorB.y)\r\n\r\n\t\t\treturn def\r\n\t\t}\r\n\t}\r\n}\r\n","\r\nnamespace fsync.box2d.b2data {\r\n\t/** !#en\r\n\tA wheel joint. This joint provides two degrees of freedom: translation\r\n\talong an axis fixed in bodyA and rotation in the plane. You can use a joint motor to drive\r\n\tthe rotation or to model rotational friction.\r\n\tThis joint is designed for vehicle suspensions.\r\n\t!#zh\r\n\t轮子关节提供两个维度的自由度：旋转和沿着指定方向上位置的移动。\r\n\t你可以通过开启关节马达来使用马达驱动刚体的旋转。\r\n\t轮组关节是专门为机动车类型设计的。 */\r\n\texport class WheelJoint extends Joint {\r\n\t\t/** !#en\r\n\t\tThe local joint axis relative to rigidbody.\r\n\t\t!#zh\r\n\t\t指定刚体可以移动的方向。 */\r\n\t\tlocalAxisA: Vec2;\r\n\t\t/** !#en\r\n\t\tThe maxium torque can be applied to rigidbody to rearch the target motor speed.\r\n\t\t!#zh\r\n\t\t可以施加到刚体的最大扭矩。 */\r\n\t\tmaxMotorTorque: number;\r\n\t\t/** !#en\r\n\t\tThe expected motor speed.\r\n\t\t!#zh\r\n\t\t期望的马达速度。 */\r\n\t\tmotorSpeed: number;\r\n\t\t/** !#en\r\n\t\tEnable joint motor?\r\n\t\t!#zh\r\n\t\t是否开启关节马达？ */\r\n\t\tenableMotor: boolean;\r\n\t\t/** !#en\r\n\t\tThe spring frequency.\r\n\t\t!#zh\r\n\t\t弹性系数。 */\r\n\t\tfrequency: number;\r\n\t\t/** !#en\r\n\t\tThe damping ratio.\r\n\t\t!#zh\r\n\t\t阻尼，表示关节变形后，恢复到初始状态受到的阻力。 */\r\n\t\tdampingRatio: number;\r\n\r\n\t\tloadFromJson(json: WheelJoint) {\r\n\t\t\tsuper.loadFromJson(json)\r\n\t\t\tthis.localAxisA = Vec2.fromNumArray(json.localAxisA['data'])\r\n\t\t\tthis.maxMotorTorque = json.maxMotorTorque\r\n\t\t\tthis.motorSpeed = json.motorSpeed\r\n\t\t\tthis.enableMotor = json.enableMotor\r\n\t\t\tthis.frequency = json.frequency\r\n\t\t\tthis.dampingRatio = json.dampingRatio\r\n\t\t}\r\n\r\n\t\tcreateJointDef(mainBodyModelA: Box2DBody, bodyModelA: Box2DBody, mainBodyModelB: Box2DBody, bodyModelB: Box2DBody): b2.WheelJointDef {\r\n\r\n\t\t\tlet def = new b2.WheelJointDef()\r\n\t\t\tdef.frequencyHz = this.frequency\r\n\t\t\tdef.dampingRatio = this.dampingRatio\r\n\t\t\tdef.collideConnected = this.collideConnected\r\n\t\t\tdef.enableMotor = this.enableMotor\r\n\t\t\tdef.maxMotorTorque = this.maxMotorTorque\r\n\t\t\tdef.motorSpeed = this.motorSpeed\r\n\r\n\t\t\t// {\r\n\t\t\t// \tlet selfX = flip * this.anchor.x\r\n\t\t\t// \tlet cosInc = Math.cos(angle)\r\n\t\t\t// \tlet sinInc = Math.sin(angle)\r\n\t\t\t// \tlet x = cosInc * selfX - sinInc * this.anchor.y;\r\n\t\t\t// \tlet y = sinInc * selfX + cosInc * this.anchor.y;\r\n\t\t\t// \tdef.localAnchorA.Set(flip * x + offsetA.x, y + offsetA.y)\r\n\t\t\t// }\r\n\t\t\t// {\r\n\t\t\t// \t// let targetX = flip * this.connectedAnchor.x\r\n\t\t\t// \t// let cosInc = Math.cos(angle)\r\n\t\t\t// \t// let sinInc = Math.sin(angle)\r\n\t\t\t// \t// let x = cosInc * targetX - sinInc * this.connectedAnchor.y;\r\n\t\t\t// \t// let y = sinInc * targetX + cosInc * this.connectedAnchor.y;\r\n\t\t\t// \tdef.localAnchorB.Set(offsetB.x + 0.4, offsetB.y)\r\n\t\t\t// }\r\n\r\n\t\t\tlet anchorA = bodyModelA.calcJointAnchor(mainBodyModelA, this.anchor)\r\n\t\t\tdef.localAnchorA.Set(anchorA.x, anchorA.y)\r\n\t\t\tlet anchorB = bodyModelB.calcJointAnchor(mainBodyModelB, this.connectedAnchor)\r\n\t\t\tdef.localAnchorB.Set(anchorB.x, anchorB.y)\r\n\r\n\t\t\tdef.localAxisA.Set(this.getWorldFlipY() * this.localAxisA.x, this.localAxisA.y)\r\n\r\n\t\t\treturn def\r\n\t\t}\r\n\t}\r\n}\r\n","namespace fsync {\n\n\t/**\n\t * Any compatible Long instance.\n\t * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n\t */\n\texport interface Long {\n\n\t\t/** Low bits */\n\t\tlow: number;\n\n\t\t/** High bits */\n\t\thigh: number;\n\n\t\t/** Whether unsigned or not */\n\t\tunsigned: boolean;\n\n\t\ttoNumber(): number\n\t}\n\n\texport type int = number\n\texport type int32 = number\n\texport type int64 = number\n\texport type uint32 = number\n\texport type uint64 = number\n\texport type uint = number\n\texport type float32 = number\n\texport type float64 = number\n\texport type char = string\n\texport type bool = boolean\n\n\texport type TTimeStamp = int64\n\n\texport class LongHelper {\n\t\tstatic toNumber(n: Long | number): number {\n\t\t\tif (typeof (n) == \"number\") {\n\t\t\t\treturn n\n\t\t\t} else {\n\t\t\t\treturn n.toNumber()\n\t\t\t}\n\t\t}\n\t}\n\n}","namespace lang.helper {\r\n\r\n\texport class TArrayHelper {\r\n\t\tmax<T>(ls: T[], call: (e: T) => number): T | undefined {\r\n\t\t\tlet maxValue = -Infinity\r\n\t\t\tlet maxEle = ls[0]\r\n\t\t\tfor (let e of ls) {\r\n\t\t\t\tlet value = call(e)\r\n\t\t\t\tif (maxValue <= value) {\r\n\t\t\t\t\tmaxValue = value\r\n\t\t\t\t\tmaxEle = e\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn maxEle\r\n\t\t}\r\n\r\n\t\tmin<T>(ls: T[], call: (e: T) => number): T | undefined {\r\n\t\t\tlet minValue = Infinity\r\n\t\t\tlet minEle = ls[0]\r\n\t\t\tfor (let e of ls) {\r\n\t\t\t\tlet value = call(e)\r\n\t\t\t\tif (minValue >= value) {\r\n\t\t\t\t\tminValue = value\r\n\t\t\t\t\tminEle = e\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn minEle\r\n\t\t}\r\n\r\n\t\tremove<T>(ls: T[], e: T) {\r\n\t\t\tlet index = ls.indexOf(e)\r\n\t\t\tif (index >= 0) {\r\n\t\t\t\tls.splice(index, 1)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 求出两列中差异的部分\r\n\t\t * @param ls1 \r\n\t\t * @param idGetter1 \r\n\t\t * @param ls2 \r\n\t\t * @param idGetter2 \r\n\t\t * @param call \r\n\t\t */\r\n\t\tforeachDifferentPairs<T, F>(ls1: T[], idGetter1: (e: T) => string, ls2: F[], idGetter2: (e: F) => string, call: (e1: T, e2: F) => any) {\r\n\t\t\tconst ls1Map: { [key: string]: T } = EmptyTable()\r\n\t\t\tconst ls2Map: { [key: string]: F } = EmptyTable()\r\n\t\t\tls1.forEach(e => {\r\n\t\t\t\tlet id = idGetter1(e)\r\n\t\t\t\tls1Map[id] = e\r\n\t\t\t})\r\n\t\t\tls2.forEach(e => {\r\n\t\t\t\tlet id = idGetter2(e)\r\n\t\t\t\tls2Map[id] = e\r\n\t\t\t})\r\n\t\t\tfor (let id in ls1Map) {\r\n\t\t\t\tconst e1 = ls1Map[id]\r\n\t\t\t\tconst e2 = ls2Map[id]\r\n\t\t\t\tcall(e1, e2)\r\n\t\t\t}\r\n\t\t\tfor (let id in ls2Map) {\r\n\t\t\t\tconst e1 = ls1Map[id]\r\n\t\t\t\tconst e2 = ls2Map[id]\r\n\t\t\t\tif (!(id in ls1Map)) {\r\n\t\t\t\t\tcall(e1, e2)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsum<T>(ls: T[], call?: (n: T) => number): number {\r\n\t\t\tif (!call) {\r\n\t\t\t\tlet n = 0\r\n\t\t\t\tfor (let m of ls) {\r\n\t\t\t\t\tn += this.autoParseNumber(m)\r\n\t\t\t\t}\r\n\t\t\t\treturn n\r\n\t\t\t} else {\r\n\t\t\t\tlet n = 0\r\n\t\t\t\tfor (let m of ls) {\r\n\t\t\t\t\tlet ret = call(m)\r\n\t\t\t\t\tif (typeof (ret) == \"number\") {\r\n\t\t\t\t\t\tn += ret\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tautoParseNumber(m: any): number {\r\n\t\t\tif (typeof (m) == \"number\") {\r\n\t\t\t\treturn m\r\n\t\t\t} else if (typeof (m) == \"string\") {\r\n\t\t\t\treturn parseFloat(m)\r\n\t\t\t} else {\r\n\t\t\t\treturn m as any as number\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\taverage<T>(ls: T[], call?: (n: T) => number): number {\r\n\t\t\tif (ls.length == 0) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!call) {\r\n\t\t\t\tlet n = 0\r\n\t\t\t\tfor (let m of ls) {\r\n\t\t\t\t\tn += this.autoParseNumber(m)\r\n\t\t\t\t}\r\n\t\t\t\tlet ave = n / ls.length\r\n\t\t\t\treturn ave\r\n\t\t\t} else {\r\n\t\t\t\tlet count = 0\r\n\t\t\t\tlet n = 0\r\n\t\t\t\tfor (let m of ls) {\r\n\t\t\t\t\tlet ret = call(m)\r\n\t\t\t\t\tif (typeof (ret) == \"number\") {\r\n\t\t\t\t\t\tn += ret\r\n\t\t\t\t\t\tcount++\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet ave = n / count\r\n\t\t\t\treturn ave\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport const ArrayHelper = new TArrayHelper()\r\n\r\n}\r\n","\r\nnamespace lang.helper {\r\n\r\n\texport class TMapArrayHelper {\r\n\t\tfilter<T>(m: { [key: string]: T }, call: (v: T, key: string) => any): T[] {\r\n\t\t\tlet ls: T[] = []\r\n\t\t\tfor (let key in m) {\r\n\t\t\t\tlet v = m[key]\r\n\t\t\t\tif (call(v, key)) {\r\n\t\t\t\t\tls.push(v)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ls\r\n\t\t}\r\n\t}\r\n\r\n\texport const MapArrayHelper = new TMapArrayHelper()\r\n\r\n}\r\n","\nnamespace lang {\n\texport const EmptyCall = function (): any { }\n\n\texport const EmptyTable = function () {\n\t\treturn Object.create(null)\n\t\t// return {}\n\t}\n\n\texport function Clean<T extends Object>(container: T): T {\n\t\tif (container == null) {\n\t\t\treturn container\n\t\t}\n\n\t\tif (container instanceof Array) {\n\t\t\tcontainer.length = 0\n\t\t} else {\n\t\t\tfor (let key of Object.keys(container)) {\n\t\t\t\tdelete container[key]\n\t\t\t}\n\t\t}\n\t\treturn container\n\t}\n\texport function CleanTable<T extends Object>(container: T): T {\n\t\tif (container == null) {\n\t\t\treturn EmptyTable()\n\t\t} else {\n\t\t\treturn Clean(container)\n\t\t}\n\t}\n\texport function CleanArray<T extends Object>(container: T[]): T[] {\n\t\tif (container == null) {\n\t\t\treturn []\n\t\t} else {\n\t\t\treturn Clean(container)\n\t\t}\n\t}\n\n\tconst _copyDataDeep = (source: object, target: object) => {\n\t\tfor (let key of Object.getOwnPropertyNames(source)) {\n\t\t\t// 清除溢出字段\n\t\t\tif (target[key] == null) {\n\t\t\t\tdelete source[key]\n\t\t\t}\n\t\t}\n\t\tfor (let key of Object.getOwnPropertyNames(target)) {\n\t\t\tlet tvalue = target[key]\n\t\t\tif (tvalue == null) {\n\t\t\t\tsource[key] = target[key]\n\t\t\t} else if (typeof (tvalue) == \"object\") {\n\t\t\t\tlet svalue = source[key]\n\t\t\t\tif (typeof (svalue) != \"object\" || svalue == tvalue) {\n\t\t\t\t\t// 指向同一个对象或空，则重新创建新的\n\t\t\t\t\tsvalue = {}\n\t\t\t\t\tsource[key] = svalue\n\t\t\t\t}\n\t\t\t\t_copyDataDeep(svalue, tvalue)\n\t\t\t} else {\n\t\t\t\tif (source[key] != target[key]) {\n\t\t\t\t\tsource[key] = target[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\texport class ObjectUtils {\n\t\t/**\n\t\t * 深度复制\n\t\t * @param source \n\t\t * @param target \n\t\t */\n\t\tstatic copyDataDeep<T extends object>(source: T, target: T): T {\n\t\t\tif (target == null) {\n\t\t\t\treturn null\n\t\t\t} else if (typeof (source) == \"object\" && typeof (target) == \"object\") {\n\t\t\t\t_copyDataDeep(source, target)\n\t\t\t\treturn source\n\t\t\t} else {\n\t\t\t\treturn target\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 浅克隆对象\n\t\t * @param source \n\t\t */\n\t\tstatic clone<T extends object>(source: T): T {\n\t\t\tlet target = EmptyTable()\n\t\t\tfor (let key in source) {\n\t\t\t\ttarget[key] = source[key]\n\t\t\t}\n\t\t\tObject.setPrototypeOf(target, Object.getPrototypeOf(source))\n\t\t\treturn target as T\n\t\t}\n\n\t\tstatic values<T extends object>(source: { [key: string]: T }): T[] {\n\t\t\tif (Object.values) {\n\t\t\t\treturn Object.values(source)\n\t\t\t}\n\n\t\t\tlet values = []\n\t\t\tfor (let key of Object.keys(source)) {\n\t\t\t\tvalues.push(source[key])\n\t\t\t}\n\t\t\treturn values\n\t\t}\n\t}\n}","\r\n/// <reference path=\"../lang/ArrayHelper.ts\" />\r\n/// <reference path=\"../lang/MapHelper.ts\" />\r\n/// <reference path=\"../lang/ObjectUtils.ts\" />\r\n\r\nnamespace fsync {\r\n\r\n\texport import ArrayHelper = lang.helper.ArrayHelper\r\n\texport import MapArrayHelper = lang.helper.MapArrayHelper\r\n\r\n\texport import EmptyCall = lang.EmptyCall\r\n\texport import EmptyTable = lang.EmptyTable\r\n\texport import CleanTable = lang.CleanTable\r\n\texport import CleanArray = lang.CleanArray\r\n\texport import ObjectUtils = lang.ObjectUtils\r\n}\r\n","\nnamespace fsync {\n\texport class BufferHelper {\n\n\t\tstatic concatUint8Array(ls: Uint8Array[]): Uint8Array {\n\t\t\tlet len = 0\n\t\t\tfor (let b of ls) {\n\t\t\t\tlen += b.length\n\t\t\t}\n\t\t\tlet m = new Uint8Array(len)\n\t\t\tlet i = 0\n\t\t\tfor (let b of ls) {\n\t\t\t\tfor (let j = 0; j < b.length; j++) {\n\t\t\t\t\tm[i++] = b[j]\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn m\n\t\t}\n\n\t\tstatic from(str: string, encoding = undefined) {\n\n\t\t\tfunction asciiToBytes(str) {\n\t\t\t\tvar byteArray = []\n\t\t\t\tfor (var i = 0; i < str.length; ++i) {\n\t\t\t\t\t// Node's code seems to be doing this and not & 0x7F..\n\t\t\t\t\tbyteArray.push(str.charCodeAt(i) & 0xFF)\n\t\t\t\t}\n\t\t\t\treturn byteArray\n\t\t\t}\n\n\t\t\tfunction utf16leToBytes(str, units) {\n\t\t\t\tvar c, hi, lo\n\t\t\t\tvar byteArray = []\n\t\t\t\tfor (var i = 0; i < str.length; ++i) {\n\t\t\t\t\tif ((units -= 2) < 0) break\n\n\t\t\t\t\tc = str.charCodeAt(i)\n\t\t\t\t\thi = c >> 8\n\t\t\t\t\tlo = c % 256\n\t\t\t\t\tbyteArray.push(lo)\n\t\t\t\t\tbyteArray.push(hi)\n\t\t\t\t}\n\n\t\t\t\treturn byteArray\n\t\t\t}\n\n\t\t\tfunction numberIsNaN(obj) {\n\t\t\t\t// For IE11 support\n\t\t\t\treturn obj !== obj // eslint-disable-line no-self-compare\n\t\t\t}\n\n\t\t\tfunction blitBuffer(src, dst, offset, length) {\n\t\t\t\tfor (var i = 0; i < length; ++i) {\n\t\t\t\t\tif ((i + offset >= dst.length) || (i >= src.length)) break\n\t\t\t\t\tdst[i + offset] = src[i]\n\t\t\t\t}\n\t\t\t\treturn i\n\t\t\t}\n\n\t\t\tfunction hexWrite(buf, string, offset, length) {\n\t\t\t\toffset = Number(offset) || 0\n\t\t\t\tvar remaining = buf.length - offset\n\t\t\t\tif (!length) {\n\t\t\t\t\tlength = remaining\n\t\t\t\t} else {\n\t\t\t\t\tlength = Number(length)\n\t\t\t\t\tif (length > remaining) {\n\t\t\t\t\t\tlength = remaining\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar strLen = string.length\n\n\t\t\t\tif (length > strLen / 2) {\n\t\t\t\t\tlength = strLen / 2\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < length; ++i) {\n\t\t\t\t\tvar parsed = parseInt(string.substr(i * 2, 2), 16)\n\t\t\t\t\tif (numberIsNaN(parsed)) return i\n\t\t\t\t\tbuf[offset + i] = parsed\n\t\t\t\t}\n\t\t\t\treturn i\n\t\t\t}\n\n\t\t\tfunction utf8Write(buf, string, offset, length) {\n\t\t\t\treturn blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t\t\t}\n\n\t\t\tfunction asciiWrite(buf, string, offset, length) {\n\t\t\t\treturn blitBuffer(asciiToBytes(string), buf, offset, length)\n\t\t\t}\n\n\t\t\tfunction latin1Write(buf, string, offset, length) {\n\t\t\t\treturn asciiWrite(buf, string, offset, length)\n\t\t\t}\n\n\t\t\tfunction base64Write(buf, string, offset, length) {\n\t\t\t\t// return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t\t\t\tthrow new Error(\"unsupport function: base64Write\")\n\t\t\t}\n\n\t\t\tfunction ucs2Write(buf, string, offset, length) {\n\t\t\t\treturn blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t\t\t}\n\n\t\t\tfunction write(buf, string, offset, length = undefined, encoding = undefined) {\n\t\t\t\t// Buffer#write(string)\n\t\t\t\tif (offset === undefined) {\n\t\t\t\t\tencoding = 'utf8'\n\t\t\t\t\tlength = buf.length\n\t\t\t\t\toffset = 0\n\t\t\t\t\t// Buffer#write(string, encoding)\n\t\t\t\t} else if (length === undefined && typeof offset === 'string') {\n\t\t\t\t\tencoding = offset\n\t\t\t\t\tlength = buf.length\n\t\t\t\t\toffset = 0\n\t\t\t\t\t// Buffer#write(string, offset[, length][, encoding])\n\t\t\t\t} else if (isFinite(offset)) {\n\t\t\t\t\toffset = offset >>> 0\n\t\t\t\t\tif (isFinite(length)) {\n\t\t\t\t\t\tlength = length >>> 0\n\t\t\t\t\t\tif (encoding === undefined) encoding = 'utf8'\n\t\t\t\t\t} else {\n\t\t\t\t\t\tencoding = length\n\t\t\t\t\t\tlength = undefined\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tvar remaining = buf.length - offset\n\t\t\t\tif (length === undefined || length > remaining) length = remaining\n\n\t\t\t\tif ((string.length > 0 && (length < 0 || offset < 0)) || offset > buf.length) {\n\t\t\t\t\tthrow new RangeError('Attempt to write outside buffer bounds')\n\t\t\t\t}\n\n\t\t\t\tif (!encoding) encoding = 'utf8'\n\n\t\t\t\tvar loweredCase = false\n\t\t\t\tfor (; ;) {\n\t\t\t\t\tswitch (encoding) {\n\t\t\t\t\t\tcase 'hex':\n\t\t\t\t\t\t\treturn hexWrite(buf, string, offset, length)\n\n\t\t\t\t\t\tcase 'utf8':\n\t\t\t\t\t\tcase 'utf-8':\n\t\t\t\t\t\t\treturn utf8Write(buf, string, offset, length)\n\n\t\t\t\t\t\tcase 'ascii':\n\t\t\t\t\t\t\treturn asciiWrite(buf, string, offset, length)\n\n\t\t\t\t\t\tcase 'latin1':\n\t\t\t\t\t\tcase 'binary':\n\t\t\t\t\t\t\treturn latin1Write(buf, string, offset, length)\n\n\t\t\t\t\t\tcase 'base64':\n\t\t\t\t\t\t\t// Warning: maxLength not taken into account in base64Write\n\t\t\t\t\t\t\treturn base64Write(buf, string, offset, length)\n\n\t\t\t\t\t\tcase 'ucs2':\n\t\t\t\t\t\tcase 'ucs-2':\n\t\t\t\t\t\tcase 'utf16le':\n\t\t\t\t\t\tcase 'utf-16le':\n\t\t\t\t\t\t\treturn ucs2Write(buf, string, offset, length)\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t\t\t\t\t\t\tencoding = ('' + encoding).toLowerCase()\n\t\t\t\t\t\t\tloweredCase = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction utf8ToBytes(str: string, units = undefined) {\n\t\t\t\tunits = units || Infinity\n\t\t\t\tvar codePoint\n\t\t\t\tvar length = str.length\n\t\t\t\tvar leadSurrogate = null\n\t\t\t\tvar bytes = []\n\n\t\t\t\tfor (var i = 0; i < length; ++i) {\n\t\t\t\t\tcodePoint = str.charCodeAt(i)\n\n\t\t\t\t\t// is surrogate component\n\t\t\t\t\tif (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t\t\t\t\t\t// last char was a lead\n\t\t\t\t\t\tif (!leadSurrogate) {\n\t\t\t\t\t\t\t// no lead yet\n\t\t\t\t\t\t\tif (codePoint > 0xDBFF) {\n\t\t\t\t\t\t\t\t// unexpected trail\n\t\t\t\t\t\t\t\tif ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t} else if (i + 1 === length) {\n\t\t\t\t\t\t\t\t// unpaired lead\n\t\t\t\t\t\t\t\tif ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// valid lead\n\t\t\t\t\t\t\tleadSurrogate = codePoint\n\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 2 leads in a row\n\t\t\t\t\t\tif (codePoint < 0xDC00) {\n\t\t\t\t\t\t\tif ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t\t\t\t\t\tleadSurrogate = codePoint\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// valid surrogate pair\n\t\t\t\t\t\tcodePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n\t\t\t\t\t} else if (leadSurrogate) {\n\t\t\t\t\t\t// valid bmp char, but last char was a lead\n\t\t\t\t\t\tif ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t\t\t\t\t}\n\n\t\t\t\t\tleadSurrogate = null\n\n\t\t\t\t\t// encode utf8\n\t\t\t\t\tif (codePoint < 0x80) {\n\t\t\t\t\t\tif ((units -= 1) < 0) break\n\t\t\t\t\t\tbytes.push(codePoint)\n\t\t\t\t\t} else if (codePoint < 0x800) {\n\t\t\t\t\t\tif ((units -= 2) < 0) break\n\t\t\t\t\t\tbytes.push(\n\t\t\t\t\t\t\tcodePoint >> 0x6 | 0xC0,\n\t\t\t\t\t\t\tcodePoint & 0x3F | 0x80\n\t\t\t\t\t\t)\n\t\t\t\t\t} else if (codePoint < 0x10000) {\n\t\t\t\t\t\tif ((units -= 3) < 0) break\n\t\t\t\t\t\tbytes.push(\n\t\t\t\t\t\t\tcodePoint >> 0xC | 0xE0,\n\t\t\t\t\t\t\tcodePoint >> 0x6 & 0x3F | 0x80,\n\t\t\t\t\t\t\tcodePoint & 0x3F | 0x80\n\t\t\t\t\t\t)\n\t\t\t\t\t} else if (codePoint < 0x110000) {\n\t\t\t\t\t\tif ((units -= 4) < 0) break\n\t\t\t\t\t\tbytes.push(\n\t\t\t\t\t\t\tcodePoint >> 0x12 | 0xF0,\n\t\t\t\t\t\t\tcodePoint >> 0xC & 0x3F | 0x80,\n\t\t\t\t\t\t\tcodePoint >> 0x6 & 0x3F | 0x80,\n\t\t\t\t\t\t\tcodePoint & 0x3F | 0x80\n\t\t\t\t\t\t)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Invalid code point')\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn bytes\n\t\t\t}\n\n\t\t\tfunction byteLength(string, encoding) {\n\t\t\t\tvar len = string.length\n\t\t\t\tvar mustMatch = (arguments.length > 2 && arguments[2] === true)\n\t\t\t\tif (!mustMatch && len === 0) return 0\n\n\t\t\t\t// Use a for loop to avoid recursion\n\t\t\t\tvar loweredCase = false\n\t\t\t\tfor (; ;) {\n\t\t\t\t\tswitch (encoding) {\n\t\t\t\t\t\tcase 'ascii':\n\t\t\t\t\t\tcase 'latin1':\n\t\t\t\t\t\tcase 'binary':\n\t\t\t\t\t\t\treturn len\n\t\t\t\t\t\tcase 'utf8':\n\t\t\t\t\t\tcase 'utf-8':\n\t\t\t\t\t\t\treturn utf8ToBytes(string).length\n\t\t\t\t\t\tcase 'ucs2':\n\t\t\t\t\t\tcase 'ucs-2':\n\t\t\t\t\t\tcase 'utf16le':\n\t\t\t\t\t\tcase 'utf-16le':\n\t\t\t\t\t\t\treturn len * 2\n\t\t\t\t\t\tcase 'hex':\n\t\t\t\t\t\t\treturn len >>> 1\n\t\t\t\t\t\tcase 'base64':\n\t\t\t\t\t\t\t// return base64ToBytes(string).length\n\t\t\t\t\t\t\tthrow new Error(\"byteLength: unsupport encoding: base64\")\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (loweredCase) {\n\t\t\t\t\t\t\t\treturn mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tencoding = ('' + encoding).toLowerCase()\n\t\t\t\t\t\t\tloweredCase = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction isEncoding(encoding) {\n\t\t\t\tswitch (String(encoding).toLowerCase()) {\n\t\t\t\t\tcase 'hex':\n\t\t\t\t\tcase 'utf8':\n\t\t\t\t\tcase 'utf-8':\n\t\t\t\t\tcase 'ascii':\n\t\t\t\t\tcase 'latin1':\n\t\t\t\t\tcase 'binary':\n\t\t\t\t\tcase 'base64':\n\t\t\t\t\tcase 'ucs2':\n\t\t\t\t\tcase 'ucs-2':\n\t\t\t\t\tcase 'utf16le':\n\t\t\t\t\tcase 'utf-16le':\n\t\t\t\t\t\treturn true\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar K_MAX_LENGTH = 0x7fffffff\n\t\t\tfunction createBuffer(length) {\n\t\t\t\tif (length > K_MAX_LENGTH) {\n\t\t\t\t\tthrow new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n\t\t\t\t}\n\t\t\t\t// Return an augmented `Uint8Array` instance\n\t\t\t\tvar buf = new Uint8Array(length)\n\t\t\t\treturn buf\n\t\t\t}\n\n\t\t\tif (typeof encoding !== 'string' || encoding === '') {\n\t\t\t\tencoding = 'utf8'\n\t\t\t}\n\n\t\t\tif (!isEncoding(encoding)) {\n\t\t\t\tthrow new TypeError('Unknown encoding: ' + encoding)\n\t\t\t}\n\n\t\t\tvar length = byteLength(str, encoding) | 0\n\t\t\tvar buf = createBuffer(length)\n\n\t\t\tvar actual = write(buf, str, encoding)\n\n\t\t\tif (actual !== length) {\n\t\t\t\t// Writing a hex string, for example, that contains invalid characters will\n\t\t\t\t// cause everything after the first invalid character to be ignored. (e.g.\n\t\t\t\t// 'abxxcd' will be treated as 'ab')\n\t\t\t\tbuf = buf.slice(0, actual as number)\n\t\t\t}\n\n\t\t\treturn buf\n\t\t}\n\n\t}\n\n\n}\n","namespace fsync {\n\n\texport let supportClassProguard: bool = true\n\texport const detectClassProguard = (name: string, cls: new () => object): void => {\n\t\tif (cls != null) {\n\t\t\tif (cls.name != name) {\n\t\t\t\tsupportClassProguard = false\n\t\t\t}\n\t\t}\n\t}\n\texport const setSupportClassProguard = (support: bool): void => {\n\t\tsupportClassProguard = supportClassProguard && support\n\t}\n\n\n\tclass _$ZAZ {\n\t}\n\tconst ZAZClsName = _$ZAZ.name\n\t// 检测内部类名混淆\n\tdetectClassProguard(\"_$ZAZ\", _$ZAZ)\n\n\t/**\n\t * 自定义类名反射\n\t * @param name \n\t */\n\texport function cname(name: string) {\n\t\treturn function <T>(cls: new () => T): any {\n\t\t\tif (!supportClassProguard) {\n\t\t\t\tObject.defineProperty(cls, \"name\", {\n\t\t\t\t\tvalue: name,\n\t\t\t\t\twritable: false,\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn cls\n\t\t}\n\t}\n\n\tlet uid = 0;\n\n\t/**\n\t * 自动录入唯一类名\n\t */\n\texport function cid<T>(cls: new () => T): new () => T {\n\t\tif (!supportClassProguard) {\n\t\t\tuid++;\n\t\t\tObject.defineProperty(cls, \"name\", {\n\t\t\t\tvalue: `cid${uid}n`,\n\t\t\t\twritable: false,\n\t\t\t})\n\t\t}\n\t\treturn cls\n\t}\n\n}\n","namespace fsync {\n\nexport function assert<T>(cond: T, tip: string): T {\n\tif (!cond) {\n\t\tthrow new Error(tip)\n\t}\n\treturn cond\n}\n\nexport function assert_true<T>(cond: T): T {\n\tif (!cond) {\n\t\tthrow new Error(TestHelper.UNMATCHED_RESULT)\n\t}\n\treturn cond\n}\n\nexport function assert_equal(a: any, b: any): void {\n\tif (a != b) {\n\t\tthrow new Error(TestHelper.UNMATCHED_RESULT + `: ${a} <- ${b}`)\n\t}\n}\n\nexport function shall_crash(f: Function): void {\n\tlet broken = false\n\ttry {\n\t\tf()\n\t} catch (e) {\n\t\tbroken = true\n\t}\n\tif (!broken) {\n\t\tthrow new Error(\"function shall crash\")\n\t}\n}\n\nexport class TestHelper {\n\tstatic UNMATCHED_RESULT = \"unmatched result\"\n}\n\nexport function testfunc(target: object, propName: string) {\n\tlet funRaw = target[propName] as Function\n\tlet className = target.constructor.name\n\ttarget[propName] = function (...args) {\n\t\ttry {\n\t\t\tconsole.log(\"\\n=================================\")\n\t\t\tconsole.log(`${className}-${propName} TESTING`)\n\t\t\tlet ret = funRaw.apply(this,args)\n\t\t\tconsole.log(`${className}-${propName} PASSED`)\n\t\t\tconsole.log(\"=================================\\n\")\n\t\t\treturn ret\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\tconsole.log(`${className}-${propName} FAILED`)\n\t\t\tconsole.log(\"=================================\\n\")\n\t\t}\n\t}\n\treturn target[propName]\n}\n\nexport function test_entry(desc:string,fun:()=>void){\n\tconsole.log(`==>> test entry<${desc}> BEGIN`)\n\tfun()\n\tconsole.log(`==<< test entry<${desc}> PASS`)\n}\n}","namespace fsync {\r\n\r\n\texport interface IClear {\r\n\t\tclear()\r\n\t}\r\n}\r\n","namespace fsync {\n\n\texport interface IClone {\n\t\tclone(): IClone\n\t}\n}\n","namespace fsync {\n\n\texport interface IMerge<T> {\n\t\tmergeFrom(target: T)\n\t}\n}\n","namespace fsync {\r\n\r\n\texport interface IRollback<T> extends IMerge<T>, IClone {\r\n\r\n\t}\r\n}\r\n","\nnamespace fsync {\n\texport class Intervals {\n\t\tstatic readonly inst = new Intervals().init()\n\t\tintervals: any[]\n\t\ttimeouts: any[]\n\t\tsw = { on: true }\n\n\t\tinit() {\n\t\t\tthis.intervals = []\n\t\t\tthis.timeouts = []\n\t\t\treturn this\n\t\t}\n\n\t\tsetInterval(call: Function, duration: number) {\n\t\t\tlet sw = this.sw\n\t\t\tthis.intervals.push(setInterval(() => {\n\t\t\t\tif (sw.on == false) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tcall()\n\t\t\t}, duration))\n\t\t}\n\n\t\tclearAllInterval() {\n\t\t\tthis.sw.on = false\n\t\t\tfor (let id of this.intervals) {\n\t\t\t\tclearInterval(id)\n\t\t\t}\n\t\t\tthis.sw = { on: true }\n\t\t\tthis.intervals.length = 0\n\t\t}\n\n\t\tsetTimeout(call: Function, duration: number) {\n\t\t\tthis.timeouts.push(setTimeout(call, duration))\n\t\t}\n\n\t\tclearAllTimeout() {\n\t\t\tfor (let id of this.timeouts) {\n\t\t\t\tclearTimeout(id)\n\t\t\t}\n\t\t\tthis.timeouts.length = 0\n\t\t}\n\n\t\tclearAllTimer() {\n\t\t\tthis.clearAllInterval()\n\t\t\tthis.clearAllTimeout()\n\t\t}\n\t}\n}","namespace fsync {\n\n/**\n * 反转 MyPromise\n * - 外部调用 success时相当于调用了 resolve\n * - 外部调用 fail 时，相当于调用了 reject\n * @param T - resolve 参数类型\n * @param F - reject 参数类型\n */\nexport class YmPromise<T, F = any> {\n\t/**\n\t * @noSelf\n\t */\n\tsuccess: Function\n\t/**\n\t * @noSelf\n\t */\n\tfail: Function\n\tpromise: Promise<T>\n\tconstructor(params?: any) {\n\t\tthis.init(params)\n\t}\n\n\tprotected init(params?: any) {\n\t\tthis.promise = new Promise((resolve, reject) => {\n\t\t\tthis.success = resolve\n\t\t\tthis.fail = reject\n\t\t})\n\t}\n}\n\nexport class RPromise<T, F = any> extends YmPromise<T, F>{\n\t/**\n\t* @noSelf\n\t*/\n\tsuccess: (value: T) => void\n\t/**\n\t* @noSelf\n\t*/\n\tfail: (value?: F) => void\n}\n\n}","namespace slib {\n\texport type EventHandler<T> = (message: T) => void\n\texport class SimpleEvent<T> {\n\t\tprotected _callbacks: EventHandler<T>[] = []\n\t\ton(callback: EventHandler<T>) {\n\t\t\tthis._callbacks.push(callback)\n\t\t}\n\n\t\toff(callback: EventHandler<T>) {\n\t\t\t// this._callbacks.remove(callback)\n\t\t\tlang.helper.ArrayHelper.remove(this._callbacks, callback)\n\t\t}\n\n\t\temit(value: T) {\n\t\t\tthis._callbacks.concat().forEach((callback) => {\n\t\t\t\tcallback(value)\n\t\t\t})\n\t\t}\n\t}\n\n\texport interface ISEventInput<T> {\n\t\temit(key: string, value: T)\n\t}\n\n\texport interface ISEventOutput<T> {\n\t\ton(key: string, callback: EventHandler<T>)\n\t\toff(key: string, callback: EventHandler<T>)\n\t}\n\n\texport class SEvent<T> implements ISEventInput<T>, ISEventOutput<T>{\n\t\tprotected _events: { [key: string]: SimpleEvent<T> } = Object.create(null)\n\n\t\ton(key: string, callback: EventHandler<T>) {\n\t\t\tif (!this._events[key]) {\n\t\t\t\tthis._events[key] = new SimpleEvent<T>()\n\t\t\t}\n\t\t\tconst event = this._events[key]\n\t\t\tif (event) {\n\t\t\t\tevent.on(callback)\n\t\t\t}\n\t\t}\n\n\t\tonce(key: string, callback: EventHandler<T>) {\n\t\t\tconst call = (evt) => {\n\t\t\t\tthis.off(key, call)\n\t\t\t\tcallback(evt)\n\t\t\t}\n\t\t\tthis.on(key, call)\n\t\t}\n\n\t\toff(key: string, callback: EventHandler<T>) {\n\t\t\tif (callback == undefined) {\n\t\t\t\tdelete this._events[key]\n\t\t\t} else {\n\t\t\t\tconst event = this._events[key]\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.off(callback)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\temit(key: string, value: T) {\n\t\t\tif (this._events[key]) {\n\t\t\t\tconst event = this._events[key]\n\t\t\t\tif (event) {\n\t\t\t\t\tevent.emit(value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","\r\n/// <reference path=\"../lang/ArrayHelper.ts\" />\r\n/// <reference path=\"../lang/ObjectUtils.ts\" />\r\n\r\nnamespace fsync.eds {\r\n\t/**\r\n\t * 每个对象都要有id\r\n\t */\r\n\texport interface IOID$ {\r\n\t\treadonly oid?: string\r\n\t}\r\n\texport interface IOID {\r\n\t\treadonly oid: string\r\n\t}\r\n\r\n}\r\n","\r\nnamespace fsync.eds {\r\n\texport type TDataClassID = string;\r\n\texport interface IDataClass$ extends IOID$ {\r\n\t\treadonly oid?: TDataClassID;\r\n\t\t/**\r\n\t\t * 类型名\r\n\t\t */\r\n\t\treadonly otype?: string\r\n\r\n\t\t/**\r\n\t\t * 是否自动gc释放\r\n\t\t */\r\n\t\tautoRelease?: bool\r\n\t}\r\n\texport interface IDataClass extends IOID {\r\n\t\treadonly oid: TDataClassID;\r\n\t\t/**\r\n\t\t * 类型名\r\n\t\t */\r\n\t\treadonly otype?: string\r\n\r\n\t\t/**\r\n\t\t * 是否自动gc释放\r\n\t\t */\r\n\t\tautoRelease?: bool\r\n\t}\r\n\texport class DataClass implements IDataClass$ {\r\n\t\treadonly oid?: TDataClassID;\r\n\t\t/**\r\n\t\t * 类型名\r\n\t\t */\r\n\t\treadonly otype?: string\r\n\t\t/**\r\n\t\t * 是否自动gc释放\r\n\t\t */\r\n\t\tautoRelease?: bool\r\n\r\n\t\tprotected dataManager?: DataManager\r\n\r\n\t\tinit?() {\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 数据无效,已释放\r\n\t\t */\r\n\t\tisNull() {\r\n\t\t\treturn !this.dataManager.existsData(this)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 数据有效\r\n\t\t */\r\n\t\tisNotNull() {\r\n\t\t\treturn this.dataManager.existsData(this)\r\n\t\t}\r\n\t}\r\n\r\n\texport class DataClassDef extends DataClass {\r\n\t\tt: new () => IDataClass$\r\n\t}\r\n\r\n\t// export const NullOID = EmptyTable()\r\n\texport const _NullData = new DataClassDef()\r\n\tObject.defineProperty(_NullData, \"oid\", {\r\n\t\tvalue: undefined,\r\n\t\twritable: false,\r\n\t\tenumerable: false,\r\n\t})\r\n\tObject.defineProperty(_NullData, 'otype', {\r\n\t\tvalue: \"NullData\",\r\n\t\twritable: false,\r\n\t\tenumerable: false,\r\n\t})\r\n\texport function NullData<T extends IDataClass$>(cls: new () => T): T {\r\n\t\treturn _NullData as any as T\r\n\t}\r\n\r\n\texport function NewData<T extends IDataClass$>(cls: new () => T): T {\r\n\t\tlet typeData = new DataClassDef()\r\n\t\ttypeData.t = cls\r\n\t\treturn typeData as any as T\r\n\t}\r\n\r\n}\r\n","\r\nnamespace fsync.eds {\r\n\texport type TFeatureGroupMap<T extends IDataClass$ = IDataClass$> = { [key: string]: T }\r\n\r\n\texport type TDataFeatureFunc = (data: IDataClass$) => boolean\r\n\texport interface IDataFeature<T extends IDataClass$ = IDataClass$> {\r\n\t\tname: string\r\n\t\tfilter?(data: T): boolean\r\n\r\n\t\tincludes?: IDataFeature<IDataClass$>[]\r\n\t\texcludes?: IDataFeature<IDataClass$>[]\r\n\t}\r\n\texport class DataFeature<T extends IDataClass$> implements IDataFeature<T> {\r\n\t\tname: string\r\n\t\tfilter?(data: T)\r\n\t\tincludes?: IDataFeature<any>[]\r\n\t\texcludes?: IDataFeature<any>[]\r\n\t}\r\n\r\n\tconst doFilter = function (filter: IDataFeature<IDataClass$>, data: IDataClass$) {\r\n\t\tlet b = true\r\n\r\n\t\tif (filter.filter) {\r\n\t\t\tb = b && filter.filter(data)\r\n\t\t}\r\n\t\tif (filter.includes) {\r\n\t\t\tfor (let include of filter.includes) {\r\n\t\t\t\tb = b && doFilter(include, data)\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (filter.excludes) {\r\n\t\t\tfor (let exclude of filter.excludes) {\r\n\t\t\t\tb = b && !doFilter(exclude, data)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn b\r\n\t}\r\n\r\n\texport class DataFeatureHelper {\r\n\t\tstatic doFilter = doFilter\r\n\t}\r\n}\r\n","\r\n/// <reference path=\"DataFeature.ts\" />\r\n\r\nnamespace fsync.eds {\r\n\r\n\tconst doFilter = DataFeatureHelper.doFilter\r\n\r\n\texport class DataContainer {\r\n\r\n\t\tclearEntities() {\r\n\t\t\tthis.init()\r\n\t\t}\r\n\t\tinit() {\r\n\t\t\tif (this.allDatas) {\r\n\t\t\t\tthis.allDatas.length = 0\r\n\t\t\t} else {\r\n\t\t\t\tthis.allDatas = []\r\n\t\t\t}\r\n\t\t\tthis.referRelationMap = EmptyTable()\r\n\t\t\tthis.dataMap = EmptyTable()\r\n\t\t\tthis.usingFeatures = EmptyTable()\r\n\t\t\tthis.featureCache = EmptyTable()\r\n\t\t\tthis.featureCacheMap = EmptyTable()\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tprotected allDatas: IDataClass$[]\r\n\t\tprotected dataMap: { [key: string]: IDataClass$ }\r\n\r\n\t\t/**\r\n\t\t * 对象引用关系表\r\n\t\t */\r\n\t\tprotected referRelationMap: { [key: string]: string[] }\r\n\r\n\t\t/**\r\n\t\t * 构建引用依赖表\r\n\t\t */\r\n\t\tbuildReferRelationMap() {\r\n\t\t\tconst referRelationMap = this.referRelationMap\r\n\t\t\tconst dataMap = this.dataMap\r\n\t\t\tthis.allDatas.forEach(data => {\r\n\t\t\t\tconst oid = data.oid\r\n\t\t\t\tif (referRelationMap[oid]) {\r\n\t\t\t\t\treferRelationMap[oid].length = 0\r\n\t\t\t\t} else {\r\n\t\t\t\t\treferRelationMap[oid] = []\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tthis.allDatas.forEach(data => {\r\n\t\t\t\tconst oid = data.oid\r\n\t\t\t\tfor (let key of Object.getOwnPropertyNames(data)) {\r\n\t\t\t\t\tif (key.startsWith(\"__\")) {\r\n\t\t\t\t\t\tlet testOid = data[key]\r\n\t\t\t\t\t\tif (dataMap[testOid]) {\r\n\t\t\t\t\t\t\treferRelationMap[testOid].push(oid)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * gc释放\r\n\t\t */\r\n\t\tcleanUnused() {\r\n\t\t\tconst referRelationMap = this.referRelationMap\r\n\t\t\tfor (let key in referRelationMap) {\r\n\t\t\t\tlet group = referRelationMap[key]\r\n\t\t\t\tif (group.length === 0) {\r\n\t\t\t\t\tlet data = this.getDataById(key)\r\n\t\t\t\t\tthis.deattach(data)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tclearDatas() {\r\n\t\t\tthis.init()\r\n\t\t}\r\n\r\n\t\tforEachDatas(call: (data: IDataClass$) => void) {\r\n\t\t\tthis.allDatas.forEach(call)\r\n\t\t}\r\n\r\n\t\texistsData(ecsdata: IDataClass$) {\r\n\t\t\treturn !!this.dataMap[ecsdata.oid]\r\n\t\t}\r\n\r\n\t\tgetDataById(oid: TDataClassID) {\r\n\t\t\treturn this.dataMap[oid]\r\n\t\t}\r\n\r\n\t\tattach(data: IDataClass$) {\r\n\t\t\tif (!this.dataMap[data.oid]) {\r\n\t\t\t\tthis.dataMap[data.oid] = data\r\n\t\t\t\tthis.allDatas.push(data)\r\n\r\n\t\t\t\tthis.presetDataFeature(data)\r\n\t\t\t}\r\n\t\t\treturn data\r\n\t\t}\r\n\r\n\t\tdeattach(data: IDataClass$) {\r\n\t\t\tlet key = data.oid\r\n\t\t\tlet dataMap = this.dataMap\r\n\t\t\tif (dataMap[key]) {\r\n\t\t\t\tlet data = dataMap[key]\r\n\r\n\t\t\t\tthis.cleanDataFeature(data)\r\n\r\n\t\t\t\t// this.allDatas.remove(data)\r\n\t\t\t\tArrayHelper.remove(this.allDatas, data)\r\n\r\n\t\t\t\tdelete dataMap[key]\r\n\t\t\t\tdelete data[\"dataManager\"]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 特征缓存数据\r\n\t\t */\r\n\t\tprotected featureCache: { [key: string]: IDataClass$[] }\r\n\t\tprotected featureCacheMap: { [key: string]: TFeatureGroupMap }\r\n\r\n\t\t/**\r\n\t\t * 需要缓存的特征列表\r\n\t\t */\r\n\t\tprotected usingFeatures: { [key: string]: IDataFeature }\r\n\r\n\t\t/**\r\n\t\t * 更新该数据的特征组缓存\r\n\t\t * @param data\r\n\t\t */\r\n\t\tprotected presetDataFeature(data: IDataClass$) {\r\n\t\t\tconst featureCache = this.featureCache\r\n\t\t\tconst featureCacheMap = this.featureCacheMap\r\n\r\n\t\t\tfor (let key in this.usingFeatures) {\r\n\t\t\t\tlet feature = this.usingFeatures[key]\r\n\t\t\t\tlet b = doFilter(feature, data)\r\n\t\t\t\tif (b) {\r\n\t\t\t\t\tlet cacheKey = feature.name\r\n\t\t\t\t\tconst ls = featureCache[cacheKey]\r\n\t\t\t\t\tconst map = featureCacheMap[cacheKey]\r\n\t\t\t\t\tls.push(data)\r\n\t\t\t\t\tmap[data.oid] = data\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t/**\r\n\t\t * 清除该数据的特征组缓存\r\n\t\t * @param data \r\n\t\t */\r\n\t\tprotected cleanDataFeature(data: IDataClass$) {\r\n\t\t\tconst featureCache = this.featureCache\r\n\t\t\tconst featureCacheMap = this.featureCacheMap\r\n\r\n\t\t\tfor (let key in this.usingFeatures) {\r\n\t\t\t\tlet feature = this.usingFeatures[key]\r\n\t\t\t\tlet cacheKey = feature.name\r\n\t\t\t\tconst ls = featureCache[cacheKey]\r\n\t\t\t\tconst map = featureCacheMap[cacheKey]\r\n\t\t\t\t// ls.remove(data)\r\n\t\t\t\tArrayHelper.remove(ls, data)\r\n\t\t\t\tdelete map[data.oid]\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 构建特征群组\r\n\t\t */\r\n\t\tbuildFeatureGroups(features: IDataFeature[]): void {\r\n\t\t\tconst featureCache = this.featureCache\r\n\t\t\tconst featureCacheMap = this.featureCacheMap\r\n\r\n\t\t\t// 生成默认的类映射\r\n\t\t\tthis.forEachDatas((data) => {\r\n\t\t\t\tlet key = data.otype\r\n\t\t\t\tif (featureCache[key]) {\r\n\t\t\t\t\tfeatureCache[key].length = 0\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfeatureCache[key] = []\r\n\t\t\t\t}\r\n\t\t\t\tfeatureCacheMap[key] = EmptyTable()\r\n\t\t\t})\r\n\t\t\tthis.forEachDatas((data) => {\r\n\t\t\t\tlet key = data.otype\r\n\t\t\t\tfeatureCache[key].push(data)\r\n\t\t\t\tfeatureCacheMap[key][data.oid] = data\r\n\t\t\t})\r\n\r\n\t\t\t// 生成features的类映射\r\n\t\t\tfeatures.forEach(feature => {\r\n\t\t\t\tlet key = feature.name\r\n\t\t\t\tif (featureCache[key]) {\r\n\t\t\t\t\tfeatureCache[key].length = 0\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfeatureCache[key] = []\r\n\t\t\t\t}\r\n\t\t\t\tfeatureCacheMap[key] = EmptyTable()\r\n\t\t\t})\r\n\t\t\tfeatures.forEach(feature => {\r\n\t\t\t\tthis._buildFeatureGroup(feature, feature.name)\r\n\t\t\t})\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 添加需要持续缓存的特征\r\n\t\t * @param feature \r\n\t\t */\r\n\t\taddFeature(feature: IDataFeature) {\r\n\t\t\tthis.usingFeatures[feature.name] = feature\r\n\t\t}\r\n\r\n\t\tprotected _buildFeatureGroup(feature: IDataFeature, key?: string): IDataClass$[] {\r\n\r\n\t\t\tthis.addFeature(feature)\r\n\r\n\t\t\tconst featureCache = this.featureCache\r\n\t\t\tconst featureCacheMap = this.featureCacheMap\r\n\r\n\t\t\tconst ls = featureCache[key]\r\n\t\t\tconst map = featureCacheMap[key]\r\n\t\t\tthis.forEachDatas((data) => {\r\n\t\t\t\tlet b = doFilter(feature, data)\r\n\t\t\t\tif (b) {\r\n\t\t\t\t\tls.push(data)\r\n\t\t\t\t\tmap[data.oid] = data\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\treturn ls\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 构建特征组\r\n\t\t * @param feature \r\n\t\t * @param key \r\n\t\t */\r\n\t\tbuildFeatureGroup(feature: IDataFeature, key?: string): IDataClass$[] {\r\n\t\t\tconst featureCache = this.featureCache\r\n\t\t\tconst featureCacheMap = this.featureCacheMap\r\n\r\n\t\t\tkey = key || feature.name\r\n\t\t\tif (featureCache[key]) {\r\n\t\t\t\tfeatureCache[key].length = 0\r\n\t\t\t} else {\r\n\t\t\t\tfeatureCache[key] = []\r\n\t\t\t}\r\n\t\t\tfeatureCacheMap[key] = EmptyTable()\r\n\r\n\t\t\tconst group = this._buildFeatureGroup(feature, key)\r\n\t\t\treturn group\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 添加特征组\r\n\t\t * @param cacheKey \r\n\t\t * @param validGroup \r\n\t\t * @param validGroupMap \r\n\t\t */\r\n\t\taddFeatureGroup(cacheKey: string, validGroup: any[], validGroupMap: any): void {\r\n\t\t\tthis.featureCache[cacheKey] = validGroup\r\n\t\t\tthis.featureCacheMap[cacheKey] = validGroupMap\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 是否存在特征组\r\n\t\t * @param key \r\n\t\t */\r\n\t\texistFeatureGroup(key: string): bool {\r\n\t\t\treturn !!this.featureCache[key]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取特征组\r\n\t\t * @param name \r\n\t\t */\r\n\t\tgetFeatureGroupByName<T extends IDataClass$ = IDataClass$>(name: string): T[] | undefined {\r\n\t\t\tlet group = this.featureCache[name]\r\n\t\t\treturn group as T[]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取类型所属特征组\r\n\t\t * @param cls \r\n\t\t */\r\n\t\tgetTypeFeatureGroup<T extends IDataClass$>(cls: new () => T): T[] | undefined {\r\n\t\t\tlet group = this.getFeatureGroupByName(cls.name)\r\n\t\t\tif (group == null) {\r\n\t\t\t\tconst typeFeature: IDataFeature = {\r\n\t\t\t\t\tname: cls.name,\r\n\t\t\t\t\tfilter: (data) => data instanceof cls,\r\n\t\t\t\t}\r\n\t\t\t\tgroup = this.buildFeatureGroup(typeFeature)\r\n\t\t\t}\r\n\t\t\treturn group as T[]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取特征组\r\n\t\t * @param feature \r\n\t\t */\r\n\t\tgetFeatureGroup<T extends IDataClass$>(feature: IDataFeature<T>): T[] | undefined {\r\n\t\t\tlet group = this.featureCache[feature.name]\r\n\t\t\treturn group as T[]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取特征组\r\n\t\t * @param feature \r\n\t\t */\r\n\t\tgetFeatureGroupMap<T extends IDataClass$>(feature: IDataFeature<T>): TFeatureGroupMap<T> {\r\n\t\t\tlet map = this.featureCacheMap[feature.name]\r\n\t\t\treturn map as TFeatureGroupMap<T>\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 按特征组移除所有对象\r\n\t\t * @param feature\r\n\t\t */\r\n\t\tdeattachFeatureGroup(name: string): IDataClass$[] | undefined {\r\n\t\t\tlet group = this.featureCache[name]\r\n\t\t\tif (group) {\r\n\t\t\t\tgroup.forEach(data => {\r\n\t\t\t\t\tthis.deattach(data)\r\n\t\t\t\t})\r\n\t\t\t\tdelete this.featureCache[name]\r\n\t\t\t\tdelete this.featureCacheMap[name]\r\n\t\t\t}\r\n\t\t\treturn group\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\n/// <reference path=\"DataFeature.ts\" />\r\n\r\nnamespace fsync.eds {\r\n\r\n\texport class DataManager implements IOID$ {\r\n\r\n\t\tprivate static _IdAcc = 0\r\n\r\n\t\toid: string\r\n\t\tname: string\r\n\r\n\t\tprotected dataContainer: DataContainer\r\n\t\tdirtyManager: DirtyManager\r\n\r\n\t\tutils: FrameSyncUtils\r\n\r\n\t\tconstructor() {\r\n\t\t\tthis.oid = `DataManager_${DataManager._IdAcc++}`\r\n\t\t}\r\n\r\n\t\tinit(utils: FrameSyncUtils) {\r\n\t\t\tthis.dataContainer = new DataContainer().init()\r\n\t\t\tthis.dirtyManager = new DirtyManager().init()\r\n\t\t\tthis.utils = utils\r\n\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tclearDatas() {\r\n\t\t\tthis.dirtyManager.clearFlags()\r\n\t\t\tthis.dataContainer.clearEntities()\r\n\t\t}\r\n\r\n\t\texistsData(ecsdata: IDataClass$) {\r\n\t\t\treturn this.dataContainer.existsData(ecsdata)\r\n\t\t}\r\n\r\n\r\n\t\tgetDataById<T extends IDataClass$>(oid: TDataClassID): T {\r\n\t\t\treturn this.dataContainer.getDataById(oid) as T\r\n\t\t}\r\n\r\n\t\t//#region 用于合并\r\n\t\tprotected overwriteData(ecsdata: IDataClass$, dataManager: DataManager) {\r\n\t\t\tlet data = this.getDataById(ecsdata.oid)\r\n\t\t\tMergeECSData(ecsdata, data, this)\r\n\t\t}\r\n\r\n\t\tprotected removeData(ecsdata: IDataClass$) {\r\n\t\t\tif ((ecsdata as IClear).clear) {\r\n\t\t\t\t(ecsdata as IClear).clear()\r\n\t\t\t}\r\n\t\t\tthis.deattachData(ecsdata)\r\n\t\t}\r\n\r\n\t\tprotected cloneData(ecsdata: IDataClass$, dataManager: DataManager): IDataClass$ {\r\n\t\t\tlet copyed = CloneECSData(ecsdata, this)\r\n\t\t\tthis.attachData(copyed)\r\n\t\t\treturn copyed\r\n\t\t}\r\n\t\t//#endregion\r\n\r\n\t\t/**\r\n\t\t * 创建查询器\r\n\t\t */\r\n\t\tquery(): DataQuery {\r\n\t\t\tlet ret = new DataQuery()\r\n\t\t\tret.init(this)\r\n\t\t\treturn ret\r\n\t\t}\r\n\r\n\t\tbuildReferRelationMap() {\r\n\t\t\tthis.dataContainer.buildReferRelationMap()\r\n\t\t}\r\n\r\n\t\taddData<T extends IDataClass$>(cls: new () => T): T {\r\n\t\t\tlet data = new cls()\r\n\t\t\tDecoECSDataClass(data, this)\r\n\t\t\tthis.dirtyManager.markDirty(data)\r\n\t\t\tthis.dataContainer.attach(data)\r\n\t\t\treturn data\r\n\t\t}\r\n\r\n\t\tdeattachDatas<T extends IDataClass$>(cls: new () => T): void {\r\n\t\t\tconst dirtyManager = this.dirtyManager\r\n\t\t\tlet group = this.dataContainer.deattachFeatureGroup(cls.name) || []\r\n\t\t\tgroup.forEach(data => {\r\n\t\t\t\tdirtyManager.markDirty(data)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tdeattachData<T extends IDataClass$>(data: T): void {\r\n\t\t\tthis.dirtyManager.markDirty(data)\r\n\t\t\tthis.dataContainer.deattach(data)\r\n\t\t}\r\n\r\n\t\tattachData<T extends IDataClass$>(data: T): T {\r\n\t\t\tDecoECSDataClass(data, this)\r\n\t\t\tthis.dataContainer.attach(data) as T\r\n\t\t\tthis.dirtyManager.markDirty(data)\r\n\t\t\treturn data\r\n\t\t}\r\n\r\n\t\tbuildFeatureGroups(features: IDataFeature[]): void {\r\n\t\t\treturn this.dataContainer.buildFeatureGroups(features)\r\n\t\t}\r\n\r\n\t\tbuildFeatureGroup(feature: IDataFeature, key?: string): IDataClass$[] {\r\n\t\t\treturn this.dataContainer.buildFeatureGroup(feature, key)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 移除特征组\r\n\t\t * @param feature\r\n\t\t */\r\n\t\tdeattachFeatureGroup<T extends IDataClass$ = IDataClass$>(feature: IDataFeature<T>): T[] {\r\n\t\t\tlet group = this.dataContainer.deattachFeatureGroup(feature.name)\r\n\t\t\treturn (group || []) as T[]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 按类型取\r\n\t\t * @param cls \r\n\t\t */\r\n\t\tgetTypeFeatureGroup<T extends IDataClass$>(cls: new () => T): T[] {\r\n\t\t\treturn this.dataContainer.getTypeFeatureGroup(cls) as T[]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 按feature名称取\r\n\t\t * @param name \r\n\t\t */\r\n\t\tgetFeatureGroupByName<T extends IDataClass$ = IDataClass$>(name: string): T[] {\r\n\t\t\treturn this.dataContainer.getFeatureGroupByName(name) || [] as T[]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取特征组\r\n\t\t * @param feature \r\n\t\t */\r\n\t\tgetFeatureGroup<T extends IDataClass$>(feature: IDataFeature<T>): T[] {\r\n\t\t\tlet group = this.dataContainer.getFeatureGroup(feature)\r\n\t\t\treturn group || [] as T[]\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取特征组\r\n\t\t * @param feature \r\n\t\t */\r\n\t\tgetFeatureGroupMap<T extends IDataClass$>(feature: IDataFeature<T>): TFeatureGroupMap<T> {\r\n\t\t\tlet map = this.dataContainer.getFeatureGroupMap(feature)\r\n\t\t\treturn map as TFeatureGroupMap<T>\r\n\t\t}\r\n\r\n\t\tforEachWithFeatures(features: IDataFeature[], call: (data: IDataClass$) => any, cacheKey?: string): void {\r\n\t\t\tif (!call) {\r\n\t\t\t\tcall = EmptyCall\r\n\t\t\t}\r\n\r\n\t\t\tconst dataContainer = this.dataContainer\r\n\r\n\t\t\t/**\r\n\t\t\t * 先检查是否已构建缓存\r\n\t\t\t */\r\n\t\t\tlet directGroup = dataContainer.getFeatureGroupByName(cacheKey)\r\n\t\t\tif (directGroup) {\r\n\t\t\t\tfor (let data of directGroup) {\r\n\t\t\t\t\tif (call(data)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tlet minFeature = ArrayHelper.min(features, (feature) => {\r\n\t\t\t\treturn this.getFeatureGroup(feature).length\r\n\t\t\t})\r\n\r\n\t\t\tif (minFeature) {\r\n\t\t\t\tlet index = features.indexOf(minFeature)\r\n\t\t\t\tlet maps = features.map(feature => {\r\n\t\t\t\t\treturn this.getFeatureGroupMap(feature)\r\n\t\t\t\t})\r\n\t\t\t\t// maps.removeAt(index)\r\n\t\t\t\tmaps.splice(index, 1)\r\n\r\n\r\n\t\t\t\tif (cacheKey) {\r\n\t\t\t\t\tvar validGroupMap = EmptyTable()\r\n\t\t\t\t\tvar validGroup = []\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet group = this.getFeatureGroup(minFeature)\r\n\t\t\t\tlet isContinue = true\r\n\t\t\t\tfor (let data of group) {\r\n\t\t\t\t\tlet isMatched = true\r\n\t\t\t\t\tfor (let map of maps) {\r\n\t\t\t\t\t\tif (!map[data.oid]) {\r\n\t\t\t\t\t\t\tisMatched = false\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (isMatched) {\r\n\t\t\t\t\t\tif (cacheKey) {\r\n\t\t\t\t\t\t\tvalidGroup.push(data)\r\n\t\t\t\t\t\t\tvalidGroupMap[data.oid] = data\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (isContinue) {\r\n\t\t\t\t\t\t\tif (call(data)) {\r\n\t\t\t\t\t\t\t\tisContinue = false\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cacheKey) {\r\n\t\t\t\t\tdataContainer.addFeatureGroup(cacheKey, validGroup, validGroupMap)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\nnamespace fsync.eds {\r\n\texport interface IDataQuery {\r\n\t\tforEach(call: (entity: IDataClass$) => any): IDataQuery\r\n\t\ttoArray(): IDataClass$[]\r\n\t\tfirst(): IDataClass$\r\n\t\tcount(): number\r\n\t}\r\n\r\n\texport class DataQuery implements IOID$, IDataQuery {\r\n\t\toid: string;\r\n\r\n\t\tdataManager: DataManager\r\n\r\n\t\tprotected filter: IDataFeature\r\n\r\n\t\tinit(dataManager: DataManager) {\r\n\r\n\t\t\tthis.dataManager = dataManager\r\n\t\t\tthis.filter = {\r\n\t\t\t\tname: \"\",\r\n\t\t\t\tincludes: [],\r\n\t\t\t}\r\n\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\twith(feature: IDataFeature) {\r\n\t\t\tthis.filter.includes.push(feature)\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tprotected enableCache: boolean = true\r\n\t\twithCache(enable: boolean) {\r\n\t\t\tthis.enableCache = enable\r\n\t\t}\r\n\r\n\t\tforEach(call: (data: IDataClass$) => any): DataQuery {\r\n\t\t\tlet cacheKey: string = null\r\n\t\t\tif (this.enableCache) {\r\n\t\t\t\tcacheKey = this.filter.includes.map(feature => feature.name).join(\"_+_\")\r\n\t\t\t}\r\n\t\t\tthis.dataManager.forEachWithFeatures(this.filter.includes, call, cacheKey)\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\ttoArray(): IDataClass$[] {\r\n\t\t\tlet array: IDataClass$[] = []\r\n\t\t\tthis.forEach((data) => {\r\n\t\t\t\tarray.push(data)\r\n\t\t\t})\r\n\t\t\treturn array\r\n\t\t}\r\n\t\tfirst(): IDataClass$ {\r\n\t\t\tlet first: IDataClass$ = null\r\n\t\t\tthis.forEach((data) => {\r\n\t\t\t\tfirst = data\r\n\t\t\t\treturn first\r\n\t\t\t})\r\n\t\t\treturn first\r\n\t\t}\r\n\t\tcount(): number {\r\n\t\t\tlet count = 0\r\n\t\t\tthis.forEach((data) => {\r\n\t\t\t\t++count\r\n\t\t\t})\r\n\t\t\treturn count\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","\r\n\r\nnamespace fsync.eds {\r\n\r\n\tfunction buildGetSet(target: Object, property: string, dataManager: DataManager) {\r\n\t\tconst value0 = target[property]\r\n\t\tconst hiddenProp = \"__\" + property + \"__\"\r\n\r\n\t\tdelete target[property]\r\n\t\tif (!(value0 instanceof DataClassDef)) {\r\n\t\t\ttarget[hiddenProp] = value0\r\n\t\t\tObject.defineProperty(target, property, {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\treturn this[hiddenProp]\r\n\t\t\t\t},\r\n\t\t\t\tset: function (value) {\r\n\t\t\t\t\tlet desc = Object.getOwnPropertyDescriptor(this, hiddenProp)\r\n\t\t\t\t\tif (!desc.writable) {\r\n\t\t\t\t\t\tthrow new Error(\"cannot set value to a prop not writable\")\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this[hiddenProp] != value) {\r\n\t\t\t\t\t\tthis[hiddenProp] = value\r\n\t\t\t\t\t\tthis.dataManager.dirtyManager.markDirty(this)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (value0 == _NullData) {\r\n\t\t\t\ttarget[hiddenProp] = \"\"\r\n\t\t\t} else {\r\n\t\t\t\tlet ctype = value0.t\r\n\t\t\t\tlet subData = dataManager.addData(ctype)\r\n\t\t\t\ttarget[hiddenProp] = subData.oid\r\n\t\t\t}\r\n\t\t\tObject.defineProperty(target, property, {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\tlet oid = this[hiddenProp]\r\n\t\t\t\t\tlet data = this.dataManager.getDataById(oid)\r\n\t\t\t\t\treturn data\r\n\t\t\t\t},\r\n\t\t\t\tset: function (value) {\r\n\t\t\t\t\tlet targetOid = value.oid\r\n\t\t\t\t\tif (this[hiddenProp] != targetOid) {\r\n\t\t\t\t\t\tthis[hiddenProp] = targetOid\r\n\t\t\t\t\t\tthis.dataManager.dirtyManager.markDirty(this)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\texport function DefindECSDataMetaValue(data: IDataClass$, dataManager: DataManager) {\r\n\t\tlet uidTool = dataManager.utils.uidTool\r\n\r\n\t\tconst typeName = data[\"constructor\"].name\r\n\t\tObject.defineProperty(data, 'otype', {\r\n\t\t\tvalue: typeName,\r\n\t\t\twritable: false,\r\n\t\t\tenumerable: false,\r\n\t\t})\r\n\t\tObject.defineProperty(data, 'oid', {\r\n\t\t\tvalue: uidTool.genTypedId(typeName),\r\n\t\t\twritable: false,\r\n\t\t\tenumerable: false,\r\n\t\t})\r\n\t\tObject.defineProperty(data, 'dataManager', {\r\n\t\t\tvalue: dataManager,\r\n\t\t\twritable: false,\r\n\t\t\tenumerable: false,\r\n\t\t})\r\n\t}\r\n\r\n\texport function DecoECSDataClass(data: IDataClass$, dataManager: DataManager) {\r\n\t\tif (data.oid != null) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tfor (let key in data) {\r\n\t\t\tif (data.hasOwnProperty(key)) {\r\n\t\t\t\tbuildGetSet(data, key, dataManager);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tDefindECSDataMetaValue(data, dataManager)\r\n\t}\r\n\r\n\t/**\r\n\t * 合并 ecs 数据: ecsdata -> copy\r\n\t * @param ecsdata \r\n\t * @param copy \r\n\t * @param dataManager \r\n\t */\r\n\texport function MergeECSData(ecsdata: IDataClass$, copy: IDataClass$, dataManager: DataManager): void {\r\n\r\n\t\tif ((copy as IMerge<any>).mergeFrom) {\r\n\t\t\t// 如果支持 自带 merge, 那么优先用自带merge\r\n\t\t\t(copy as IMerge<any>).mergeFrom(ecsdata)\r\n\t\t} else {\r\n\t\t\t// 复制属性值\r\n\t\t\tfor (let key in ecsdata) {\r\n\t\t\t\tconst data = ecsdata[key]\r\n\t\t\t\tif (typeof (data) == \"object\" && data != null) {\r\n\t\t\t\t\tif ((data as IMerge<any>).mergeFrom\r\n\t\t\t\t\t\t&& (!!copy[key])\r\n\t\t\t\t\t\t&& Object.getPrototypeOf(copy[key]) == Object.getPrototypeOf(data)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t(copy[key] as IMerge<any>).mergeFrom(data);\r\n\t\t\t\t\t} else if ((data as IClone).clone != undefined) {\r\n\t\t\t\t\t\tconst copyAttrValue = copy[key] = (data as IClone).clone() as IDataClass$\r\n\t\t\t\t\t\tDefindECSDataMetaValue(copyAttrValue, dataManager)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (data instanceof Array) {\r\n\t\t\t\t\t\t\t// 仅简单支持基础类型数组复制\r\n\t\t\t\t\t\t\tcopy[key] = [...data]\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(\"unsupport data type to clone\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcopy[key] = data\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (copy.oid == null) {\r\n\t\t\t\tfor (let key of Object.getOwnPropertyNames(ecsdata)) {\r\n\t\t\t\t\tif (!key.startsWith(\"__\") && key != \"dataManager\") {\r\n\t\t\t\t\t\tlet prop = Object.getOwnPropertyDescriptor(ecsdata, key)\r\n\t\t\t\t\t\tObject.defineProperty(copy, key, prop)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete copy[\"dataManager\"]\r\n\t\t\t\tObject.defineProperty(copy, 'dataManager', {\r\n\t\t\t\t\tvalue: dataManager,\r\n\t\t\t\t\twritable: false,\r\n\t\t\t\t\tenumerable: false,\r\n\t\t\t\t})\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// 相同继承\r\n\t\t\tObject.setPrototypeOf(copy, Object.getPrototypeOf(ecsdata))\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport function CloneECSData(ecsdata: IDataClass$, dataManager: DataManager): IDataClass$ {\r\n\t\tif ((ecsdata as IClone).clone) {\r\n\t\t\t// 如果支持 自带 clone, 那么优先用自带clone\r\n\t\t\tlet copy = (ecsdata as IClone).clone() as IDataClass$\r\n\t\t\treturn copy\r\n\t\t} else {\r\n\t\t\tlet copy: IDataClass$ = {\r\n\t\t\t\t// oid: ecsdata.oid,\r\n\t\t\t\t// otype: ecsdata.otype,\r\n\t\t\t}\r\n\r\n\t\t\tMergeECSData(ecsdata, copy, dataManager)\r\n\r\n\t\t\treturn copy\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","\r\nnamespace fsync.eds {\r\n\r\n\texport class DirtyManager {\r\n\t\tprotected dirtyDatas: STMap<IDataClass$>\r\n\r\n\t\tinit() {\r\n\t\t\tthis.dirtyDatas = EmptyTable()\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tisDirty(data: IDataClass$): bool {\r\n\t\t\treturn this.dirtyDatas[data.oid] != null\r\n\t\t}\r\n\r\n\t\tmarkDirty(data: IDataClass$) {\r\n\t\t\tthis.dirtyDatas[data.oid] = data\r\n\t\t}\r\n\r\n\t\tforEachDirtyEntities(call: (data: IDataClass$) => void) {\r\n\t\t\tif (call == null) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tconst dirtyDatas = this.dirtyDatas\r\n\t\t\tfor (let key in dirtyDatas) {\r\n\t\t\t\tlet data = dirtyDatas[key]\r\n\t\t\t\tassert(data != null, \"ecs data should not be null\")\r\n\t\t\t\tcall(data)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tclearFlags() {\r\n\t\t\tthis.init()\r\n\t\t}\r\n\t}\r\n}\r\n","namespace fsync {\n\n\texport function IsArrayEqual(arr1: number[], arr2: number[]) {\n\t\tfor (let i in arr1) {\n\t\t\tif (arr2[i] !== arr1[i]) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n}\n","namespace fsync {\n\n\texport type ComponentID = string\n\texport type ComponentType = string\n\n\texport class ComponentHelper {\n\t\tstatic getIdentity(comp: IComponent): ComponentID {\n\t\t\treturn comp[\"__ecs_cid\"]\n\t\t}\n\n\t\tstatic getType(comp: IComponent): ComponentType {\n\t\t\treturn comp['__ecs_ctype']\n\t\t}\n\n\t\tstatic isTypeOf(comp: IComponent, cls: new () => IComponent) {\n\t\t\treturn comp['__ecs_ctype'] == cls.name\n\t\t}\n\n\t}\n\n\t/**\n\t * 所有 Component 需要实现 IComponent。\n\t * Component 的所有成员必须是基本类型或者实现 IClone 接口的对象，否则数据回滚会报错。\n\t * Component 不能用 `__ecs_cid` 或者 `__ecs_ctype` 来命名成员\n\t */\n\texport interface IComponent {\n\t}\n\n\texport type TClass<T> = new () => T\n\texport type TComponent = new () => fsync.IComponent\n\n}","namespace fsync {\n\n}","namespace fsync {\n\n\tconst _copyECSComponetAttrValue = function (data: any): any {\n\t\tif (typeof (data) == \"object\") {\n\t\t\tif ((data as IClone).clone != undefined) {\n\t\t\t\treturn (data as IClone).clone()\n\t\t\t} else {\n\t\t\t\tif (data instanceof Array) {\n\t\t\t\t\t// 仅简单支持基础类型数组复制\n\t\t\t\t\treturn [...data]\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"unsupport data type to clone\")\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn data\n\t\t}\n\t}\n\n\texport const copyECSComponetAttrValue = _copyECSComponetAttrValue as <T>(data: T) => T\n\n\texport function DecoECSComponent(comp: IComponent, dirtyManager: EntityDirtyManager, uidTool: UniqueIDTool): void {\n\t\tif (comp[\"__ecs_cid\"] != null) {\n\t\t\treturn\n\t\t}\n\n\t\t// comp['__ecs_ctype'] = \"\"\n\n\t\tfunction buildGetSet(target: Object, property: string) {\n\t\t\tconst value0 = target[property]\n\t\t\tconst hiddenProp = \"__\" + property + \"__\"\n\n\t\t\tdelete target[property]\n\t\t\tObject.defineProperty(target, property, {\n\t\t\t\tget: function () {\n\t\t\t\t\treturn this[hiddenProp]\n\t\t\t\t},\n\t\t\t\tset: function (value) {\n\t\t\t\t\tlet desc = Object.getOwnPropertyDescriptor(this, hiddenProp)\n\t\t\t\t\tif (!desc.writable) {\n\t\t\t\t\t\tthrow new Error(\"cannot set value to a prop not writable\")\n\t\t\t\t\t}\n\t\t\t\t\tthis[hiddenProp] = value\n\t\t\t\t\tdirtyManager.markComponentDirty(this)\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcomp[hiddenProp] = value0\n\t\t}\n\n\t\tfor (let key in comp) {\n\t\t\tif (comp.hasOwnProperty(key)) {\n\t\t\t\tbuildGetSet(comp, key);\n\t\t\t}\n\t\t}\n\n\t\tconst typeName = comp[\"constructor\"].name\n\t\tObject.defineProperty(comp, '__ecs_ctype', {\n\t\t\tvalue: typeName,\n\t\t\twritable: false,\n\t\t\tenumerable: false,\n\t\t})\n\t\tObject.defineProperty(comp, '__ecs_cid', {\n\t\t\tvalue: uidTool.genTypedId(typeName),\n\t\t\twritable: false,\n\t\t\tenumerable: false,\n\t\t})\n\t\t// comp['__ecs_ctype'] = typeName\n\t\t// comp[\"__ecs_cid\"] = uidTool.genTypedId(typeName)\n\t}\n\n\texport function CloneECSComponet(comp: IComponent, dirtyManager: EntityDirtyManager): IComponent {\n\t\tlet copy: IComponent = {\n\t\t\tcomponentType: comp['__ecs_ctype'],\n\t\t}\n\n\t\t// 复制属性值\n\t\tfor (let key in comp) {\n\t\t\tconst data = comp[key]\n\t\t\tif (typeof (data) == \"object\") {\n\t\t\t\tif ((data as IClone).clone != undefined) {\n\t\t\t\t\tcopy[key] = (data as IClone).clone()\n\t\t\t\t} else {\n\t\t\t\t\tif (data instanceof Array) {\n\t\t\t\t\t\t// 仅简单支持基础类型数组复制\n\t\t\t\t\t\tcopy[key] = [...data]\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"unsupport data type to clone\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcopy[key] = data\n\t\t\t}\n\t\t}\n\n\t\t// 复制get、set\n\t\tfor (let key of Object.getOwnPropertyNames(comp)) {\n\t\t\tif (!key.startsWith(\"__\")) {\n\t\t\t\tconst hiddenProp = \"__\" + key + \"__\"\n\t\t\t\tObject.defineProperty(copy, key, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\treturn this[hiddenProp]\n\t\t\t\t\t},\n\t\t\t\t\tset: function (value) {\n\t\t\t\t\t\tthis[hiddenProp] = value\n\t\t\t\t\t\tdirtyManager.markComponentDirty(this)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// 相同继承\n\t\tObject.setPrototypeOf(copy, Object.getPrototypeOf(comp))\n\n\t\treturn copy\n\t}\n\n}","namespace fsync {\n\n\texport type EntityProtoID = number\n\texport type EntityID = string\n\n\texport const defaultEntityID: EntityID = \"\"\n\n\texport class Entity {\n\t\t// protected entityPrototype: EntityProtoID\n\t\t// protected entityIndex: number\n\t\tprotected eid: EntityID\n\n\t\tget identity(): EntityID {\n\t\t\treturn this.eid\n\t\t}\n\n\t\tclone(): Entity {\n\t\t\treturn this\n\t\t}\n\n\t\tstatic fromId(id: EntityID) {\n\t\t\tlet entity = new Entity()\n\t\t\tentity.eid = id\n\t\t\treturn entity\n\t\t}\n\t}\n\n}\n","namespace fsync {\n\n\texport class FrameSyncUtils {\n\t\t// static ls: FrameSyncUtils[] = []\n\n\t\trandom: FrameSyncRandom\n\t\ttimer: Timer\n\t\tuidTool: UniqueIDTool\n\n\t\tinit() {\n\t\t\t// FrameSyncUtils.ls.push(this)\n\t\t\tthis.random = new FrameSyncRandom()\n\t\t\tthis.random.init()\n\n\t\t\tthis.timer = new Timer()\n\t\t\tthis.timer.init()\n\n\t\t\tthis.uidTool = new UniqueIDTool()\n\t\t\tthis.uidTool.init()\n\t\t\treturn this\n\t\t}\n\n\t}\n\n}","/// <reference path=\"./FrameSyncUtils.ts\" />\n\nnamespace fsync {\n\n\texport type BasicTypes = string | number\n\texport type STMap<T> = { [key: string]: T }\n\n\t/**\n\t * 所有Entity 存储区域\n\t */\n\texport class EntitiesContainer {\n\t\t/**\n\t\t * entityId -> map<componentId,bool>\n\t\t */\n\t\tentityComponentMap: { [key: string]: { [key: string]: bool } }\n\t\t/**\n\t\t * entityId -> map<componentType,componentId>\n\t\t */\n\t\tentityProtoMap: { [key: string]: { [key: string]: ComponentID } }\n\t\t/**\n\t\t * componentId -> entityId\n\t\t */\n\t\tcomponentEntityMap: { [key: string]: EntityID }\n\t\t/**\n\t\t * entityId -> entity\n\t\t */\n\t\tentityMap: { [key: string]: Entity }\n\t\t/**\n\t\t * componentId -> component\n\t\t */\n\t\tcomponentMap: { [key: string]: IComponent }\n\n\t\tinit() {\n\t\t\t// entityId -> map<componentId,bool>\n\t\t\tthis.entityComponentMap = EmptyTable()\n\t\t\tthis.entityProtoMap = EmptyTable()\n\t\t\t// componentId -> entityId\n\t\t\tthis.componentEntityMap = EmptyTable()\n\t\t\t// entityId -> entity\n\t\t\tthis.entityMap = EmptyTable()\n\t\t\t// componentId -> component\n\t\t\tthis.componentMap = EmptyTable()\n\t\t\treturn this\n\t\t}\n\n\t\tupdateEntityProto(entity: Entity) {\n\t\t\tlet proto = EmptyTable()\n\t\t\tthis.entityProtoMap[entity.identity] = proto\n\n\t\t\tlet comps = this.entityComponentMap[entity.identity]\n\t\t\tif (comps != null) {\n\t\t\t\tfor (let key of Object.keys(comps)) {\n\t\t\t\t\tlet comp = this.componentMap[key]\n\t\t\t\t\tlet t = ComponentHelper.getType(comp)\n\t\t\t\t\tproto[t] = ComponentHelper.getIdentity(comp) || true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcleanEntityProtoMap() {\n\t\t\tlet newMap: { [key: string]: { [key: string]: string } } = EmptyTable()\n\t\t\tconst entityProtoMap = this.entityProtoMap\n\t\t\tfor (let key in entityProtoMap) {\n\t\t\t\tif (this.entityMap[key]) {\n\t\t\t\t\tnewMap[key] = entityProtoMap[key]\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.entityProtoMap = newMap\n\t\t}\n\n\t\taddComponent(entity: Entity, comp: IComponent) {\n\t\t\tconst compId = ComponentHelper.getIdentity(comp)\n\t\t\tif (this.componentMap[compId] != null) {\n\t\t\t\tassert(false, \"comp duplicate add\")\n\t\t\t}\n\t\t\tif (this.entityMap[entity.identity] == null) {\n\t\t\t\tassert(false, \"entity not exist\")\n\t\t\t}\n\t\t\tthis.entityComponentMap[entity.identity][compId] = true\n\t\t\tthis.componentEntityMap[compId] = entity.identity\n\t\t\tthis.componentMap[compId] = comp\n\n\t\t\tthis.updateEntityProto(entity)\n\t\t}\n\n\t\tremoveComponentByType(entity: Entity, t: ComponentType): IComponent {\n\t\t\tlet compMap = this.entityComponentMap[entity.identity]\n\t\t\tfor (let key in compMap) {\n\t\t\t\tif (ComponentHelper.getType(this.componentMap[key]) == t) {\n\t\t\t\t\tlet comp = this.componentMap[key]\n\t\t\t\t\tdelete this.componentEntityMap[key]\n\t\t\t\t\tdelete this.componentMap[key]\n\t\t\t\t\tdelete compMap[key]\n\n\t\t\t\t\tthis.updateEntityProto(entity)\n\t\t\t\t\treturn comp\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null\n\t\t}\n\t\tremoveComponentsByType(entity: Entity, t: ComponentType) {\n\t\t\tlet compMap = this.entityComponentMap[entity.identity]\n\t\t\tlet removeList = []\n\t\t\tfor (let key in compMap) {\n\t\t\t\tif (ComponentHelper.getType(this.componentMap[key]) == t) {\n\t\t\t\t\tremoveList.push(key)\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let key of removeList) {\n\t\t\t\tdelete this.componentEntityMap[key]\n\t\t\t\tdelete this.componentMap[key]\n\t\t\t}\n\n\t\t\tthis.updateEntityProto(entity)\n\t\t}\n\t\tprotected _removeComponent(entity: Entity, comp: IComponent) {\n\t\t\tconst compId = ComponentHelper.getIdentity(comp)\n\t\t\tdelete this.componentEntityMap[compId]\n\t\t\tdelete this.componentMap[compId]\n\t\t\tdelete this.entityComponentMap[entity.identity][compId]\n\t\t}\n\t\tremoveComponent(entity: Entity, comp: IComponent) {\n\t\t\tthis._removeComponent(entity, comp)\n\t\t\tthis.updateEntityProto(entity)\n\t\t}\n\t\tremoveComponents(entity: Entity, comps: IComponent[]) {\n\t\t\tfor (let comp of comps) {\n\t\t\t\tthis._removeComponent(entity, comp)\n\t\t\t}\n\t\t\tthis.updateEntityProto(entity)\n\t\t}\n\n\t\tremoveAllComponents(entity: Entity) {\n\t\t\tlet compMap = this.entityComponentMap[entity.identity]\n\t\t\tfor (let key in compMap) {\n\t\t\t\tdelete this.componentEntityMap[key]\n\t\t\t\tdelete this.componentMap[key]\n\t\t\t}\n\t\t\tthis.entityComponentMap[entity.identity] = EmptyTable()\n\n\t\t\tthis.updateEntityProto(entity)\n\t\t}\n\n\t\taddEntity(entity: Entity) {\n\t\t\tif (this.entityMap[entity.identity] != null) {\n\t\t\t\tassert(false, \"entity duplicate add\")\n\t\t\t}\n\t\t\tthis.entityMap[entity.identity] = entity\n\t\t\tif (this.entityComponentMap[entity.identity] == null) {\n\t\t\t\tthis.entityComponentMap[entity.identity] = EmptyTable()\n\t\t\t}\n\n\t\t\tthis.updateEntityProto(entity)\n\t\t}\n\n\t\tgetEntityById(entityId: EntityID): Entity {\n\t\t\treturn this.entityMap[entityId]\n\t\t}\n\n\t\tremoveEntity(entity: Entity) {\n\t\t\tif (this.entityComponentMap[entity.identity] != null) {\n\t\t\t\tlet comps = this.entityComponentMap[entity.identity]\n\t\t\t\tfor (let compId in comps) {\n\t\t\t\t\tdelete this.componentEntityMap[compId]\n\t\t\t\t\tdelete this.componentMap[compId]\n\t\t\t\t}\n\t\t\t\tdelete this.entityComponentMap[entity.identity]\n\t\t\t}\n\t\t\tdelete this.entityMap[entity.identity]\n\n\t\t\tthis.updateEntityProto(entity)\n\t\t}\n\n\t\tgetComponentById(entity: Entity, compId: string): IComponent {\n\t\t\tlet compMap = this.entityComponentMap[entity.identity]\n\t\t\tif (compMap[compId]) {\n\t\t\t\treturn this.componentMap[compId]\n\t\t\t} else {\n\t\t\t\treturn undefined\n\t\t\t}\n\t\t}\n\n\t\tgetComponent(entity: Entity, componentType: ComponentType): IComponent {\n\t\t\t// let components = this.entityComponentMap[entity.identity]\n\t\t\t// let componentMap = this.componentMap\n\t\t\t// for (let key in components) {\n\t\t\t// \tif (ComponentHelper.getType(componentMap[key]) == componentType) {\n\t\t\t// \t\treturn componentMap[key]\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tlet componentMap = this.entityProtoMap[entity.identity]\n\t\t\tif (componentMap == null) {\n\t\t\t\treturn null\n\t\t\t}\n\t\t\tlet componentId = componentMap[componentType]\n\t\t\tlet components = this.entityComponentMap[entity.identity]\n\t\t\tif (components[componentId]) {\n\t\t\t\treturn this.componentMap[componentId]\n\t\t\t}\n\t\t\treturn null\n\t\t}\n\n\t\tgetEntityCount() {\n\t\t\treturn Object.keys(this.entityMap).length\n\t\t}\n\n\t\tgetComponentOwnerEntity(comp: IComponent): Entity {\n\t\t\tlet entityId = this.componentEntityMap[ComponentHelper.getIdentity(comp)]\n\t\t\tif (entityId != null) {\n\t\t\t\treturn this.entityMap[entityId]\n\t\t\t}\n\t\t\treturn null\n\t\t}\n\n\t\tgetComponents(entity: Entity): IComponent[] {\n\t\t\tlet theCompsMap = this.entityComponentMap[entity.identity]\n\t\t\tlet compsMap = this.componentMap\n\t\t\treturn Object.keys(theCompsMap).map(key => compsMap[key])\n\t\t}\n\n\t\tgetComponentsWithComponent(entity: Entity, t: new () => IComponent): IComponent[] {\n\t\t\tlet filterType = t.name\n\t\t\tlet theCompsMap = this.entityComponentMap[entity.identity]\n\t\t\tlet compsMap = this.componentMap\n\t\t\treturn Object.keys(theCompsMap).map(key => compsMap[key]).filter(comp => ComponentHelper.getType(comp) == filterType)\n\t\t}\n\n\t\tforEachEntities(componentTypes: ComponentType[], withoutComponentTypes: ComponentType[], call: (entity: Entity) => void | bool) {\n\t\t\tif (call == null) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfor (let key in this.entityMap) {\n\t\t\t\tlet comps = this.entityProtoMap[key]\n\t\t\t\t// let findKeys = '_' + Object.keys(comps).join('_') + '_'\n\t\t\t\t// 没有过滤项，则true\n\t\t\t\tlet matched = true\n\t\t\t\tfor (let ct of componentTypes) {\n\t\t\t\t\tif (!comps[ct]) {\n\t\t\t\t\t\t// if (findKeys.indexOf('_' + ct + '_') < 0) {\n\t\t\t\t\t\tmatched = false\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (matched) {\n\t\t\t\t\tfor (let ct of withoutComponentTypes) {\n\t\t\t\t\t\tif (comps[ct]) {\n\t\t\t\t\t\t\t// if (findKeys.indexOf('_' + ct + '_') < 0) {\n\t\t\t\t\t\t\tmatched = false\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (matched) {\n\t\t\t\t\tif (call(this.entityMap[key]) == true) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\texistsEntity(entity: Entity): bool {\n\t\t\treturn this.entityMap[entity.identity] != null\n\t\t}\n\n\t\tclearEntities() {\n\t\t\tthis.init()\n\t\t}\n\n\t}\n\n\texport class EntityDirtyManager {\n\t\tprotected dirtyComps: IComponent[]\n\t\tprotected dirtyEntities: STMap<Entity>\n\n\t\tinit() {\n\t\t\tthis.dirtyComps = []\n\t\t\tthis.dirtyEntities = EmptyTable()\n\t\t\treturn this\n\t\t}\n\n\t\tisEntityDirty(entity: Entity): bool {\n\t\t\treturn this.dirtyEntities[entity.identity] != null\n\t\t}\n\n\t\tisComponentDirty(comp: IComponent): bool {\n\t\t\treturn this.dirtyComps.indexOf(comp) >= 0\n\t\t}\n\n\t\tmarkComponentDirty(comp: IComponent) {\n\t\t\tthis.dirtyComps.push(comp)\n\t\t}\n\n\t\tmarkEntityDirty(entity: Entity) {\n\t\t\tthis.dirtyEntities[entity.identity] = entity\n\t\t}\n\n\t\tsortDirtyEntities(entityManager: EntityManager) {\n\t\t\tfor (let comp of this.dirtyComps) {\n\t\t\t\t// let entity = comp[\"__entity\"]\n\t\t\t\tlet entity = entityManager.getComponentOwnerEntity(comp)\n\t\t\t\tif (entity != null) {\n\t\t\t\t\tthis.dirtyEntities[entity.identity] = entity\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforEachDirtyEntities(call: (entity: Entity) => void) {\n\t\t\tif (call == null) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfor (let key in this.dirtyEntities) {\n\t\t\t\tlet entity = this.dirtyEntities[key]\n\t\t\t\tassert(entity != null, \"entity should not be null\")\n\t\t\t\tcall(entity)\n\t\t\t}\n\t\t}\n\n\t\tclearFlags() {\n\t\t\tthis.dirtyComps = []\n\t\t\tthis.dirtyEntities = EmptyTable()\n\t\t}\n\t}\n\n\n\tlet _EntityManagerIdAcc = 0\n\texport class EntityManager {\n\t\tname: string\n\t\tdirtyManager: EntityDirtyManager\n\t\tentityContainer: EntitiesContainer\n\t\tutils: FrameSyncUtils\n\t\tidentity: string\n\n\t\tconstructor() {\n\t\t\tthis.identity = `EntityManager_${_EntityManagerIdAcc++}`\n\t\t}\n\n\t\tinit(utils: FrameSyncUtils) {\n\t\t\tthis.dirtyManager = new EntityDirtyManager().init()\n\t\t\tthis.entityContainer = new EntitiesContainer().init()\n\t\t\tthis.utils = utils\n\t\t}\n\n\t\tclearDirtyManager() {\n\t\t\tthis.dirtyManager.clearFlags()\n\t\t}\n\n\t\tcreateQuery(): EntityQuery {\n\t\t\treturn new EntityQuery().init(this)\n\t\t}\n\n\t\tcreateEntity(tcomps: (new () => IComponent)[]): Entity {\n\t\t\tlet entityIdPrefix = tcomps.map(comp => comp.name).sort().join('_')\n\t\t\tconst entity = new Entity()\n\t\t\tentity[\"eid\"] = this.utils.uidTool.genTypedId(entityIdPrefix)\n\t\t\tthis.entityContainer.addEntity(entity)\n\n\t\t\tthis.addComponents(entity, tcomps)\n\n\t\t\treturn entity\n\t\t}\n\n\t\tprotected decoComponent(entity: Entity, comp: IComponent) {\n\t\t\tDecoECSComponent(comp, this.dirtyManager, this.utils.uidTool)\n\t\t\t// comp['__entity'] = entity\n\t\t}\n\n\t\tgetEntityById(entityId: EntityID): Entity {\n\t\t\treturn this.entityContainer.getEntityById(entityId)\n\t\t}\n\n\t\twrapEntityId(entityId: EntityID): Entity {\n\t\t\tlet entity = this.entityContainer.getEntityById(entityId)\n\t\t\tif (entity == null) {\n\t\t\t\tentity = Entity.fromId(entityId)\n\t\t\t}\n\t\t\treturn entity\n\t\t}\n\n\t\taddComponent<T extends IComponent = IComponent>(entity: Entity, tcomp: new () => T): T {\n\t\t\treturn this.attachComponent(entity, new tcomp())\n\t\t}\n\n\t\tattachComponent<T extends IComponent = IComponent>(entity: Entity, comp: T): T {\n\t\t\tthis.decoComponent(entity, comp)\n\t\t\tthis.entityContainer.addComponent(entity, comp)\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t\treturn comp\n\t\t}\n\n\t\taddComponents(entity: Entity, tcomps: (new () => IComponent)[]): IComponent[] {\n\t\t\tlet comps = tcomps.map(tcomp => new tcomp())\n\t\t\tthis.attachComponents(entity, comps)\n\t\t\treturn comps\n\t\t}\n\n\t\tattachComponents<T extends IComponent = IComponent>(entity: Entity, comps: T[]): T[] {\n\t\t\tfor (let comp of comps) {\n\t\t\t\tthis.decoComponent(entity, comp)\n\t\t\t\tthis.entityContainer.addComponent(entity, comp)\n\t\t\t}\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t\treturn comps\n\t\t}\n\n\t\tdettachComponent<T extends IComponent = IComponent>(entity: Entity, comp: T): T {\n\t\t\tthis.entityContainer.removeComponent(entity, comp)\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t\treturn comp\n\t\t}\n\n\t\tdettachComponents<T extends IComponent = IComponent>(entity: Entity, comps: T[]): T[] {\n\t\t\tthis.entityContainer.removeComponents(entity, comps)\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t\treturn comps\n\t\t}\n\n\t\tremoveComponent<T extends IComponent = IComponent>(entity: Entity, t: new () => T): T {\n\t\t\tconst ret = this.entityContainer.removeComponentByType(entity, t.name) as T\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t\treturn ret\n\t\t}\n\n\t\tremoveComponents<T extends IComponent = IComponent>(entity: Entity, t: new () => T): void {\n\t\t\tconst ret = this.entityContainer.removeComponentsByType(entity, t.name)\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t\treturn ret\n\t\t}\n\n\t\tremoveEntity(entity: Entity) {\n\t\t\tthis.entityContainer.removeEntity(entity)\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t}\n\n\t\t/**\n\t\t * 检查entity是否有非空的identity\n\t\t */\n\t\tisValidEntity(entity: Entity): bool {\n\t\t\treturn entity != null && entity.identity != null\n\t\t}\n\n\t\t/**\n\t\t * 检查entity是否存在mananger中\n\t\t * @param entity \n\t\t */\n\t\texistsEntity(entity: Entity): bool {\n\t\t\tif (entity != null) {\n\t\t\t\treturn this.entityContainer.existsEntity(entity)\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 是否相同实体\n\t\t * @param entity1 \n\t\t * @param entity2 \n\t\t */\n\t\tisSameEntity(entity1: Entity, entity2: Entity): bool {\n\t\t\treturn entity1.identity == entity2.identity\n\t\t}\n\n\t\t/**\n\t\t * 是否相同实体\n\t\t * @param entity1 \n\t\t * @param entity2 \n\t\t */\n\t\tisSameEntitySafe(entity1: Entity, entity2: Entity): bool {\n\t\t\tif (entity1 && entity2) {\n\t\t\t\treturn entity1.identity == entity2.identity\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\n\t\taddEntity(entity: Entity) {\n\t\t\tthis.entityContainer.addEntity(entity)\n\t\t\tthis.dirtyManager.markEntityDirty(entity)\n\t\t}\n\n\t\tgetComponents<T extends IComponent = IComponent>(entity: Entity, t: new () => IComponent = null): T[] {\n\t\t\tif (t == null) {\n\t\t\t\treturn this.entityContainer.getComponents(entity) as T[]\n\t\t\t} else {\n\t\t\t\treturn this.entityContainer.getComponentsWithComponent(entity, t) as T[]\n\t\t\t}\n\t\t}\n\n\t\tgetComponentById<T extends IComponent = IComponent>(entity: Entity, compId: string): T {\n\t\t\treturn this.entityContainer.getComponentById(entity, compId) as T\n\t\t}\n\n\t\tgetComponentByType<T extends IComponent = IComponent>(entity: Entity, componentType: string): T {\n\t\t\treturn this.entityContainer.getComponent(entity, componentType) as T\n\t\t}\n\n\t\tgetComponent<T extends IComponent = IComponent>(entity: Entity, t: new () => T): T {\n\t\t\treturn this.entityContainer.getComponent(entity, t.name) as T\n\t\t}\n\n\t\tgetOrAddComponent<T extends IComponent = IComponent>(entity: Entity, t: new () => T): T {\n\t\t\tlet comp = this.getComponent(entity, t)\n\t\t\tif (comp == null) {\n\t\t\t\tcomp = this.addComponent(entity, t)\n\t\t\t}\n\t\t\treturn comp\n\t\t}\n\n\t\texistComponent<T extends IComponent = IComponent>(entity: Entity, t: new () => T): bool {\n\t\t\treturn this.entityContainer.getComponent(entity, t.name) != undefined\n\t\t}\n\n\t\tgetEntityCount() {\n\t\t\treturn this.entityContainer.getEntityCount()\n\t\t}\n\n\t\tgetComponentOwnerEntity(comp: IComponent): Entity {\n\t\t\treturn this.entityContainer.getComponentOwnerEntity(comp)\n\t\t}\n\n\t\t/**\n\t\t * 复制entity\n\t\t * @param entity \n\t\t * @param targetManager \n\t\t */\n\t\tcloneEntity(entity: Entity, targetManager: EntityManager): Entity {\n\t\t\tlet copyComps: IComponent[] = []\n\t\t\tlet comps = targetManager.getComponents(entity)\n\t\t\tassert(comps != null, TestHelper.UNMATCHED_RESULT)\n\t\t\tfor (let comp of comps) {\n\t\t\t\tcopyComps.push(CloneECSComponet(comp, this.dirtyManager))\n\t\t\t}\n\t\t\tthis.addEntity(entity)\n\t\t\tthis.attachComponents(entity, copyComps)\n\t\t\treturn entity\n\t\t}\n\n\t\t/**\n\t\t * 完全重置覆盖\n\t\t * @param entity \n\t\t * @param targetManager \n\t\t */\n\t\toverwriteEntity(entity: Entity, targetManager: EntityManager): void {\n\t\t\tassert(this.entityContainer.existsEntity(entity), TestHelper.UNMATCHED_RESULT)\n\n\t\t\tthis.entityContainer.removeAllComponents(entity)\n\n\t\t\tlet comps = targetManager.getComponents(entity)\n\t\t\tassert(comps != null, TestHelper.UNMATCHED_RESULT)\n\t\t\tfor (let comp of comps) {\n\t\t\t\tthis.entityContainer.addComponent(entity, CloneECSComponet(comp, this.dirtyManager))\n\t\t\t}\n\t\t}\n\n\t\tcleanEntityProtoMap() {\n\t\t\tthis.entityContainer.cleanEntityProtoMap()\n\t\t}\n\n\t\t/**\n\t\t * 清空所有entity\n\t\t */\n\t\tclearEntities() {\n\t\t\tthis.dirtyManager.clearFlags()\n\t\t\tthis.entityContainer.clearEntities()\n\t\t}\n\n\t\t/**\n\t\t * 设置组件数据\n\t\t * @param entity \n\t\t * @param tcomp \n\t\t * @param compData \n\t\t */\n\t\tsetComponentData<T extends fsync.IComponent>(entity: fsync.Entity, tcomp: fsync.TClass<T>, compData: T): T {\n\t\t\tlet comp = this.getOrAddComponent(entity, tcomp)\n\t\t\tfor (let key in compData) {\n\t\t\t\tcomp[key] = compData[key]\n\t\t\t}\n\t\t\treturn comp\n\t\t}\n\n\t}\n\n}","namespace fsync {\n\n\texport interface IEntityQuery {\n\t\tforEach(call: (entity: Entity) => void): IEntityQuery\n\t\ttoArray(): Entity[]\n\t\tfirst(): Entity\n\t\tcount(): number\n\t}\n\n\texport class EntityQuery implements IEntityQuery {\n\t\tentityManager: EntityManager\n\t\tcomponentTypes: ComponentType[] = []\n\t\twithoutComponentTypes: ComponentType[] = []\n\t\tinit(entityManager: EntityManager): EntityQuery {\n\t\t\tthis.entityManager = entityManager\n\t\t\treturn this\n\t\t}\n\n\t\twith(componentType: ComponentType | (new () => IComponent)): EntityQuery {\n\t\t\tif (typeof (componentType) == \"string\") {\n\t\t\t\tthis.componentTypes.push(componentType)\n\t\t\t} else {\n\t\t\t\tthis.componentTypes.push(componentType.name)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\twithout(componentType: ComponentType | (new () => IComponent)): EntityQuery {\n\t\t\tif (typeof (componentType) == \"string\") {\n\t\t\t\tthis.withoutComponentTypes.push(componentType)\n\t\t\t} else {\n\t\t\t\tthis.withoutComponentTypes.push(componentType.name)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tforEach(call: (entity: Entity) => void): EntityQuery {\n\t\t\tconst entityManager = this.entityManager\n\t\t\tentityManager.entityContainer.forEachEntities(this.componentTypes, this.withoutComponentTypes, call)\n\t\t\treturn this\n\t\t}\n\n\t\tforEachWithComps(call: (entity: Entity, ...comps: fsync.IComponent[]) => void): EntityQuery {\n\t\t\tconst entityManager = this.entityManager\n\t\t\tentityManager.entityContainer.forEachEntities(this.componentTypes, this.withoutComponentTypes, (entity) => {\n\t\t\t\tlet comps = this.componentTypes.map(t => entityManager.getComponentByType(entity, t))\n\t\t\t\tcall(entity, ...comps)\n\t\t\t})\n\t\t\treturn this\n\t\t}\n\n\t\ttoArray(): Entity[] {\n\t\t\tlet entities: Entity[] = []\n\t\t\tthis.forEach((entity) => {\n\t\t\t\tentities.push(entity)\n\t\t\t})\n\t\t\treturn entities\n\t\t}\n\n\t\tfirst(): Entity {\n\t\t\tlet first: Entity\n\t\t\tthis.forEach((entity) => {\n\t\t\t\tfirst = entity\n\t\t\t\treturn true\n\t\t\t})\n\t\t\treturn first\n\t\t}\n\n\t\tcount(): number {\n\t\t\tlet count = 0\n\t\t\tthis.forEach((entity) => {\n\t\t\t\tcount++\n\t\t\t})\n\t\t\treturn count\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport class FrameSyncRandom implements IMerge<FrameSyncRandom>{\n\t\tprotected seed: number\n\t\tprotected inc: number\n\n\t\tinit() {\n\t\t\tthis.inc = 0\n\t\t\treturn this\n\t\t}\n\n\t\tsetRandSeed(seed: number) {\n\t\t\tthis.seed = seed\n\t\t\tthis.inc = seed\n\t\t}\n\n\t\t// return [0~1)\n\t\trand(): number {\n\t\t\t// this.inc++\n\t\t\t// const r = 77\n\t\t\t// let dv = (this.seed + this.inc * this.inc) % r * 2\n\t\t\t// let rand = (dv % r + dv * dv % (r * r) + dv * dv * dv % (r * r * r)) / (r + r * r + r * r * r)\n\t\t\t// return rand\n\t\t\tthis.inc = (this.inc * 9301 + 49297) % 233280;\n\t\t\treturn this.inc / 233280.0;\n\t\t}\n\n\t\tmergeFrom(rand: FrameSyncRandom) {\n\t\t\tthis.inc = rand.inc\n\t\t\tthis.seed = rand.seed\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport type ECSCommandFunc<T> = (...args: T[]) => void\n\texport type ECSCommand<T = any> = {\n\t\tcall: ECSCommandFunc<T>\n\t\tparas: T[]\n\t}\n\n\texport class ECSCommandBuffer {\n\t\tprotected calls: ECSCommand[]\n\t\tinit() {\n\t\t\tthis.calls = []\n\t\t\treturn this\n\t\t}\n\t\taddCommond<T>(call: ECSCommandFunc<T>, ...paras: T[]) {\n\t\t\tthis.calls.push({\n\t\t\t\tcall,\n\t\t\t\tparas,\n\t\t\t})\n\t\t}\n\t\trun() {\n\t\t\t// console.log(\"ECSCommandBuffer.run\", this.calls.length)\n\t\t\tfor (let call of this.calls\n\t\t\t\t.concat()\n\t\t\t) {\n\t\t\t\tcall.call(...call.paras)\n\t\t\t}\n\t\t}\n\t\tclearCommonds() {\n\t\t\tthis.calls.length = 0\n\t\t}\n\t}\n\n\n\t// 还需要加一个run on main\n\texport class SystemBase implements IUpdater {\n\t\tworld: ECSWorld\n\t\tprotected _commondBuffer: ECSCommandBuffer\n\t\tprotected _commondBufferAfterUpdate: ECSCommandBuffer\n\n\t\tctype: string = \"unknown\"\n\n\t\tget timer(): fsync.Timer | undefined {\n\t\t\treturn this.world.utils.timer\n\t\t}\n\n\t\tinit() {\n\t\t\tthis._commondBuffer = new ECSCommandBuffer().init()\n\t\t\tthis._commondBufferAfterUpdate = new ECSCommandBuffer().init()\n\n\t\t\tthis.ctype = this[\"constructor\"].name\n\n\t\t\tthis.onInit()\n\n\t\t\treturn this\n\t\t}\n\n\t\tprotected onInit() {\n\n\t\t}\n\n\t\tonSetup?()\n\n\t\tinstantiate(prefab: IPrefab): Entity {\n\t\t\treturn this.world.prefabEnv.instantiate(prefab)\n\t\t}\n\n\t\tgetCommandBuffer(): ECSCommandBuffer {\n\t\t\treturn this._commondBuffer\n\t\t}\n\n\n\t\tgetCommandBufferAfterUpdate(): ECSCommandBuffer {\n\t\t\treturn this._commondBufferAfterUpdate\n\t\t}\n\n\t\tget entityManager(): EntityManager {\n\t\t\treturn this.world.entityManager\n\t\t}\n\n\t\tget dataManager(): eds.DataManager {\n\t\t\treturn this.world.dataManager\n\t\t}\n\n\t\t/**\n\t\t * 所有操作必须一帧内完成，不能有遗留闭包，否则会出现无法彻底覆写世界的问题\n\t\t */\n\t\tupdate() {\n\n\t\t}\n\n\t\tonBeforeUpdate(): void {\n\t\t\tlet commondBuffer = this.getCommandBuffer()\n\t\t\tcommondBuffer.run()\n\t\t\tcommondBuffer.clearCommonds()\n\t\t}\n\t\tonAfterUpdate(): void {\n\t\t\tlet commondBuffer = this.getCommandBufferAfterUpdate()\n\t\t\tcommondBuffer.run()\n\t\t\tcommondBuffer.clearCommonds()\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport class UpdaterGroup implements IUpdater {\n\t\tupdaters: IUpdater[]\n\n\t\tinit() {\n\t\t\tthis.updaters = []\n\t\t\treturn this\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let updater of this.updaters) {\n\t\t\t\tupdater.clear && updater.clear()\n\t\t\t}\n\t\t}\n\n\t\tonset() {\n\t\t\tfor (let updater of this.updaters) {\n\t\t\t\tupdater.onset && updater.onset()\n\t\t\t}\n\t\t}\n\n\t\taddUpdater(update: IUpdater) {\n\t\t\tthis.updaters.push(update)\n\t\t}\n\n\t\tonBeforeUpdate(): void {\n\t\t\tfor (let updater of this.updaters) {\n\t\t\t\tupdater.onBeforeUpdate()\n\t\t\t}\n\t\t}\n\t\tupdate(): void {\n\t\t\tfor (let updater of this.updaters) {\n\t\t\t\tupdater.update()\n\t\t\t}\n\t\t}\n\t\tonAfterUpdate(): void {\n\t\t\tfor (let updater of this.updaters) {\n\t\t\t\tupdater.onAfterUpdate()\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// 游戏加载完毕之后，内容就不会改变，避免重写\n\texport class UpdaterGroupManager implements IUpdater {\n\t\tupdaters: { [key: string]: UpdaterGroup }\n\t\tupdateOrder: string[]\n\n\t\tinit() {\n\t\t\tthis.updaters = EmptyTable()\n\t\t\tthis.updateOrder = []\n\t\t\tthis._disabledGroup = {}\n\t\t\treturn this\n\t\t}\n\n\t\tonset() {\n\t\t\tthis.foreachByOrder((updater) => {\n\t\t\t\tupdater.onset()\n\t\t\t})\n\t\t}\n\n\t\tclear() {\n\t\t\tthis.foreachByOrder((updater) => {\n\t\t\t\tupdater.clear()\n\t\t\t})\n\t\t}\n\n\t\tgetUpdaterGroup(groupName: string): UpdaterGroup {\n\t\t\tlet group = this.updaters[groupName]\n\t\t\tif (group == null) {\n\t\t\t\tgroup = new UpdaterGroup()\n\t\t\t\tgroup.init()\n\t\t\t\tthis.updaters[groupName] = group\n\t\t\t}\n\t\t\treturn group\n\t\t}\n\n\t\taddUpdaterGroup(groupName: string, group: UpdaterGroup): void {\n\t\t\tthis.updaters[groupName] = group\n\t\t}\n\n\t\tsetGroupUpdateOrder(updateOrder: string[]) {\n\t\t\tthis.updateOrder.length = 0\n\t\t\tfor (let order of updateOrder) {\n\t\t\t\tthis.updateOrder.push(order)\n\t\t\t}\n\t\t}\n\n\t\tprotected _disabledGroup: { [key: string]: bool }\n\t\tdisableGroup(key: string) {\n\t\t\tthis._disabledGroup[key] = true\n\t\t}\n\t\tenableGroup(key: string) {\n\t\t\tdelete this._disabledGroup[key]\n\t\t}\n\t\tisGroupEnabled(key: string) {\n\t\t\treturn !this._disabledGroup[key]\n\t\t}\n\n\t\tprotected foreachByOrder(call: (updater: UpdaterGroup) => void) {\n\t\t\tlet updatedMap = EmptyTable()\n\n\t\t\tlet updaters = this.updaters\n\t\t\tfor (let k of this.updateOrder) {\n\t\t\t\tif (updaters[k]) {\n\t\t\t\t\tupdatedMap[k] = true\n\t\t\t\t\tif (!this._disabledGroup[k]) {\n\t\t\t\t\t\tcall(updaters[k])\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let k in this.updaters) {\n\t\t\t\tif (updatedMap[k] != null) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif (!this._disabledGroup[k]) {\n\t\t\t\t\tcall(updaters[k])\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tonBeforeUpdate(): void {\n\t\t\tthis.foreachByOrder((updater) => {\n\t\t\t\tupdater.onBeforeUpdate()\n\t\t\t})\n\t\t}\n\t\tupdate(): void {\n\t\t\tthis.foreachByOrder((updater) => {\n\t\t\t\tupdater.update()\n\t\t\t})\n\t\t}\n\t\tonAfterUpdate(): void {\n\t\t\tthis.foreachByOrder((updater) => {\n\t\t\t\tupdater.onAfterUpdate()\n\t\t\t})\n\t\t}\n\n\t}\n\n}","namespace fsync {\n\n\texport class ECSWorld {\n\t\tname: string = \"normal\"\n\t\tenv: WorldEnv\n\t\tentityManager: EntityManager\n\t\tdataManager: eds.DataManager\n\t\tutils: FrameSyncUtils\n\t\tprefabEnv: ViewPrefabEnv\n\t\t// 帧计数\n\t\tframeCount: number = 0\n\n\t\tclear() {\n\t\t\tthis.entityManager.clearEntities()\n\t\t\tthis.dataManager.clearDatas()\n\t\t}\n\n\t\tinit(utils: FrameSyncUtils = null) {\n\t\t\tthis.dataMap = EmptyTable()\n\t\t\tthis.utils = utils || new FrameSyncUtils()\n\n\t\t\tthis.env = new WorldEnv()\n\t\t\tthis.entityManager = new EntityManager()\n\t\t\tthis.entityManager.name = this.name\n\t\t\tthis.entityManager.init(this.utils)\n\n\t\t\tthis.dataManager = new eds.DataManager().init(this.utils)\n\t\t\tthis.dataManager.name = this.name\n\n\t\t\treturn this\n\t\t}\n\n\t\tmergeFrom(world: ECSWorld) {\n\t\t\tthis.frameCount = world.frameCount\n\t\t\tthis.utils.random.mergeFrom(world.utils.random)\n\t\t\tthis.utils.uidTool.mergeFrom(world.utils.uidTool)\n\t\t\tthis.utils.timer.mergeFrom(world.utils.timer)\n\t\t}\n\n\t\tprotected dataMap: { [key: string]: any }\n\t\tgetData<T extends fsync.IMerge<T>>(key: string): T {\n\t\t\treturn this.dataMap[key]\n\t\t}\n\n\t\tsetData<T extends fsync.IMerge<T>>(key: string, data: T) {\n\t\t\tthis.dataMap[key] = data\n\t\t}\n\n\t}\n\n}","namespace fsync {\n\nexport class WorldEnv {\n\n\tinit() {\n\t\treturn this\n\t}\n}\n\n}","namespace fsync {\n\n}","namespace fsync {\n\nexport interface IOverwritable{\n\trewrite(d: IOverwritable): bool\n}\n\n}","namespace fsync {\n\n\texport interface IUpdater {\n\t\tonBeforeUpdate(): void\n\t\tupdate(): void\n\t\tonAfterUpdate(): void\n\n\t\tonset?(): void\n\t\tclear?(): void\n\t}\n\n}","namespace fsync {\n\n\texport class NetDelay {\n\t\t/**\n\t\t * 延迟总值\n\t\t */\n\t\tnetDelayAcc = 0\n\t\t/**\n\t\t * 方差总值\n\t\t */\n\t\tnetDelayDeviationAcc = 0\n\t\tnetDelayQueue: number[] = []\n\t\tmaxSampleCount: number = 15\n\n\t\t/**\n\t\t * 输入网络延迟样本, 单位 秒\n\t\t * @param delay \n\t\t */\n\t\tputDelay(delay: number) {\n\t\t\tthis.netDelayAcc += delay\n\t\t\tthis.netDelayDeviationAcc += Math.abs(delay - this.netDelayQueue[0] || delay)\n\t\t\tthis.netDelayQueue.unshift(delay)\n\t\t\tif (this.netDelayQueue.length > this.maxSampleCount) {\n\t\t\t\tlet d = this.netDelayQueue.pop()\n\t\t\t\tthis.netDelayAcc -= d\n\t\t\t\t// 不严格的减法, 但是数值可以保持平衡\n\t\t\t\tthis.netDelayDeviationAcc -= Math.abs(d - this.netDelayQueue[this.netDelayQueue.length - 1] || d)\n\t\t\t\tif (this.netDelayDeviationAcc < 0) {\n\t\t\t\t\tconsole.log(\"klwefjlkj\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 平均网络延迟, 单位 秒\n\t\t */\n\t\tgetDelayAv() {\n\t\t\tif (this.netDelayQueue.length == 0) {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\treturn this.netDelayAcc / this.netDelayQueue.length\n\t\t}\n\n\t\t/**\n\t\t * 网络延迟标准差, 单位 秒\n\t\t */\n\t\tgetDelayStdDeviationAv() {\n\t\t\tif (this.netDelayQueue.length == 0) {\n\t\t\t\treturn 0\n\t\t\t}\n\t\t\treturn this.netDelayDeviationAcc / this.netDelayQueue.length\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport interface IPrefabHelper {\n\t\tinit()\n\t\tinstantiate(prefab: IPrefab, depsEnv: ViewPrefabEnv): Entity\n\t}\n\n\texport class PrefabHelper implements IPrefabHelper {\n\t\tinit() {\n\t\t\treturn this\n\t\t}\n\n\t\tinstantiate(prefab: IPrefab, depsEnv: ViewPrefabEnv): Entity {\n\t\t\treturn prefab.create(depsEnv)\n\t\t}\n\t}\n\n\texport class PrefabHelperWithoutView implements IPrefabHelper {\n\t\tinit() {\n\t\t\treturn this\n\t\t}\n\n\t\tinstantiate(prefab: IPrefab, depsEnv: ViewPrefabEnv): Entity {\n\t\t\treturn prefab.create(depsEnv)\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport class Timer implements IMerge<Timer> {\n\t\t/**\n\t\t * 外界实际当前时间点\n\t\t */\n\t\tprotected _curTimeRecord: TTimeStamp = 0\n\t\t/**\n\t\t * 游戏内部当前时间点\n\t\t */\n\t\tprotected _curTime: TTimeStamp = 0\n\t\t/**\n\t\t * 当前帧间间隔\n\t\t */\n\t\tprotected _deltaTime: TTimeStamp = 0\n\t\t/**\n\t\t * 最大帧间隔,用于提升断点调试体验\n\t\t */\n\t\tprotected _maxDeltaTime: TTimeStamp = Infinity\n\t\t/**\n\t\t * 游戏开始时间点\n\t\t */\n\t\tprotected _startTime: TTimeStamp = 0\n\n\t\tstatic oidAcc = 1\n\t\toid: number = 0\n\n\t\tinit() {\n\t\t\tthis.oid = Timer.oidAcc++\n\t\t\treturn this\n\t\t}\n\n\t\tget realtime() {\n\t\t\treturn Date.now()\n\t\t}\n\n\t\tget recordRealtime() {\n\t\t\treturn this._curTimeRecord\n\t\t}\n\n\t\t/**\n\t\t * 获取当前游戏时间戳\n\t\t * - 和 getGameTime() 的区别在于, getGameTime 的起始时间点为 0, getTime 的起始时间点和游戏开始时的 Date.now() 基本一致\n\t\t */\n\t\tgetTime(): TTimeStamp {\n\t\t\treturn this._curTime\n\t\t}\n\n\t\tupdateTime(time: TTimeStamp) {\n\t\t\tconst dt = time - this._curTimeRecord\n\t\t\tthis._curTimeRecord = time\n\t\t\tthis._deltaTime = Math.min(dt, this._maxDeltaTime)\n\t\t\tthis._curTime = this._curTime + this._deltaTime\n\t\t}\n\n\t\t/**\n\t\t * 重设游戏开始时间点\n\t\t * @param time \n\t\t */\n\t\tsetStartTime(time: TTimeStamp) {\n\t\t\tthis._startTime = time\n\t\t}\n\n\t\t/**\n\t\t * 游戏已进行时长\n\t\t */\n\t\tgetGameTime(): TTimeStamp {\n\t\t\treturn this._curTime - this._startTime\n\t\t}\n\n\t\tsetTime(time: TTimeStamp) {\n\t\t\tthis._curTime = time\n\t\t\tthis._deltaTime = 0\n\t\t\tthis.setStartTime(time)\n\t\t}\n\n\t\tget deltaTime(): TTimeStamp {\n\t\t\treturn this._deltaTime\n\t\t}\n\n\t\tmergeFrom(timer: Timer) {\n\t\t\tthis._curTime = timer._curTime\n\t\t\tthis._deltaTime = timer._deltaTime\n\t\t}\n\n\t\tsetMaxDeltaTime(dt: TTimeStamp) {\n\t\t\tthis._maxDeltaTime = dt\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport class UniqueIDTool implements IOverwritable, IMerge<UniqueIDTool> {\n\t\tinit() {\n\t\t\treturn this\n\t\t}\n\n\t\trewrite(d: UniqueIDTool): bool {\n\t\t\tlet newMap = EmptyTable()\n\t\t\tfor (let key in d) {\n\t\t\t\tnewMap[key] = d[key]\n\t\t\t}\n\t\t\tthis.typeMap = newMap\n\t\t\treturn true\n\t\t}\n\t\tprotected typeMap: { [key: string]: int } = EmptyTable()\n\n\t\tgenTypedId(t: string): string {\n\t\t\tlet typeId = this.typeMap[t]\n\t\t\tif (typeId == null) {\n\t\t\t\ttypeId = 0\n\t\t\t}\n\t\t\ttypeId++\n\t\t\tthis.typeMap[t] = typeId\n\n\t\t\tlet uid = `${t}_#${typeId}`\n\t\t\treturn uid\n\t\t}\n\n\t\tmergeFrom(tool: UniqueIDTool) {\n\t\t\tthis.typeMap = EmptyTable()\n\t\t\tlet targetTypeMap = tool.typeMap\n\t\t\tlet myTypeMap = this.typeMap\n\n\t\t\tfor (let key in targetTypeMap) {\n\t\t\t\tmyTypeMap[key] = targetTypeMap[key]\n\t\t\t}\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport class Updater implements IUpdater {\n\t\tupdaters: IUpdater[]\n\n\t\tinit() {\n\t\t\tthis.updaters = []\n\t\t\treturn this\n\t\t}\n\n\t\tonBeforeUpdate(): void {\n\n\t\t}\n\t\tupdate() {\n\n\t\t}\n\t\tonAfterUpdate(): void {\n\n\t\t}\n\t}\n\n}","\nnamespace fsync.ecsproxy.exports {\n\n\t// export import DecoCompProxy = ecsproxy.DecoCompProxy\n\t// export import DecoEntityProxy = ecsproxy.DecoEntityProxy\n\t// export import EntityProxyBase = ecsproxy.EntityProxyBase\n\t// export import ProxySystemBase = ecsproxy.ProxySystemBase\n\t// export import IConfigBase = ecsproxy.IConfigBase\n\t// export import proxyClasses = ecsproxy.proxyClasses\n\t// export import entityProxyHelper = ecsproxy.entityProxyHelper\n\n}\n","\nnamespace fsync.ecsproxy {\n\t/**\n\t * comp 类装饰器\n\t * @param target\n\t */\n\texport function DecoCompProxy<T extends fsync.IComponent>(target: new () => T) {\n\t\tproxyClasses.compProxies.push(target)\n\t}\n\n\texport function DoDecoCompProxy<T extends fsync.IComponent>(target: new () => T) {\n\t\tif (target['__ecscompproxyproto']) {\n\t\t\treturn\n\t\t}\n\n\t\tlet demo = new target()\n\t\t// 代理类原型\n\t\tlet proto = Object.create(null)\n\t\tlet protoRaw = target.prototype\n\t\tfor (let key of Object.keys(demo)) {\n\t\t\tif (demo[key] instanceof CompDecoInfo) {\n\t\t\t\tconst decoInfo = demo[key] as CompDecoInfo\n\t\t\t\tconst cls = decoInfo.cls\n\t\t\t\tconst clst = decoInfo.t\n\t\t\t\tprotoRaw[key] = \"\"\n\t\t\t\tif (clst == StandEntityProxy) {\n\t\t\t\t\t// 定义从 component 中取 entity\n\t\t\t\t\tObject.defineProperty(proto, key, {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tlet entityManager = self.__entityManager as fsync.EntityManager\n\t\t\t\t\t\t\tlet entityId = self.__comp[key]\n\t\t\t\t\t\t\tlet entity = entityManager.wrapEntityId(entityId)\n\t\t\t\t\t\t\tlet proxy = entityProxyHelper.getEntityProxy(cls, entityManager, entity)\n\t\t\t\t\t\t\treturn proxy\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset: function (value: EntityProxyBase) {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tself.__comp[key] = value.entityId\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t} else if (clst == StandEntityProxyArray) {\n\t\t\t\t\tObject.defineProperty(proto, key, {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tlet entityManager = self.__entityManager as fsync.EntityManager\n\t\t\t\t\t\t\tlet entityIds = self.__comp[key] as string[]\n\t\t\t\t\t\t\tlet proxys = entityIds.map(entityId => {\n\t\t\t\t\t\t\t\tlet entity = entityManager.wrapEntityId(entityId)\n\t\t\t\t\t\t\t\treturn entityProxyHelper.getEntityProxy(cls, entityManager, entity)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\treturn proxys\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset: function (values: EntityProxyBase[]) {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrArrayProxyBase)\n\t\t\t\t\t\t\tlet entityIds = self.__comp[key] as string[]\n\t\t\t\t\t\t\tentityIds.length = 0\n\t\t\t\t\t\t\tvalues.forEach(value => {\n\t\t\t\t\t\t\t\tentityIds.push(value.entityId)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t} else if (clst == StandCompConfig && decoInfo instanceof ConfigDecoInfo) {\n\t\t\t\t\tconst defaultId = decoInfo.defaultId\n\t\t\t\t\tconst tables = decoInfo.tables\n\t\t\t\t\tObject.defineProperty(proto, key, {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * 配表的 get 返回 config\n\t\t\t\t\t\t */\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tlet id = self.__comp[key] as string\n\t\t\t\t\t\t\tlet config = tables.find(table => table.id == id)\n\t\t\t\t\t\t\treturn config\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * 配表的 set 传入 IConfigBase\n\t\t\t\t\t\t * @param id\n\t\t\t\t\t\t */\n\t\t\t\t\t\tset: function (config: IConfigBase) {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tself.__comp[key] = config.id\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t// 默认配置id\n\t\t\t\t\tprotoRaw[key] = defaultId\n\t\t\t\t} else if (clst == StandCustomData && decoInfo instanceof CustomDataDecoInfo) {\n\t\t\t\t\tconst defaultId = decoInfo.defaultId\n\t\t\t\t\tconst accessor = decoInfo.accessor\n\t\t\t\t\tlet { toClonable, toTarget, } = accessor\n\t\t\t\t\tObject.defineProperty(proto, key, {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * 配表的 get 返回 data id\n\t\t\t\t\t\t */\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tlet id = self.__comp[key] as string\n\t\t\t\t\t\t\tlet data = toTarget(id, self.__comp, key)\n\t\t\t\t\t\t\treturn data\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * 配表的 set 传入 data\n\t\t\t\t\t\t * @param id\n\t\t\t\t\t\t */\n\t\t\t\t\t\tset: function (data: any) {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tself.__comp[key] = toClonable(data)\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\t// 默认配置id\n\t\t\t\t\tprotoRaw[key] = defaultId\n\t\t\t\t} else if (clst == StandCustomDataArray && decoInfo instanceof CustomDataArrayDecoInfo) {\n\t\t\t\t\tconst accessor = decoInfo.accessor\n\t\t\t\t\tlet { toClonable, toTarget, toTargetArray } = accessor\n\t\t\t\t\tObject.defineProperty(proto, key, {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * 配表的 get 返回 data id\n\t\t\t\t\t\t */\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tlet ids = self.__comp[key] as string[]\n\t\t\t\t\t\t\tlet datas: any\n\t\t\t\t\t\t\tif (toTargetArray) {\n\t\t\t\t\t\t\t\tdatas = toTargetArray(ids, self.__comp, key)\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdatas = ids.map(id => toTarget(id, self.__comp, key))\n\t\t\t\t\t\t\t\tObject.defineProperty(datas, \"push\", {\n\t\t\t\t\t\t\t\t\tvalue: function (target) {\n\t\t\t\t\t\t\t\t\t\tif (typeof (target) == \"string\") {\n\t\t\t\t\t\t\t\t\t\t\tself.__comp[key].push(target)\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tself.__comp[key].push(target.oid)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn datas\n\t\t\t\t\t\t},\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * 配表的 set 传入 data\n\t\t\t\t\t\t * @param id\n\t\t\t\t\t\t */\n\t\t\t\t\t\tset: function (datas: any[]) {\n\t\t\t\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\t\t\t\tself.__comp[key] = datas.map(data => toClonable(data))\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\"unspport type\")\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tObject.defineProperty(proto, key, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\treturn this.__comp[key]\n\t\t\t\t\t},\n\t\t\t\t\tset: function (value) {\n\t\t\t\t\t\tthis.__comp[key] = value\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tObject.defineProperty(proto, \"setComp\", {\n\t\t\tvalue: function (comp) {\n\t\t\t\tthis.__comp = comp\n\t\t\t}\n\t\t})\n\t\tObject.defineProperty(proto, \"setCompCls\", {\n\t\t\tvalue: function (compClass) {\n\t\t\t\tthis.__compClass = compClass\n\t\t\t}\n\t\t})\n\t\tObject.defineProperty(proto, \"isNull\", {\n\t\t\tget: function () {\n\t\t\t\treturn this.__comp == null\n\t\t\t}\n\t\t})\n\t\tObject.defineProperty(proto, \"isNotNull\", {\n\t\t\tget: function () {\n\t\t\t\treturn this.__comp != null\n\t\t\t}\n\t\t})\n\t\tObject.defineProperty(proto, \"getOrAdd\", {\n\t\t\tvalue: function () {\n\t\t\t\tconst self = (this as IECSComponentAttrProxyBase)\n\t\t\t\tif (self.__comp == null) {\n\t\t\t\t\tconst entityManager = self.__entityManager\n\t\t\t\t\tconst entity = self.__entity\n\t\t\t\t\tconst compCls = self.__compClass\n\t\t\t\t\tif (!entityManager.existComponent(entity, compCls)) {\n\t\t\t\t\t\tself.__comp = entityManager.addComponent(entity, compCls)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.__comp = entityManager.getComponent(entity, compCls)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this\n\t\t\t}\n\t\t})\n\n\t\ttarget['__ecscompproxyproto'] = proto\n\t}\n}\n","namespace fsync.ecsproxy {\n\n\texport interface IECSComponentProxy {\n\t\treadonly isNull: bool\n\t\treadonly isNotNull: bool\n\t\tgetOrAdd(): this\n\t\tsetEntity(key: keyof this, entity: Entity)\n\t}\n\n\t/**\n\t * 指代 entity 代理\n\t */\n\texport interface IECSComponentAttrProxyBase extends IECSComponentProxy {\n\t\t__entityManager: fsync.EntityManager\n\t\t__entity: fsync.Entity\n\t\t__comp: fsync.IComponent\n\t\tsetComp(comp: fsync.IComponent)\n\t\t__compClass: new () => fsync.IComponent\n\t\tsetCompCls(cls: new () => fsync.IComponent)\n\t}\n\n\t/**\n\t * 指代 entity array 代理\n\t */\n\texport interface IECSComponentAttrArrayProxyBase extends IECSComponentProxy {\n\t\t__entityManager: fsync.EntityManager\n\t\t__entity: fsync.Entity\n\t\t__comp: fsync.IComponent\n\t\tsetComp(comp: fsync.IComponent)\n\t\t__compClass: new () => fsync.IComponent\n\t\tsetCompCls(cls: new () => fsync.IComponent)\n\t}\n\n\t/**\n\t * 指代 config 代理\n\t */\n\texport interface IConfigProxyBase {\n\t\t__cfgid: number | string\n\t\t__cfg: (id: any) => any\n\t\tsetConfig<T>(call: (id: any) => T, id: string | number)\n\t}\n\n\t/**\n\t * 中间数据\n\t */\n\texport class CompDecoInfo {\n\t\tconstructor(\n\t\t\tpublic t: any,\n\t\t\tpublic cls: any,\n\t\t) {\n\t\t}\n\t}\n\n\texport interface IConfigBase {\n\t\t/**\n\t\t * 规定所有配表必须有次唯一id字段\n\t\t */\n\t\tid: string | number\n\t}\n\n\texport class ConfigDecoInfo extends CompDecoInfo {\n\t\tconstructor(\n\t\t\tpublic t: any,\n\t\t\tpublic cls: any,\n\t\t\tpublic tables: IConfigBase[],\n\t\t\tpublic defaultId?: string | number,\n\t\t) {\n\t\t\tsuper(t, cls)\n\t\t}\n\t}\n\n\texport interface ICustomDataAccessor {\n\t\t/**\n\t\t * id to target\n\t\t */\n\t\ttoTarget: (id: string | number, comp: IComponent, key: string) => any,\n\t\ttoTargetArray?: (ids: (string | number)[], comp: IComponent, key: string) => any,\n\t\t/**\n\t\t * target to id\n\t\t */\n\t\ttoClonable: (a: any) => string | number,\n\t}\n\n\t// export interface ICustomDataArrayAccessor {\n\t// \t/**\n\t// \t * id to target\n\t// \t */\n\t// \ttoTarget: (id: (string | number)[]) => any[],\n\t// \t/**\n\t// \t * target to id\n\t// \t */\n\t// \ttoClonable: (a: any[]) => (string | number)[],\n\t// }\n\n\texport function ToCompConfig<T extends IConfigBase>(id: string | number): T {\n\t\treturn { id } as T\n\t}\n\n\t/**\n\t * 配表装饰器\n\t * @param cls \n\t * @param clsid \n\t */\n\texport let StandCompConfig = function <T>(cls: new () => T, tables: IConfigBase[], defaultId?: string | number): T {\n\t\tif (proxyClasses.decorated) {\n\t\t\treturn StandCompConfigSimple(cls, tables, defaultId)\n\t\t}\n\t\treturn new ConfigDecoInfo(StandCompConfig, cls, tables, defaultId) as any as T\n\t}\n\texport let StandCompConfigSimple = function <T>(cls: new () => T, tables: IConfigBase[], defaultId?: string | number): T {\n\t\treturn defaultId as any as T\n\t}\n\n\t/**\n\t * 自定义装饰\n\t */\n\texport class CustomDataDecoInfo extends CompDecoInfo {\n\t\tconstructor(\n\t\t\tpublic t: any,\n\t\t\tpublic cls: any,\n\t\t\tpublic accessor: ICustomDataAccessor,\n\t\t\tpublic defaultId?: string | number,\n\t\t) {\n\t\t\tsuper(t, cls)\n\t\t}\n\t}\n\n\t/**\n\t * 配表装饰器\n\t * @param cls \n\t * @param clsid \n\t */\n\texport let StandCustomData = function <T>(cls: new () => T, accessor: ICustomDataAccessor, defaultId?: string | number): T {\n\t\tif (proxyClasses.decorated) {\n\t\t\treturn StandCustomDataSimple(cls, accessor, defaultId)\n\t\t}\n\t\treturn new CustomDataDecoInfo(StandCustomData, cls, accessor, defaultId) as any as T\n\t}\n\texport let StandCustomDataSimple = function <T>(cls: new () => T, accessor: ICustomDataAccessor, defaultId?: string | number): T {\n\t\treturn defaultId as any as T\n\t}\n\n\t/**\n\t * 自定义装饰\n\t */\n\texport class CustomDataArrayDecoInfo extends CompDecoInfo {\n\t\tconstructor(\n\t\t\tpublic t: any,\n\t\t\tpublic cls: any,\n\t\t\tpublic accessor: ICustomDataAccessor,\n\t\t) {\n\t\t\tsuper(t, cls)\n\t\t}\n\t}\n\n\t/**\n\t * 配表装饰器\n\t * @param cls \n\t * @param clsid \n\t */\n\texport let StandCustomDataArray = function <T>(cls: new () => T, accessor: ICustomDataAccessor): T[] {\n\t\tif (proxyClasses.decorated) {\n\t\t\treturn StandCustomDataArraySimple(cls, accessor)\n\t\t}\n\t\treturn new CustomDataArrayDecoInfo(StandCustomDataArray, cls, accessor) as any as T[]\n\t}\n\texport let StandCustomDataArraySimple = function <T>(cls: new () => T, accessor: ICustomDataAccessor): T[] {\n\t\treturn []\n\t}\n\n\t/**\n\t * 组件装饰器\n\t * @param cls \n\t */\n\texport let StandCompProxy = function <T extends fsync.IComponent>(cls: new () => T): T & IECSComponentProxy {\n\t\tif (proxyClasses.decorated) {\n\t\t\treturn StandCompProxySimple(cls)\n\t\t}\n\t\treturn new CompDecoInfo(StandCompProxy, cls) as any as T & IECSComponentProxy\n\t}\n\texport let StandCompProxySimple = function <T extends fsync.IComponent>(cls: new () => T): T & IECSComponentProxy {\n\t\treturn DeleteMark as any as T & IECSComponentProxy\n\t}\n\n\t/**\n\t * entityId 装饰器\n\t * @param cls \n\t */\n\texport let StandEntityProxy = function <T extends EntityProxyBase>(cls: new () => T): T {\n\t\tif (proxyClasses.decorated) {\n\t\t\treturn StandEntityProxySimple(cls)\n\t\t}\n\t\treturn new CompDecoInfo(StandEntityProxy, cls) as any as T\n\t}\n\texport let StandEntityProxySimple = function <T extends EntityProxyBase>(cls: new () => T): T {\n\t\treturn \"\" as any as T\n\t}\n\n\t/**\n\t * entityId[] 装饰器\n\t * @param cls \n\t */\n\texport let StandEntityProxyArray = function <T extends EntityProxyBase>(cls: new () => T): Tuple<T> {\n\t\tif (proxyClasses.decorated) {\n\t\t\treturn StandEntityProxyArraySimple(cls)\n\t\t}\n\t\treturn new CompDecoInfo(StandEntityProxyArray, cls) as any as Tuple<T>\n\t}\n\texport let StandEntityProxyArraySimple = function <T extends EntityProxyBase>(cls: new () => T): Tuple<T> {\n\t\treturn ([] as string[]) as any as Tuple<T>\n\t}\n\n\t/**\n\t * 标记为动态增删的组件, 使用代理创建entity时,不会自动新增该组件\n\t * @param params \n\t */\n\texport function DecoDynamicComp(target: object, property: string) {\n\t\tlet comps: { [key: string]: bool } = target['dynamicComps']\n\t\tif (comps == null) {\n\t\t\tcomps = target['dynamicComps'] = {}\n\t\t}\n\t\tcomps[property] = true\n\t}\n\n\t// export function DecoArray(params: type) {\n\n\t// }\n}\n","\nnamespace fsync.ecsproxy {\n\n\t/**\n\t * entityproxy 类装饰器\n\t * @param target\n\t */\n\texport function DecoEntityProxy<T extends EntityProxyBase>(target: new () => T) {\n\t\tproxyClasses.entityProxies.push(target)\n\t}\n\n\texport function DoDecoEntityProxy<T extends EntityProxyBase>(target: new () => T) {\n\t\t// 代理类原型\n\t\tlet demo = new target()\n\t\tlet protoRaw = Object.getPrototypeOf(demo)\n\t\tlet Components = target.prototype['Components'] as (new () => fsync.IComponent)[]\n\t\tif (Components == null) {\n\t\t\tprotoRaw['Components'] = Components = []\n\t\t}\n\t\tlet dynamicComps = protoRaw[\"dynamicComps\"] as { [key: string]: bool } || {}\n\n\t\tfor (let key of Object.keys(demo)) {\n\t\t\tif (demo[key] instanceof CompDecoInfo) {\n\t\t\t\tconst decoInfo = demo[key]\n\t\t\t\tconst cls = decoInfo.cls\n\t\t\t\tconst clst = decoInfo.t\n\t\t\t\tif (clst == StandCompProxy) {\n\t\t\t\t\tObject.defineProperty(protoRaw, key, {\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\tconst self = (this as EntityProxyBase)\n\t\t\t\t\t\t\tlet entityManager = self.entityManager\n\t\t\t\t\t\t\tlet entity = self.entity\n\t\t\t\t\t\t\tlet proxy = entityProxyHelper.getComponentProxy(cls, entityManager, entity)\n\t\t\t\t\t\t\treturn proxy\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset: function (value: IECSComponentAttrProxyBase) {\n\t\t\t\t\t\t\tif (value != DeleteMark) {\n\t\t\t\t\t\t\t\tthrow new Error(\"unsupport set comp function\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t\tif (!dynamicComps[key]) {\n\t\t\t\t\t\tComponents.push(cls)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\"unspport type\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n}\n","\nnamespace fsync.ecsproxy {\n\texport const DeleteMark = Object.create(null)\n\n\texport class EntityProxyBase {\n\t\tentity: fsync.Entity\n\t\tentityManager: fsync.EntityManager\n\n\t\tprotected deleteOutdate() {\n\t\t\tfor (let key of Object.keys(this)) {\n\t\t\t\tif (this[key] == DeleteMark) {\n\t\t\t\t\tdelete this[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tstatic getComponents<T>(proxyClz: new () => T): (new () => IComponent)[] {\n\t\t\tlet Components = proxyClz.prototype['Components']\n\t\t\t// let Components = Object.getPrototypeOf(proxyClz)['Components']\n\t\t\treturn Components\n\t\t}\n\n\t\tinit(entityManager: fsync.EntityManager, entity: fsync.Entity) {\n\t\t\tthis.entity = entity\n\t\t\tthis.entityManager = entityManager\n\n\t\t\t// this.deleteOutdate()\n\n\t\t\treturn this\n\t\t}\n\n\t\tgetComponent<T extends fsync.IComponent>(cls: new () => T): T {\n\t\t\treturn this.entityManager.getComponent(this.entity, cls)\n\t\t}\n\n\t\tgetComponentProxy<T extends fsync.IComponent>(cls: new () => T): T & IECSComponentProxy {\n\t\t\tlet proxy = entityProxyHelper.getComponentProxy(cls, this.entityManager, this.entity)\n\t\t\treturn proxy\n\t\t}\n\n\t\tget entityId() {\n\t\t\treturn this.entity.identity\n\t\t}\n\n\t\tset entityId(entityId: string) {\n\t\t\tthis.entity = this.entityManager.getEntityById(entityId)\n\t\t}\n\n\t\tget isNull(): bool {\n\t\t\t// return this.entity == null\n\t\t\treturn !this.entityManager.existsEntity(this.entity)\n\t\t}\n\n\t\tget isNotNull(): bool {\n\t\t\t// return this.entity == null\n\t\t\treturn !this.isNull\n\t\t}\n\n\t\tisSame(t: EntityProxyBase): bool {\n\t\t\treturn this.entityId == t.entityId\n\t\t}\n\n\t\tremoveSelf() {\n\t\t\tthis.entityManager.removeEntity(this.entity)\n\t\t}\n\n\t\tComponents: (new () => fsync.IComponent)[]\n\t\tdynamicComps: { [key: string]: bool }\n\t}\n\n}\n","\nnamespace fsync.ecsproxy {\n\texport class EntityProxyHelper {\n\t\tinit() {\n\t\t\tthis.clear()\n\t\t\treturn this\n\t\t}\n\n\t\tclear() {\n\t\t\tthis.entityProxyMap = EmptyTable()\n\t\t\tthis.compProxyMap = EmptyTable()\n\t\t}\n\n\t\t/**\n\t\t* entity 代理缓存\n\t\t*/\n\t\tentityProxyMap: { [key: string]: EntityProxyBase }\n\n\t\tgetEntityGUID(t: string, entityManager: fsync.EntityManager, entity: fsync.Entity) {\n\t\t\treturn `${t}_${entityManager.identity}_*_${entity.identity}`\n\t\t}\n\n\t\tgetEntityProxy<T extends EntityProxyBase>(\n\t\t\tcls: new () => T,\n\t\t\tentityManager: fsync.EntityManager, entity: fsync.Entity\n\t\t): T {\n\t\t\tlet key = this.getEntityGUID(cls.name, entityManager, entity)\n\t\t\tlet proxy = this.entityProxyMap[key]\n\t\t\tif (proxy == null) {\n\t\t\t\tthis.entityProxyMap[key] = proxy = new cls().init(entityManager, entity)\n\t\t\t}\n\t\t\treturn proxy as T\n\t\t}\n\n\t\t/**\n\t\t * 组件 代理缓存\n\t\t */\n\t\tcompProxyMap: { [key: string]: IECSComponentAttrProxyBase }\n\n\t\tgetCompGUID(t: string, entityManager: fsync.EntityManager, entity: fsync.Entity) {\n\t\t\treturn `${t}_${entityManager.identity}_*_${entity.identity}`\n\t\t}\n\n\t\tgetComponentProxy<T extends fsync.IComponent>(\n\t\t\tcls: new () => T,\n\t\t\tentityManager: fsync.EntityManager, entity: fsync.Entity\n\t\t): T & IECSComponentProxy {\n\t\t\tlet key = this.getEntityGUID(cls.name, entityManager, entity)\n\t\t\tlet proxy = this.compProxyMap[key]\n\t\t\tif (proxy == null) {\n\t\t\t\tthis.compProxyMap[key] = proxy = this.createComponentProxy(cls, entityManager, entity)\n\t\t\t}\n\t\t\treturn proxy as any as T & IECSComponentProxy\n\t\t}\n\n\t\tcreateComponentProxy<T extends fsync.IComponent>(\n\t\t\tcls: new () => T,\n\t\t\tentityManager: fsync.EntityManager, entity: fsync.Entity\n\t\t) {\n\t\t\tlet comp = entityManager.getComponent(entity, cls)\n\t\t\tlet proxyProto = cls['__ecscompproxyproto']\n\t\t\tlet proxy = Object.create(null) as IECSComponentAttrProxyBase\n\t\t\tObject.setPrototypeOf(proxy, proxyProto)\n\t\t\tproxy.__entityManager = entityManager\n\t\t\tproxy.setComp(comp)\n\t\t\tproxy.setCompCls(cls)\n\t\t\tproxy.__entity = entity\n\t\t\treturn proxy\n\t\t}\n\n\t\t/**\n\t\t * entityproxy -> entity\n\t\t * @param entityManager \n\t\t * @param proxyClz \n\t\t */\n\t\tcreateEntityByProxy<T extends EntityProxyBase>(entityManager: EntityManager, proxyClz: new () => T): Entity {\n\t\t\tlet Components = proxyClz.prototype['Components']\n\t\t\t// let Components = Object.getPrototypeOf(proxyClz)['Components']\n\t\t\tlet entity = entityManager.createEntity(Components)\n\t\t\treturn entity\n\t\t}\n\n\t\t/**\n\t\t * entityproxy -> entity\n\t\t * @param entityManager \n\t\t * @param proxy \n\t\t */\n\t\tcreateEntityProxy<T extends EntityProxyBase>(entityManager: EntityManager, proxyClz: new () => T): T {\n\t\t\tlet Components = proxyClz.prototype['Components']\n\t\t\t// let Components = Object.getPrototypeOf(proxyClz)['Components']\n\t\t\tlet entity = entityManager.createEntity(Components)\n\t\t\tlet proxy = this.getEntityProxy(proxyClz, entityManager, entity)\n\t\t\treturn proxy\n\t\t}\n\n\t\tgetEntityProxyComponents<T>(proxyClz: new () => T): (new () => IComponent)[] {\n\t\t\tlet Components = proxyClz.prototype['Components']\n\t\t\t// let Components = Object.getPrototypeOf(proxyClz)['Components']\n\t\t\treturn Components\n\t\t}\n\t}\n\n\texport const entityProxyHelper = new EntityProxyHelper().init()\n}\n","\nnamespace fsync.ecsproxy {\n\n\texport class EntityProxyQuery<T extends EntityProxyBase> {\n\t\tprotected entityManager: EntityManager\n\t\tprotected query: EntityQuery\n\t\tprotected EntityProxyClass: new () => T\n\n\t\tinit(entityManager: EntityManager, EntityProxyClass: new () => T) {\n\t\t\tthis.entityManager = entityManager\n\t\t\tthis.query = entityManager.createQuery()\n\t\t\tthis.EntityProxyClass = EntityProxyClass\n\t\t\treturn this\n\t\t}\n\n\t\twith(cls: new () => fsync.IComponent) {\n\t\t\tthis.query.with(cls)\n\t\t\treturn this\n\t\t}\n\n\t\twithKey(k: keyof T) {\n\t\t\treturn this\n\t\t}\n\n\t\tforEach(call: (proxy: T) => void) {\n\t\t\tthis.query.forEach((entity) => {\n\t\t\t\tlet proxy = entityProxyHelper.getEntityProxy(this.EntityProxyClass, this.entityManager, entity)\n\t\t\t\tcall(proxy)\n\t\t\t})\n\t\t}\n\n\t\ttoArray(): T[] {\n\t\t\treturn this.query.toArray().map((entity) =>\n\t\t\t\tentityProxyHelper.getEntityProxy(this.EntityProxyClass, this.entityManager, entity)\n\t\t\t)\n\t\t}\n\n\t\tfirst() {\n\t\t\treturn this.toArray()[0]\n\t\t}\n\t}\n\n\texport class EntityQueryHelper {\n\t\tcreateQuery<T extends EntityProxyBase>(entityManager: EntityManager, cls: new () => T): EntityProxyQuery<T> {\n\t\t\tlet query = new EntityProxyQuery<T>().init(entityManager, cls)\n\t\t\treturn query\n\t\t}\n\t}\n\n\texport const entityQueryHelper = new EntityQueryHelper()\n\n}\n","namespace fsync.ecsproxy {\r\n\timport IEntityQuery = fsync.IEntityQuery;\r\n\r\n\texport class EntityProxyArray<T extends EntityProxyBase> extends Array<T> {\r\n\t\t__key: string\r\n\t\t__host: IECSComponentAttrArrayProxyBase\r\n\t\t__cls: new () => T\r\n\r\n\t\tpush(...items: T[]): number {\r\n\t\t\tconst host = this.__host\r\n\t\t\tconst comp = host.__comp\r\n\t\t\tconst entityManager = host.__entityManager\r\n\t\t\tconst cls = this.__cls\r\n\t\t\tlet ids = comp[this.__key] as string[]\r\n\r\n\t\t\tfor (let i = 0; i < items.length; i++) {\r\n\t\t\t\tlet item = items[i]\r\n\t\t\t\tlet id: string\r\n\t\t\t\tif (typeof (item) == \"object\") {\r\n\t\t\t\t\tif (item instanceof Entity) {\r\n\t\t\t\t\t\tid = item.identity\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tid = item.entityId\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (typeof (item) == \"string\") {\r\n\t\t\t\t\tid = item\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.error(\"invalid type\")\r\n\t\t\t\t}\r\n\t\t\t\tids.push(id)\r\n\t\t\t\tconst entity = entityManager.wrapEntityId(id)\r\n\t\t\t\tconst proxy = entityProxyHelper.getEntityProxy(cls, entityManager, entity)\r\n\t\t\t\tsuper.push(proxy)\r\n\t\t\t}\r\n\t\t\treturn this.length\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","\nnamespace fsync.ecsproxy {\n\n\t/**\n\t * 代理类注册类\n\t */\n\texport class ProxyClasses {\n\t\tcompProxies: (new () => IComponent)[] = []\n\t\tentityProxies: (new () => EntityProxyBase)[] = []\n\n\t\tdecorated: bool = false\n\n\t\tautoDecorate: bool = true\n\n\t\tinit() {\n\t\t\t/**\n\t\t\t * 此处自动调用一次 decorateAll()\n\t\t\t * - 若项目中出现引用依赖问题,那么\n\t\t\t */\n\t\t\t// setTimeout(() => {\n\t\t\t// \tif (this.autoDecorate) {\n\t\t\t// \t\tthis.decorateAll()\n\t\t\t// \t}\n\t\t\t// }, 1)\n\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * 为了避免循环依赖导致装饰异常,延迟到全部类注册完之后一起装饰\n\t\t */\n\t\tdecorateAll() {\n\t\t\tif (this.decorated) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tfor (let proxyClass of this.compProxies) {\n\t\t\t\tDoDecoCompProxy(proxyClass)\n\t\t\t}\n\t\t\tfor (let proxyClass of this.entityProxies) {\n\t\t\t\tDoDecoEntityProxy(proxyClass)\n\t\t\t}\n\n\t\t\tStandCompConfig = StandCompConfigSimple\n\t\t\tStandCompProxy = StandCompProxySimple\n\t\t\tStandEntityProxy = StandEntityProxySimple\n\t\t\tStandEntityProxyArray = StandEntityProxyArraySimple\n\t\t\tStandCustomData = StandCustomDataSimple\n\t\t\tStandCustomDataArray = StandCustomDataArraySimple\n\n\t\t\tthis.decorated = true\n\n\t\t}\n\t}\n\n\t/**\n\t * 代理类注册类实例\n\t */\n\texport const proxyClasses = new ProxyClasses().init()\n\n}\n","\nnamespace fsync.ecsproxy {\n\n\texport class ProxySystemBase extends SystemBase {\n\t\tcreateQuery<T extends EntityProxyBase>(cls: new () => T): EntityProxyQuery<T> {\n\t\t\treturn entityQueryHelper.createQuery(this.entityManager, cls)\n\t\t}\n\t}\n\n}\n","\nnamespace fsync.ecsproxy {\n\n\t/**\n\t * 列表结构只读的 Array\n\t */\n\texport interface Tuple<T> {\n\n\t\t/**\n\t\t * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\n\t\t */\n\t\tlength: number;\n\t\t/**\n\t\t * Returns a string representation of an array.\n\t\t */\n\t\ttoString(): string;\n\t\t/**\n\t\t * Returns a string representation of an array. The elements are converted to string using their toLocalString methods.\n\t\t */\n\t\ttoLocaleString(): string;\n\t\t/**\n\t\t * Combines two or more arrays.\n\t\t * @param items Additional items to add to the end of array1.\n\t\t */\n\t\tconcat(...items: ConcatArray<T>[]): T[];\n\t\t/**\n\t\t * Combines two or more arrays.\n\t\t * @param items Additional items to add to the end of array1.\n\t\t */\n\t\tconcat(...items: (T | ConcatArray<T>)[]): T[];\n\t\t/**\n\t\t * Adds all the elements of an array separated by the specified separator string.\n\t\t * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n\t\t */\n\t\tjoin(separator?: string): string;\n\t\t/**\n\t\t * Returns a section of an array.\n\t\t * @param start The beginning of the specified portion of the array.\n\t\t * @param end The end of the specified portion of the array. This is exclusive of the element at the index 'end'.\n\t\t */\n\t\tslice(start?: number, end?: number): T[];\n\t\t/**\n\t\t * Returns the index of the first occurrence of a value in an array.\n\t\t * @param searchElement The value to locate in the array.\n\t\t * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n\t\t */\n\t\tindexOf(searchElement: T, fromIndex?: number): number;\n\t\t/**\n\t\t * Returns the index of the last occurrence of a specified value in an array.\n\t\t * @param searchElement The value to locate in the array.\n\t\t * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n\t\t */\n\t\tlastIndexOf(searchElement: T, fromIndex?: number): number;\n\t\t/**\n\t\t * Determines whether all the members of an array satisfy the specified test.\n\t\t * @param predicate A function that accepts up to three arguments. The every method calls\n\t\t * the predicate function for each element in the array until the predicate returns a value\n\t\t * which is coercible to the Boolean value false, or until the end of the array.\n\t\t * @param thisArg An object to which the this keyword can refer in the predicate function.\n\t\t * If thisArg is omitted, undefined is used as the this value.\n\t\t */\n\t\tevery<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n\t\t/**\n\t\t * Determines whether all the members of an array satisfy the specified test.\n\t\t * @param predicate A function that accepts up to three arguments. The every method calls\n\t\t * the predicate function for each element in the array until the predicate returns a value\n\t\t * which is coercible to the Boolean value false, or until the end of the array.\n\t\t * @param thisArg An object to which the this keyword can refer in the predicate function.\n\t\t * If thisArg is omitted, undefined is used as the this value.\n\t\t */\n\t\tevery(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n\t\t/**\n\t\t * Determines whether the specified callback function returns true for any element of an array.\n\t\t * @param predicate A function that accepts up to three arguments. The some method calls\n\t\t * the predicate function for each element in the array until the predicate returns a value\n\t\t * which is coercible to the Boolean value true, or until the end of the array.\n\t\t * @param thisArg An object to which the this keyword can refer in the predicate function.\n\t\t * If thisArg is omitted, undefined is used as the this value.\n\t\t */\n\t\tsome(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n\t\t/**\n\t\t * Performs the specified action for each element in an array.\n\t\t * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n\t\t * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t\t */\n\t\tforEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n\t\t/**\n\t\t * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n\t\t * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n\t\t * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n\t\t */\n\t\tmap<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n\t\t/**\n\t\t * Returns the value of the first element in the array where predicate is true, and undefined\n\t\t * otherwise.\n\t\t * @param predicate find calls predicate once for each element of the array, in ascending\n\t\t * order, until it finds one where predicate returns true. If such an element is found, find\n\t\t * immediately returns that element value. Otherwise, find returns undefined.\n\t\t * @param thisArg If provided, it will be used as the this value for each invocation of\n\t\t * predicate. If it is not provided, undefined is used instead.\n\t\t */\n\t\tfind<S extends T>(predicate: (this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\n\t\tfind(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\n\t\t/**\n\t\t * Returns the elements of an array that meet the condition specified in a callback function.\n\t\t * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n\t\t * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n\t\t */\n\t\tfilter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n\t\t/**\n\t\t * Returns the elements of an array that meet the condition specified in a callback function.\n\t\t * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n\t\t * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n\t\t */\n\t\tfilter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n\t\t/**\n\t\t * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t\t * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n\t\t * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t\t */\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n\t\treduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n\t\t/**\n\t\t * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t\t * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n\t\t * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t\t */\n\t\treduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\t\t/**\n\t\t * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t\t * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n\t\t * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t\t */\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n\t\treduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n\t\t/**\n\t\t * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n\t\t * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n\t\t * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n\t\t */\n\t\treduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n\t\treadonly [n: number]: T;\n\t}\n}\n","\n\nnamespace fsync.ecsproxy {\n\n\t@DecoEntityProxy\n\texport class AnyEntityProxy extends EntityProxyBase {\n\n\t}\n}\n","\nnamespace fsync.ecsproxy {\n\texport type TConfigId = number\n\texport type TEntityID = fsync.EntityID\n}\n","namespace fsync {\n\n\t@cname(\"Translation\")\n\t@ecsproxy.DecoCompProxy\n\texport class Translation implements IComponent {\n\t\tvalue: Vector3 = new Vector3()\n\t}\n\n\t@cname(\"Scale\")\n\t@ecsproxy.DecoCompProxy\n\texport class Scale implements IComponent {\n\t\tvalue: Vector3 = new Vector3(1)\n\t}\n\n\t@cname(\"Rotation\")\n\t@ecsproxy.DecoCompProxy\n\texport class Rotation implements IComponent {\n\t\tvalue: Vector4 = Vector4.fromNumArray([0, 0, 0, 1])\n\t}\n\n}","namespace fsync {\n\n\texport class Device {\n\t\tget pixelRatio(): number {\n\t\t\treturn window.devicePixelRatio\n\t\t}\n\n\t\tclientSize: Vector3\n\n\t\tget clientRect() {\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\twidth: this.clientSize.x,\n\t\t\t\theight: this.clientSize.y,\n\t\t\t}\n\t\t}\n\n\t\tuserEventHandlers: ((data: string) => void)[]\n\n\t\tinit() {\n\t\t\tthis.userEventHandlers = []\n\t\t\tthis.clientSize = new Vector3()\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\texport const device = new Device().init()\n\n}","namespace fsync {\n\n\texport class Platform {\n\t\tisBrowser: boolean = false\n\n\t\tinit() {\n\t\t\tthis.isBrowser = (document != null)\n\t\t\treturn this\n\t\t}\n\t}\n\n\texport const platform = new Platform().init()\n\n}","namespace fsync {\n\n\texport type UserInputData = {\n\t\taction: \"onsetup\" | \"updateclientsize\" | \"onkeydown\" | \"onkeyup\" | \"onmousemove\" | \"onmousedown\" | \"onmouseup\" | \"ontouchmove\" | \"ontouchstart\" | \"ontouchend\",\n\t\tevent: {\n\t\t\tclientX?: number,\n\t\t\tclientY?: number,\n\t\t\tkeyCode?: number,\n\t\t\tkey?: string,\n\t\t\ttouches?: {\n\t\t\t\tidentifier: number,\n\t\t\t\tclientX?: number,\n\t\t\t\tclientY?: number,\n\t\t\t}[]\n\t\t},\n\t\tclientSize: {\n\t\t\twidth: number,\n\t\t\theight: number,\n\t\t},\n\t}\n\n\texport type UserInputHandler = (data: UserInputData) => void\n\n\tconst keyCodeMap = {\n\t\t[65]: 'a',\n\t\t[87]: 'w',\n\t\t[83]: 's',\n\t\t[68]: 'd',\n\t\t[32]: 'space',\n\t\t[66]: 'b',\n\t}\n\texport class UserInput {\n\t\tstatic readonly inst = new UserInput().init()\n\n\t\tprotected eventHandlerMap: { [key: string]: UserInputHandler }\n\n\t\tprotected eventHandler: (data: string) => void\n\n\t\tenable: boolean = true\n\n\t\tget clientSize(): Vector3 {\n\t\t\treturn device.clientSize\n\t\t}\n\t\tinit() {\n\t\t\tthis.eventHandlerMap = EmptyTable()\n\n\t\t\tthis.eventHandler = (sdata) => {\n\t\t\t\tconst data = JSON.parse(sdata)\n\n\t\t\t\tif (!this.enable) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (data.action == \"updateclientsize\") {\n\t\t\t\t\tthis.clientSize.x = data.clientSize.width\n\t\t\t\t\tthis.clientSize.y = data.clientSize.height\n\t\t\t\t}\n\n\t\t\t\tif (data.event.keyCode != null) {\n\t\t\t\t\tdata.event.key = keyCodeMap[data.event.keyCode]\n\t\t\t\t}\n\t\t\t\tdata.event.key = keyCodeMap[data.event.keyCode]\n\t\t\t\tfor (let handler of Object.values(this.eventHandlerMap)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\thandler(data)\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdevice.userEventHandlers.push(this.eventHandler)\n\t\t\treturn this\n\t\t}\n\n\t\taddHandler(name: string, handler: UserInputHandler) {\n\t\t\tthis.eventHandlerMap[name] = handler\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport class ColliderCastInput {\n\t\ttarget: Entity\n\t\tquery: IEntityQuery\n\t\tentityManager: EntityManager\n\t}\n\n\texport class RayCastInput {\n\t\ttarget: Entity\n\t\tquery: IEntityQuery\n\t\tentityManager: EntityManager\n\t\tbeginPoint: Vector3\n\t\tendPoint: Vector3\n\t}\n\n\texport class CollisionHelper {\n\t\tcastTargetColliders2D(input: ColliderCastInput, call: (entity1: Entity, entity2: Entity) => any): void {\n\t\t\tconst { entityManager, query, target: entity1 } = input\n\t\t\tconst entities = query.toArray()\n\t\t\tfor (let entity2 of entities) {\n\t\t\t\tif (entity1 == entity2) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tlet trans1 = entityManager.getComponent(entity1, Translation)\n\t\t\t\tlet shape1 = entityManager.getComponent(entity1, Shape)\n\t\t\t\tlet trans2 = entityManager.getComponent(entity2, Translation)\n\t\t\t\tlet shape2 = entityManager.getComponent(entity2, Shape)\n\n\t\t\t\tlet dist = Vector.distance(trans1.value, trans2.value)\n\t\t\t\tif (dist <= (shape1.radius + shape2.radius)) {\n\t\t\t\t\tif (!!call(entity1, entity2)) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcastTargetWithRay(input: RayCastInput, call: (entity1: Entity, entity2: Entity) => any) {\n\t\t\tconst { entityManager, beginPoint, endPoint, query, target: entity1 } = input\n\t\t\tconst entities = query.toArray()\n\n\t\t\t// 射线检测参数\n\t\t\tlet p1 = beginPoint\n\t\t\tlet p2 = endPoint\n\t\t\tlet dirVec = Vector.normalizeSelf(Vector.subDown(p1.clone(), p2))\n\t\t\t// 计算点到直线距离\n\t\t\tconst calcPLD = (pt: Vector3) => {\n\t\t\t\tlet tv = Vector.subDown(p1.clone(), pt)\n\t\t\t\treturn Math.abs(Vector.dot(dirVec, tv))\n\t\t\t}\n\n\t\t\t// 计算三点角度\n\t\t\tconst calcTh = (p0: Vector3, p1: Vector3, p2: Vector3) => {\n\t\t\t\tlet th = Vector.dot(Vector.subDown(p0.clone(), p1), Vector.subDown(p0.clone(), p2))\n\t\t\t\treturn th\n\t\t\t}\n\n\t\t\tfor (let entity2 of entities) {\n\t\t\t\tif (entity1 == entity2) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tlet trans1 = entityManager.getComponent(entity1, Translation)\n\t\t\t\tlet shape1 = entityManager.getComponent(entity1, Shape)\n\t\t\t\tlet trans2 = entityManager.getComponent(entity2, Translation)\n\t\t\t\tlet shape2 = entityManager.getComponent(entity2, Shape)\n\n\t\t\t\tlet distanceMin = shape1.radius + shape2.radius\n\n\t\t\t\t// let dist = Vector.distance(trans1.value, trans2.value)\n\t\t\t\t// if (dist <= (shape1.radius + shape2.radius)) {\n\t\t\t\t// \tif (call(entity1, entity2)) {\n\t\t\t\t// \tbreak\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t\tlet p3 = trans2.value\n\t\t\t\tlet th1 = calcTh(p1, p2, p3)\n\t\t\t\tif (th1 < 0) {\n\t\t\t\t\t// 在起点外侧\n\t\t\t\t\tlet distance = Vector.distance(p1, p3)\n\t\t\t\t\tif (distance < distanceMin) {\n\t\t\t\t\t\tif (!!call(entity1, entity2)) {\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet th2 = calcTh(p2, p1, p3)\n\t\t\t\t\tif (th2 < 0) {\n\t\t\t\t\t\t// 终点外侧\n\t\t\t\t\t\tlet distance = Vector.distance(p2, p3)\n\t\t\t\t\t\tif (distance < distanceMin) {\n\t\t\t\t\t\t\tif (!!call(entity1, entity2)) {\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 线段内侧\n\t\t\t\t\t\tlet D = calcPLD(trans2.value)\n\t\t\t\t\t\tif (D < distanceMin) {\n\t\t\t\t\t\t\tif (!!call(entity1, entity2)) {\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\texport const collisionHelper = new CollisionHelper()\n\n}","namespace fsync {\n\n\texport type DefaultShapeType = \"circle\" | \"rectangle\"\n\t@cname(\"Shape\")\n\t@ecsproxy.DecoCompProxy\n\texport class Shape implements IComponent {\n\t\tshapeType: DefaultShapeType\n\t\tradius: number\n\t}\n\n}","namespace fsync {\n\n\texport type PrefabId = string\n\n\texport class PrefabMeta {\n\t\tprefabId: PrefabId\n\n\t\tinit(prefabId: PrefabId) {\n\t\t\tthis.prefabId = prefabId\n\t\t\treturn this\n\t\t}\n\t}\n\n\texport interface PrefabEnv {\n\t\tsystem?: fsync.SystemBase\n\t\tentityManager: fsync.EntityManager\n\t\tworld: fsync.ECSWorld\n\t}\n\n\t/**\n\t * prefab实例化环境\n\t */\n\texport class ViewPrefabEnv {\n\t\tentityManager: EntityManager\n\t\tviewBinder: ViewBindManager\n\t\tprefabHelper: IPrefabHelper\n\t\tutils: FrameSyncUtils\n\t\tinit(world: ECSWorld, viewBinder: ViewBindManager, prefabHelper: IPrefabHelper) {\n\t\t\tthis.utils = world.utils\n\t\t\tthis.entityManager = world.entityManager\n\t\t\tthis.viewBinder = viewBinder\n\t\t\tthis.prefabHelper = prefabHelper\n\t\t\treturn this\n\t\t}\n\n\t\tinstantiate(prefab: IPrefab): Entity {\n\t\t\treturn this.prefabHelper.instantiate(prefab, this)\n\t\t}\n\t}\n\n\texport interface IPrefab {\n\t\tinit(): IPrefab\n\t\tload(): IPrefab\n\t\tcreateEntity(depsEnv: ViewPrefabEnv): Entity\n\t\tgetPrefabMeta(): PrefabMeta\n\t\tcreate(depsEnv: ViewPrefabEnv): Entity\n\t}\n\n}","namespace fsync {\n\n\texport class PrefabBase implements IPrefab {\n\t\tinit(): IPrefab {\n\t\t\treturn this\n\t\t}\n\n\t\tload(): IPrefab {\n\t\t\treturn this\n\t\t}\n\n\t\tcreate(depsEnv: ViewPrefabEnv): Entity {\n\t\t\tlet entity = this.createEntity(depsEnv)\n\t\t\tlet meta = this.getPrefabMeta()\n\t\t\tdepsEnv.entityManager.attachComponent(entity, meta)\n\t\t\t// let view = this.createView(depsEnv)\n\t\t\t// depsEnv.viewBinder.bindEntityView(entity, view)\n\t\t\treturn entity\n\t\t}\n\n\t\tgetPrefabMeta(): PrefabMeta {\n\t\t\tthrow new Error(\"Method not implemented.\");\n\t\t}\n\n\t\tcreateEntity(depsEnv: ViewPrefabEnv): Entity {\n\t\t\tthrow new Error(\"Method not implemented.\");\n\t\t}\n\t}\n}","namespace fsync {\n\nexport class PrefabManager {\n\tpublic static readonly inst: PrefabManager = new PrefabManager().init()\n\n\tprefabMap: { [key: string]: IPrefab }\n\n\tinit() {\n\t\tthis.prefabMap = EmptyTable()\n\t\treturn this\n\t}\n\n\tloadPrefab(prefabClz: new () => IPrefab) {\n\t\tif (this.prefabMap[prefabClz.name]) {\n\t\t\treturn this.prefabMap[prefabClz.name]\n\t\t}\n\n\t\tlet prefab = new prefabClz().init()\n\t\tprefab.load()\n\t\tthis.prefabMap[prefabClz.name] = prefab\n\t\treturn prefab\n\t}\n\n\tprefabViewMap: { [key: string]: new () => IView } = EmptyTable()\n\tregisterPrefabView(key: string, view: new () => IView) {\n\t\tthis.prefabViewMap[key] = view\n\t}\n\n\tgetPrefabView(key: string): new () => IView {\n\t\treturn this.prefabViewMap[key]\n\t}\n\n}\n\n}","namespace fsync {\n\n\texport class ScenePrefab extends PrefabBase {\n\t\tdepsEnv: ViewPrefabEnv\n\t\tget prefabMananger() {\n\t\t\treturn PrefabManager.inst\n\t\t}\n\n\t\tget entityManager() {\n\t\t\treturn this.depsEnv.entityManager\n\t\t}\n\n\t\tsetEnv(depsEnv: ViewPrefabEnv): void {\n\t\t\tthis.depsEnv = depsEnv\n\t\t}\n\n\t\tinstantiate<T extends IPrefab>(prefab: T): Entity {\n\t\t\treturn prefab.create(this.depsEnv)\n\t\t}\n\n\t\tinstantiateEntity<T extends IPrefab>(prefab: T): Entity {\n\t\t\treturn prefab.createEntity(this.depsEnv)\n\t\t}\n\n\t\tcreateEntity(depsEnv: ViewPrefabEnv): Entity {\n\t\t\treturn null\n\t\t}\n\t}\n\n}","\nnamespace fsync {\n\twindow[\"fsync\"] = fsync\n\twindow[\"lang\"] = lang\n}\n","\nnamespace fsync.app {\n\texport class GameSceneBase implements fsync.app.ISubScene {\n\n\t\tsubScenes: fsync.app.SubScene[]\n\n\t\tsharedSlots: any\n\t\tfightWorld: fsync.app.GameWorld\n\n\t\tclear(): void {\n\t\t\tthis.subScenes.forEach(scene => scene.clear())\n\t\t}\n\t\tstart(): void {\n\t\t\tthis.subScenes.forEach(scene => scene.start())\n\t\t}\n\t\tupdate(): void {\n\t\t\tthis.subScenes.forEach(scene => scene.update())\n\t\t}\n\t\tinit(fightWorld: fsync.app.GameWorld, sharedSlots: any) {\n\t\t\tthis.sharedSlots = sharedSlots\n\t\t\tthis.fightWorld = fightWorld\n\t\t\tthis.subScenes = []\n\n\t\t\treturn this\n\t\t}\n\n\t\tloadSubScenes(cls: new () => fsync.app.SubScene) {\n\t\t\tconst fightWorld = this.fightWorld\n\t\t\tconst sharedSlots = this.sharedSlots\n\n\t\t\tlet mainScene = new cls().init(fightWorld.mainWorld, sharedSlots)\n\t\t\tthis.subScenes.push(mainScene)\n\n\t\t\tlet predictScene = new cls().init(fightWorld.predictWorld, sharedSlots)\n\t\t\tthis.subScenes.push(predictScene)\n\n\t\t\tfor (let scene of this.subScenes) {\n\t\t\t\tscene.initScene()\n\t\t\t}\n\t\t}\n\t}\n}\n","namespace fsync.app {\n\t/**\n\t * 用于构建游戏世界运作规则\n\t */\n\texport class GameWorld {\n\t\tmainProcess: fsync.WorldMainProcess\n\n\t\t/**\n\t\t * 是否准备完毕可以调度\n\t\t */\n\t\tisWorldReady: boolean = false\n\n\t\tmainWorld: SubWorld\n\t\tpredictWorld: SubWorld\n\n\t\t/**\n\t\t * 清空重置世界\n\t\t */\n\t\tclear() {\n\t\t\tthis.isWorldReady = false\n\n\t\t\tthis.mainWorld.clear()\n\t\t\tthis.predictWorld.clear()\n\t\t\tthis.mainProcess.clear()\n\t\t}\n\n\t\t/**\n\t\t * 开始运转\n\t\t */\n\t\tstart() {\n\t\t\tthis.mainWorld.start()\n\t\t\tthis.predictWorld.start()\n\n\t\t\tthis.isWorldReady = true\n\t\t}\n\n\t\t/**\n\t\t * 加载子世界\n\t\t * @param clsMain \n\t\t * @param clsPredict \n\t\t * @param slots \n\t\t */\n\t\tloadSubWorlds(clsMain: new () => SubWorld, clsPredict: new () => SubWorld, slots: any) {\n\t\t\tlet mainWorld = new clsMain().init({\n\t\t\t\tmainProcess: this.mainProcess,\n\t\t\t\tupdater: this.mainProcess.mainUpdater,\n\t\t\t\tworld: this.mainProcess.worldMain,\n\t\t\t})\n\t\t\tlet predictWorld = new clsPredict().init({\n\t\t\t\tmainProcess: this.mainProcess,\n\t\t\t\tupdater: this.mainProcess.predictUpdater,\n\t\t\t\tworld: this.mainProcess.worldPredict,\n\t\t\t})\n\t\t\tthis.mainWorld = mainWorld\n\t\t\tthis.predictWorld = predictWorld\n\n\t\t\tmainWorld.initSystems(slots)\n\t\t\tpredictWorld.initSystems(slots)\n\t\t}\n\n\t\tinit() {\n\t\t\tthis.mainProcess = new fsync.WorldMainProcess().init()\n\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * 世界调度\n\t\t */\n\t\tupdate() {\n\t\t\tif (!this.isWorldReady) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tthis.mainWorld.update()\n\t\t\tthis.predictWorld.update()\n\t\t\tthis.mainProcess.update()\n\t\t}\n\t}\n}\n","namespace fsync.app {\n\texport interface ISubScene {\n\t\t/**\n\t\t * 清除场景\n\t\t */\n\t\tclear(): void\n\t\t/**\n\t\t * 开始新场景运作\n\t\t */\n\t\tstart(): void\n\t\tupdate(): void\n\t}\n\n\t/**\n\t * 构建管理游戏玩法场景\n\t */\n\texport class SubScene implements ISubScene {\n\t\tworld: SubWorld\n\t\tsharedSlots: any\n\n\t\t/**\n\t\t * 清除场景\n\t\t */\n\t\tclear() {\n\n\t\t}\n\n\t\t/**\n\t\t * 开始新场景运作\n\t\t */\n\t\tstart() {\n\n\t\t}\n\n\t\tinit(world: SubWorld, sharedSlots: any) {\n\t\t\tthis.world = world\n\t\t\tthis.sharedSlots = sharedSlots\n\n\t\t\tthis.initScene()\n\n\t\t\treturn this\n\t\t}\n\n\t\tinitScene() {\n\n\t\t}\n\n\t\tupdate() {\n\n\t\t}\n\n\t}\n\n}\n","namespace fsync.app {\n\t/**\n\t * 用于构建游戏世界规则\n\t */\n\texport class SubWorld {\n\t\tname: string = \"unkown_SubWorld\"\n\t\tmainProcess: fsync.WorldMainProcess\n\t\tinputCmdBuffer: fsync.InputCmdBuffer\n\t\ttimer: fsync.Timer\n\n\t\tworld: fsync.ECSWorld\n\t\tupdater: fsync.UpdaterGroupManager\n\n\t\tget entityManager() {\n\t\t\treturn this.world.entityManager\n\t\t}\n\n\t\tget dataManager() {\n\t\t\treturn this.world.dataManager\n\t\t}\n\n\t\tclear() {\n\t\t\t// this.world.entityManager.clearEntities()\n\t\t}\n\n\t\tstart() {\n\t\t\tthis.timer.setTime(Date.now())\n\t\t}\n\n\t\t/**\n\t\t * 创建子系统并加入调度组\n\t\t * @param groupName \n\t\t * @param tsys \n\t\t */\n\t\taddSystem<T extends fsync.SystemBase>(tsys: new () => T, groupName: string): T {\n\t\t\tlet sys = new tsys()\n\t\t\tsys.world = this.world\n\t\t\tsys.init()\n\t\t\tthis.updater.getUpdaterGroup(groupName).addUpdater(sys)\n\t\t\treturn sys\n\t\t}\n\n\t\t/**\n\t\t * 初始化各种子系统实例设置\n\t\t * @param sharedSlots \n\t\t */\n\t\tinitSystems(sharedSlots: any) {\n\n\t\t}\n\n\t\tinit(input: SubWorldInitInput) {\n\t\t\tthis.world = input.world\n\t\t\tthis.updater = input.updater\n\t\t\tthis.mainProcess = input.mainProcess\n\n\t\t\tthis.timer = this.world.utils.timer\n\t\t\tthis.timer.setMaxDeltaTime(100)\n\n\t\t\treturn this\n\t\t}\n\n\t\tupdate() {\n\t\t\t// this.timer.updateTime(Date.now())\n\t\t}\n\t}\n}\n","namespace fsync.app {\n\texport interface SubWorldInitInput {\n\t\tmainProcess?: fsync.WorldMainProcess\n\t\tworld?: fsync.ECSWorld\n\t\tupdater?: fsync.UpdaterGroupManager\n\t}\n}\n","\nnamespace fsync {\n\n\texport type InputCmdId = string\n\n\texport type IGameInputCmd = {\n\t\t/**\n\t\t * 命令类型\n\t\t */\n\t\tcmdType: \"RoleCmd\" | \"Pass\"\n\t\tcmdId: InputCmdId\n\t\t/**\n\t\t * 创建顺序，保证命令执行顺序\n\t\t */\n\t\tcmdIndex: number\n\t\t/**\n\t\t * 该命令是否需要触发同步\n\t\t * - 默认false\n\t\t */\n\t\tneedSync?: bool\n\t\t// 来源\n\t\troute: \"net\" | \"local\"\n\t\t// 输入端id，通常可使用roleId代替\n\t\troleId: TRoleId\n\t\t// 创建时间（发送时间）\n\t\tcreateTime: number\n\t\t/**\n\t\t * 生成类型：\n\t\t *  con：连续\n\t\t *  sep：离散\n\t\t */\n\t\tgenType?: \"con\" | \"sep\"\n\t\t// updateCount?: number\n\t\t// lastCmdId?: InputCmdId\n\t\t// 创建时世界帧率\n\t\tcreateFrameCount?: number\n\t\tframeCount?: number\n\t\t// 备份用\n\t\tnetFrameCount?: number\n\t\t/**\n\t\t * 是处理过粘帧\n\t\t */\n\t\tisAdjustedForSurge?: boolean\n\t\t// 接收时间\n\t\treceivedTime?: number\n\n\t\t/**\n\t\t * 网络波动造成命令帧重叠\n\t\t */\n\t\tisSurge?: bool\n\t}\n\n}","namespace fsync {\n\n\tconst sortCmds = (cmds: IGameInputCmd[]) => {\n\t\tcmds.sort((a, b) => a.cmdIndex - b.cmdIndex)\n\t}\n\n\t/**\n\t * 针对单个角色的命令缓冲管理\n\t */\n\texport class SinglePortCmdBuffer implements IMerge<SinglePortCmdBuffer> {\n\t\tname: string = \"unknown\"\n\n\t\troleId: TRoleId\n\n\t\tprotected cmds: IGameInputCmd[]\n\n\t\tprotected cmdReorderQueue: CmdReorderQueue\n\n\t\tprotected curFrameCount: number\n\t\tprotected curOutdateCmdIndex: number\n\n\t\t/**\n\t\t * 当前命令执行进度\n\t\t */\n\t\tcurCmdIndex: number\n\n\t\tinit(roleId: TRoleId) {\n\t\t\tthis.roleId = roleId\n\t\t\tthis.cmds = []\n\t\t\tthis.cmdReorderQueue = new CmdReorderQueue().init()\n\t\t\tthis.curCmdIndex = 0\n\t\t\tthis.curFrameCount = 0\n\t\t\tthis.curOutdateCmdIndex = 0\n\n\t\t\treturn this\n\t\t}\n\n\t\tprotected latestNetCmd: IGameInputCmd = null\n\t\tgetLatestNetCmd() {\n\t\t\treturn this.latestNetCmd\n\t\t}\n\n\t\tlatestOrderedCmdIndex: number = 0\n\t\t/**\n\t\t * 获取连续cmdIndex下,最新的net cmd\n\t\t */\n\t\tgetOrderedNetCmd() {\n\t\t\tsortCmds(this.cmds)\n\t\t\tlet cmdIndex = this.latestOrderedCmdIndex\n\t\t\tthis.cmds.forEach(cmd => {\n\t\t\t\tif (cmd.cmdIndex == cmdIndex + 1) {\n\t\t\t\t\tcmdIndex += 1\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tthis.latestOrderedCmdIndex = cmdIndex\n\n\t\t\treturn this.cmds.find(cmd => cmd.cmdIndex == cmdIndex)\n\t\t}\n\n\t\tprotected latestLocalCmd: IGameInputCmd = null\n\t\t/**\n\t\t * 按cmdIndex排序, 获取最新的本地命令\n\t\t */\n\t\tgetLatestLocalCmd(): IGameInputCmd {\n\t\t\treturn this.latestLocalCmd\n\t\t}\n\n\t\tputCmd(cmd: IGameInputCmd) {\n\t\t\tif (cmd.route == \"local\") {\n\t\t\t\tthis._putCmd(cmd)\n\t\t\t} else {\n\t\t\t\tthis.cmdReorderQueue.put(cmd)\n\t\t\t\tthis.flushNetCmds()\n\t\t\t\tthis.adjustSurgedCmds(cmd)\n\t\t\t}\n\t\t}\n\n\t\t// 重新整理接收到的网络命令顺序\n\t\tprotected flushNetCmds() {\n\t\t\tconst cmdReorderQueue = this.cmdReorderQueue\n\t\t\twhile (true) {\n\t\t\t\tlet cmd = cmdReorderQueue.pop()\n\t\t\t\tif (cmd == null) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tthis._putCmd(cmd)\n\t\t\t}\n\n\t\t}\n\n\t\tneedSync: boolean = false\n\n\t\tprotected _putCmd(cmd: IGameInputCmd) {\n\t\t\tif (cmd.route == \"net\") {\n\t\t\t\tif (this.latestNetCmd == null || this.latestNetCmd.cmdIndex < cmd.cmdIndex) {\n\t\t\t\t\tthis.latestNetCmd = cmd\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet c = this.cmds.find(c => c.cmdId == cmd.cmdId)\n\t\t\tif (c != null) {\n\t\t\t\tif (c.route == \"net\") {\n\t\t\t\t\t//pass\n\t\t\t\t} else if (c.route == \"local\") {\n\t\t\t\t\t// 优先使用net替换local\n\t\t\t\t\tif (cmd.route == \"net\") {\n\t\t\t\t\t\tthis.needSync = true\n\t\t\t\t\t\t// console.log(\"replace\", c.cmdIndex, '->', cmd.cmdIndex)\n\t\t\t\t\t\tlet index = this.cmds.indexOf(c)\n\t\t\t\t\t\tthis.cmds[index] = cmd\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (cmd.route == \"net\") {\n\t\t\t\t\tthis.needSync = true\n\t\t\t\t}\n\t\t\t\t// 没有net，则暂时使用local\n\t\t\t\tthis.cmds.push(cmd)\n\t\t\t}\n\t\t}\n\n\t\t// TODO: 网络帧固定拟合为本地帧\n\t\tsurLastCmd: IGameInputCmd\n\t\tadjustSurgedCmds(triggerCmd: IGameInputCmd) {\n\t\t\tlet surLastCmd = this.surLastCmd\n\n\t\t\t//#region \n\t\t\t// 辅助前置条件, 仅帮助优化性能\n\t\t\tif (surLastCmd != null\n\t\t\t\t&& triggerCmd != null\n\t\t\t\t&& (surLastCmd.cmdIndex + 1 != triggerCmd.cmdIndex)\n\t\t\t) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t//#endregion\n\n\t\t\tlet cmds = this.cmds.filter(cmd => cmd.route == \"net\")\n\t\t\tif (cmds.length > 0) {\n\t\t\t\tif (surLastCmd == null) {\n\t\t\t\t\tsurLastCmd = cmds[0]\n\t\t\t\t\tcmds = cmds.slice(1)\n\t\t\t\t}\n\t\t\t\tcmds.forEach((cmd, index) => {\n\t\t\t\t\tif (surLastCmd.cmdIndex + 1 == cmd.cmdIndex) {\n\t\t\t\t\t\tlet localDiff = cmd.createFrameCount - surLastCmd.createFrameCount\n\t\t\t\t\t\tlet netDiff = cmd.frameCount - surLastCmd.frameCount\n\t\t\t\t\t\tlet diff = netDiff - localDiff\n\t\t\t\t\t\tif (0 < diff\n\t\t\t\t\t\t\t// && diff < 5\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (!cmd.isAdjustedForSurge) {\n\t\t\t\t\t\t\t\tcmd.isAdjustedForSurge = true\n\n\t\t\t\t\t\t\t\tcmd.netFrameCount = cmd.frameCount\n\n\t\t\t\t\t\t\t\t// let predictFrameCount = surLastCmd.frameCount + localDiff\n\t\t\t\t\t\t\t\tlet maxDiff = 3\n\t\t\t\t\t\t\t\tif (diff > 5) {\n\t\t\t\t\t\t\t\t\tmaxDiff = 2\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet predictFrameCount = cmd.frameCount - Math.min(diff, maxDiff)\n\t\t\t\t\t\t\t\tif (false) {\n\t\t\t\t\t\t\t\t\tconsole.log(`adjustSurgedCmds:(${surLastCmd.cmdIndex},${surLastCmd.createFrameCount},${surLastCmd.frameCount})`\n\t\t\t\t\t\t\t\t\t\t+ `,(${cmd.cmdIndex},${cmd.createFrameCount},${cmd.frameCount})`\n\t\t\t\t\t\t\t\t\t\t+ `|${cmd.frameCount} -> ${predictFrameCount}`)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcmd.frameCount = predictFrameCount\n\t\t\t\t\t\t\t\tif (cmd.frameCount < 0) {\n\t\t\t\t\t\t\t\t\tconsole.error(\"lkjwefklj\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsurLastCmd = cmd\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\tthis.surLastCmd = surLastCmd\n\t\t}\n\n\t\tpopFrameCmds(frameCount: number, pops: IGameInputCmd[]): IGameInputCmd[] {\n\t\t\tsortCmds(this.cmds)\n\n\t\t\t// const outdateFrameCount = this.curFrameCount\n\t\t\tconst outdateCmdIndex = this.curCmdIndex\n\t\t\tlet curCmdIndex = this.curCmdIndex\n\t\t\tfor (let cmd of this.cmds) {\n\t\t\t\tif (curCmdIndex + 1 == cmd.cmdIndex && cmd.frameCount <= frameCount) {\n\t\t\t\t\tthis.processFrameCmdsSurge(cmd)\n\t\t\t\t\tpops.push(cmd)\n\n\t\t\t\t\tif (curCmdIndex != cmd.cmdIndex - 1) {\n\t\t\t\t\t\tconsole.warn(\"invalid cmdIndex\")\n\t\t\t\t\t}\n\t\t\t\t\tcurCmdIndex = Math.max(curCmdIndex, cmd.cmdIndex)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curCmdIndex = curCmdIndex\n\t\t\tthis.curFrameCount = frameCount\n\n\t\t\tthis.cleanOutdateCmds()\n\n\t\t\treturn pops\n\t\t}\n\n\t\t/**\n\t\t * 处理网络波动造成的挤帧，避免因此造成的跳帧\n\t\t * - 没有特殊情况，每帧都只发送一个帧命令包\n\t\t * - pops 已按 cmdIndex 递增排序，如果出现 (cmdIndex0 < cmdIndex1 && frameCount0 >= frameCount1)，则判定 cmdIndex1 对应的 cmd 为重叠帧\n\t\t * - 如果出现了挤帧，那么客户端代替服务端进行丢帧（仅仅标记为重合帧，但是不直接删除，由业务处理）\n\t\t */\n\t\tcurNetFrameCount: number = -1\n\t\t/**\n\t\t * 粘帧次数\n\t\t */\n\t\tsurgeTimes: number = 0\n\n\t\t/**\n\t\t * 允许最大粘帧次数\n\t\t */\n\t\tallowSurgeTimesMax: number = 1\n\t\tprocessFrameCmdsSurge(cmd: IGameInputCmd) {\n\t\t\t// sortCmds(pops)\n\t\t\tconst allowSurgeTimesMax = this.allowSurgeTimesMax\n\t\t\tlet frameCount = this.curNetFrameCount\n\t\t\t// for (let cmd of pops) \n\t\t\t{\n\t\t\t\tif (cmd.route == \"net\") {\n\t\t\t\t\tif (cmd.frameCount <= frameCount) {\n\t\t\t\t\t\tlet isSurge = true\n\t\t\t\t\t\tif (cmd.frameCount > frameCount - 2) {\n\t\t\t\t\t\t\tif (this.surgeTimes <= allowSurgeTimesMax) {\n\t\t\t\t\t\t\t\tthis.surgeTimes++\n\t\t\t\t\t\t\t\tisSurge = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isSurge) {\n\t\t\t\t\t\t\tcmd.isSurge = true\n\t\t\t\t\t\t\tconsole.warn(\"marksurge:\", this.name, this.roleId, cmd.cmdIndex, \"for\", frameCount, \">=\", cmd.frameCount)\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 帧数增大\n\t\t\t\t\t\tframeCount = cmd.frameCount\n\t\t\t\t\t\tthis.surgeTimes = 0\n\t\t\t\t\t}\n\t\t\t\t\tthis.curNetFrameCount = frameCount\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 清理过期的指令\n\t\t */\n\t\tprotected cleanOutdateCmds() {\n\t\t\tlet cmds = this.cmds\n\t\t\tsortCmds(cmds)\n\n\t\t\tlet outdateIndex = this.curOutdateCmdIndex\n\t\t\tlet delIndex = 0\n\t\t\tfor (let cmd of cmds) {\n\t\t\t\tif (cmd.cmdIndex == outdateIndex + 1 && cmd.frameCount <= this.curFrameCount && cmd.route == \"net\") {\n\t\t\t\t\t// delete\n\t\t\t\t\tdelIndex++\n\t\t\t\t\toutdateIndex++\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.curOutdateCmdIndex = outdateIndex\n\t\t\t// this.cmds = cmds.slice(delIndex)\n\t\t\tthis.cmds = cmds.filter(c => c.cmdIndex >= outdateIndex - 8)\n\t\t}\n\n\t\t// /**\n\t\t//  * 清理过期的指令\n\t\t//  */\n\t\t// cleanOutdateLocalCmdsForce() {\n\t\t// \tlet cmds = this.cmds\n\t\t// \tsortCmds(cmds)\n\n\t\t// \tlet outdateIndex = this.curOutdateCmdIndex + 1\n\t\t// \tlet delIndex = 0\n\t\t// \tfor (let cmd of cmds) {\n\t\t// \t\tif (cmd.cmdIndex <= outdateIndex && cmd.frameCount <= this.curFrameCount) {\n\t\t// \t\t\t// delete\n\t\t// \t\t\tdelIndex++\n\t\t// \t\t\toutdateIndex++\n\t\t// \t\t}\n\t\t// \t}\n\t\t// \tthis.curOutdateCmdIndex = outdateIndex - 1\n\t\t// \tthis.cmds = cmds.slice(delIndex - 12)\n\t\t// }\n\n\t\tmergeFrom(cmdBuffer: SinglePortCmdBuffer) {\n\t\t\tcmdBuffer.flushNetCmds()\n\t\t\tthis.flushNetCmds()\n\n\t\t\tlet tCmds = this.cmds\n\t\t\tlet sCmds = cmdBuffer.cmds\n\n\t\t\tlet cmdIdMap = EmptyTable()\n\t\t\tfor (let cmd of tCmds) {\n\t\t\t\tcmdIdMap[cmd.cmdId] = true\n\t\t\t}\n\n\t\t\tfor (let i = sCmds.length - 1; i > -1; i--) {\n\t\t\t\tlet cmd = sCmds[i]\n\t\t\t\tif (!cmdIdMap[cmd.cmdId]) {\n\t\t\t\t\t// 深度克隆, 避免共享数据bug\n\t\t\t\t\ttCmds.unshift(JSON.parse(JSON.stringify(cmd)))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.syncLocalCmd()\n\n\t\t\tif (cmdBuffer.surLastCmd == null) {\n\t\t\t\tthis.surLastCmd = null\n\t\t\t} else {\n\t\t\t\tthis.surLastCmd = this.cmds.find(cmd => cmd.cmdIndex == cmdBuffer.surLastCmd.cmdIndex)\n\t\t\t}\n\t\t\tthis.adjustSurgedCmds(null)\n\n\t\t\tthis.curCmdIndex = cmdBuffer.curCmdIndex\n\t\t\tthis.curFrameCount = cmdBuffer.curFrameCount\n\t\t\tthis.curOutdateCmdIndex = cmdBuffer.curOutdateCmdIndex\n\n\t\t\tthis.cleanOutdateCmds()\n\n\t\t\tconsole.log(\"mergex\")\n\t\t}\n\n\t\tsyncLocalCmd() {\n\n\t\t\t// 适配本地指令\n\t\t\tlet latestNetCmd: IGameInputCmd = this.getLatestNetCmd()\n\n\t\t\tif (latestNetCmd != null) {\n\t\t\t\tlet diff = latestNetCmd.frameCount - latestNetCmd.createFrameCount\n\t\t\t\tif (diff < 0) {\n\t\t\t\t\tdiff = 0\n\t\t\t\t}\n\t\t\t\tfor (let cmd of this.cmds) {\n\t\t\t\t\tif (cmd.route == \"local\") {\n\t\t\t\t\t\tcmd.frameCount = cmd.createFrameCount + diff + 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * 命令缓冲\n\t * - 对收到的网络命令和本地命令执行合并\n\t * - 同时对收到的网络命令执行排序合帧, 应对丢帧/补帧等情况\n\t */\n\texport class InputCmdBuffer implements IMerge<InputCmdBuffer>{\n\t\tstatic orderid = 0\n\t\torderid: number = ++InputCmdBuffer.orderid\n\t\tname: string\n\t\t// constructor() {\n\t\t// \tconsole.error(\"lkwjeflk\")\n\t\t// }\n\n\t\troute: \"net\" | \"local\" = \"net\"\n\n\t\tprotected cmdBuffers: { [key: string]: SinglePortCmdBuffer } = EmptyTable()\n\n\t\tprotected latestLocalCmd: IGameInputCmd = null\n\t\tgetLatestLocalCmd() {\n\t\t\treturn this.latestLocalCmd\n\t\t}\n\n\t\tprotected latestUserCmd: IGameInputCmd = null\n\t\tgetLatestUserCmd() {\n\t\t\treturn this.latestUserCmd\n\t\t}\n\n\t\tprotected latestNetCmd: IGameInputCmd = null\n\t\tgetLatestNetCmd() {\n\t\t\treturn this.latestNetCmd\n\t\t}\n\n\t\tprotected getCmdBuffer(roleId: TRoleId): SinglePortCmdBuffer {\n\t\t\tlet cmdBuffer = this.cmdBuffers[roleId]\n\t\t\tif (cmdBuffer == null) {\n\t\t\t\tcmdBuffer = new SinglePortCmdBuffer().init(roleId)\n\t\t\t\tcmdBuffer.name = this.name\n\t\t\t\tthis.cmdBuffers[roleId] = cmdBuffer\n\t\t\t}\n\t\t\treturn cmdBuffer\n\t\t}\n\n\t\t// protected netCmds: IGameInputCmd[] = []\n\t\t// /**\n\t\t//  * 将网络指令存入缓存, 等待下一帧\n\t\t//  * @param cmd \n\t\t//  */\n\t\t// putNetCmd(cmd: IGameInputCmd) {\n\t\t// \tthis.netCmds.push(cmd)\n\t\t// }\n\t\t// update() {\n\t\t// \tthis.netCmds.forEach(cmd => {\n\t\t// \t\tthis.putCmd(cmd)\n\t\t// \t})\n\t\t// \tthis.netCmds.length = 0\n\t\t// }\n\n\t\tputCmd(cmd: IGameInputCmd) {\n\t\t\tif (cmd.cmdType != \"Pass\") {\n\t\t\t\tif (this.latestUserCmd == null || this.latestUserCmd.cmdIndex < cmd.cmdIndex) {\n\t\t\t\t\tthis.latestUserCmd = cmd\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cmd.route == \"net\") {\n\t\t\t\tif (this.latestNetCmd == null || this.latestNetCmd.cmdIndex == null || cmd.cmdIndex == null || this.latestNetCmd.cmdIndex < cmd.cmdIndex) {\n\t\t\t\t\tthis.latestNetCmd = cmd\n\t\t\t\t}\n\t\t\t} else if (cmd.route == \"local\") {\n\t\t\t\tif (this.latestLocalCmd == null || this.latestLocalCmd.cmdIndex < cmd.cmdIndex) {\n\t\t\t\t\tthis.latestLocalCmd = cmd\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cmd.cmdType == \"Pass\") {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// if (this.name == \"predict\") {\n\t\t\t// \t// if (cmd.route == \"net\") {\n\t\t\t// \tconsole.log(\"receivecmd:\", cmd.route, cmd.cmdIndex, cmd)\n\t\t\t// \t// }\n\t\t\t// }\n\n\t\t\tlet cmdBuffer = this.getCmdBuffer(cmd.roleId)\n\t\t\tcmdBuffer.needSync = false\n\t\t\tcmdBuffer.putCmd(cmd)\n\n\t\t\tif (cmdBuffer.needSync) {\n\t\t\t\tcmdBuffer.needSync = false\n\t\t\t\tthis.needSync = true\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 标记是否有同步需求\n\t\t */\n\t\tneedSync = false\n\t\t/**\n\t\t * 标记是否需要立即同步\n\t\t */\n\t\tneedSyncRightNow = false\n\t\tsurgeTimes: number = 0\n\n\t\tpopFrameCmds(frameCount: number): IGameInputCmd[] {\n\t\t\tlet pops: IGameInputCmd[] = []\n\t\t\tfor (let cmdBuffer of Object.values(this.cmdBuffers)) {\n\t\t\t\tcmdBuffer.popFrameCmds(frameCount, pops)\n\t\t\t}\n\n\t\t\t// 输出必须严格唯一排序，否则不同客户端有可能因为网络波动，结果不同\n\t\t\tpops.sort((a, b) => {\n\t\t\t\tlet n = 0\n\t\t\t\tif (a.roleId > b.roleId) {\n\t\t\t\t\tn += 10\n\t\t\t\t} else if (a.roleId < b.roleId) {\n\t\t\t\t\tn -= 10\n\t\t\t\t}\n\t\t\t\tif (a.cmdIndex > b.cmdIndex) {\n\t\t\t\t\tn += 1\n\t\t\t\t} else if (a.cmdIndex < b.cmdIndex) {\n\t\t\t\t\tn -= 1\n\t\t\t\t}\n\t\t\t\treturn n\n\t\t\t})\n\n\t\t\t// this.needSync = false\n\t\t\t// for (let cmd of pops) {\n\t\t\t// \tif (cmd.route == \"local\" && cmd.needSync) {\n\t\t\t// \t\tthis.needSync = true\n\t\t\t// \t\tbreak\n\t\t\t// \t}\n\t\t\t// }\n\n\t\t\t// if (this.name == \"predict\") {\n\t\t\t// \tpops.forEach(cmd => {\n\t\t\t// \t\t// if (cmd.route == \"net\") {\n\t\t\t// \t\tconsole.log(\"popcmd:\", cmd.route, cmd.cmdIndex, cmd)\n\t\t\t// \t\t// }\n\t\t\t// \t})\n\t\t\t// }\n\n\t\t\treturn pops\n\t\t}\n\n\t\tmergeFrom(cmdBuffer: InputCmdBuffer): void {\n\t\t\tfor (let roleId in cmdBuffer.cmdBuffers) {\n\t\t\t\tlet sCmdBuffer = cmdBuffer.cmdBuffers[roleId]\n\t\t\t\tlet tCmdBuffer = this.cmdBuffers[roleId]\n\t\t\t\ttCmdBuffer.mergeFrom(sCmdBuffer)\n\t\t\t}\n\t\t}\n\n\t\tsyncLocalCmd() {\n\t\t\tfor (let cmdBuffer of Object.values(this.cmdBuffers)) {\n\t\t\t\tcmdBuffer.syncLocalCmd()\n\t\t\t}\n\t\t}\n\n\t\t// clearOutdateCmdsForce() {\n\t\t// \tlet cmdBuffers = this.cmdBuffers\n\t\t// \tfor (let roleId in cmdBuffers) {\n\t\t// \t\tlet tCmdBuffer = cmdBuffers[roleId]\n\t\t// \t\ttCmdBuffer.cleanOutdateLocalCmdsForce()\n\t\t// \t}\n\t\t// }\n\n\t\t/**\n\t\t * 为了在udp模式下, 通过cmdIndex 确保前一帧数据都已经全部接收\n\t\t */\n\t\tgetOrderedNetCmd() {\n\t\t\tlet cmdBuffers = ObjectUtils.values(this.cmdBuffers)\n\t\t\tlet cmds = cmdBuffers.map(buf => buf.getOrderedNetCmd()).filter(buf => !!buf)\n\t\t\tlet minCmd = ArrayHelper.min(cmds, cmd => cmd.frameCount)\n\t\t\treturn minCmd\n\t\t}\n\n\t}\n\n}","namespace fsync {\n\n\texport class LocalInputPost {\n\t\thandler: (cmd: IGameInputCmd) => void\n\n\t\tlocalCmdBuffer: InputCmdBuffer\n\n\t\tneedSync: boolean = false\n\t\tinMorePredict: boolean = false\n\t\tmorePredictTime: number = 0\n\t\tprotected curMPFC: number = -1\n\t\tprotected lastPFC: number = -1\n\t\tprotected netDelayAcc = 0\n\t\tprotected netDelayCount = 0\n\t\tpost(cmd: IGameInputCmd): void {\n\t\t\t/*\n\t\t\tlet latestNetCmd = this.localCmdBuffer.getLatestNetCmd()\n\t\t\tif (cmd.route == \"local\" && latestNetCmd) {\n\t\t\t\tlet netDelay = latestNetCmd.receivedTime - latestNetCmd.createTime\n\t\t\t\tthis.netDelayAcc += netDelay\n\t\t\t\tthis.netDelayCount++\n\t\t\t\tlet netDelayAv = this.netDelayAcc / this.netDelayCount\n\t\t\t\tlet PFC = latestNetCmd.frameCount + (cmd.createTime - latestNetCmd.createTime + netDelay) / 1000 * GameConfig.inst.fps\n\t\n\t\t\t\t// 拟合会导致子弹发射等伴随动作时间线拉长，可能会导致预测线产生更多伴随动作，比如子弹数量莫名增多\n\t\t\t\tif (this.curMPFC < 0) {\n\t\t\t\t\tthis.curMPFC = latestNetCmd.frameCount\n\t\t\t\t}\n\t\t\t\tif (cmd.lastCmdId == null) {\n\t\t\t\t\tif (this.curMPFC < latestNetCmd.frameCount - 0) {\n\t\t\t\t\t\tthis.curMPFC = latestNetCmd.frameCount\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet MPFC = this.curMPFC\n\t\t\t\tif (this.lastPFC != PFC) {\n\t\t\t\t\tif (PFC > this.curMPFC + 1) {\n\t\t\t\t\t\tMPFC += 2\n\t\t\t\t\t\tthis.localCmdBuffer.enableLocalPredict = true\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// console.log(\"stop merge\")\n\t\t\t\t\t\t// 达到拟合点\n\t\t\t\t\t\tMPFC++\n\t\t\t\t\t\tthis.localCmdBuffer.enableLocalPredict = false\n\t\t\t\t\t\tif (!this.inMorePredict) {\n\t\t\t\t\t\t\tthis.needSync = true\n\t\t\t\t\t\t\tthis.morePredictTime = Date.now()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.inMorePredict = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// if (cmd.lastCmdId != null) {\n\t\t\t\t// \tthis.morePredictTime = Date.now()\n\t\t\t\t// }\n\t\t\t\tcmd.frameCount = MPFC\n\t\t\t\tthis.curMPFC = MPFC\n\t\t\t\tthis.lastPFC = PFC\n\t\t\t\t// console.log(\"cmdframe:\", cmd.frameCount)\n\t\n\t\t\t\t// cmd.frameCount += 0.3 * GameConfig.inst.fps\n\t\n\t\t\t}\n\t\t\t*/\n\n\t\t\tcmd.frameCount = cmd.createFrameCount + 1\n\t\t\tconst _ = this.handler && this.handler(cmd)\n\t\t}\n\n\t}\n\n}","namespace fsync {\n\n\texport class CmdReorderQueue {\n\t\tprotected curCmdIndex: number = 0\n\n\t\tprotected cmds: IGameInputCmd[]\n\n\t\tinit() {\n\t\t\tthis.cmds = []\n\t\t\treturn this\n\t\t}\n\n\t\tprotected dirty: bool = false\n\n\t\tput(cmd: IGameInputCmd): void {\n\t\t\tthis.dirty = true\n\n\t\t\tthis.cmds.push(cmd)\n\t\t}\n\n\t\tsort(): void {\n\t\t\tthis.cmds.sort((a, b) => a.cmdIndex - b.cmdIndex)\n\t\t}\n\n\t\tpop(): IGameInputCmd {\n\t\t\tif (this.dirty) {\n\t\t\t\tthis.dirty = false\n\t\t\t\tthis.sort()\n\t\t\t}\n\n\t\t\tif (this.cmds.length > 0) {\n\t\t\t\tlet cmd = this.cmds[0]\n\t\t\t\tif (cmd.cmdIndex == this.curCmdIndex + 1) {\n\t\t\t\t\tthis.curCmdIndex++\n\t\t\t\t\tthis.cmds.shift()\n\t\t\t\t\treturn cmd\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null\n\t\t}\n\n\t}\n\n\texport class NetworkCmdTranslator {\n\t\ttextDecorder: TextDecoder = new TextDecoder(\"utf-8\")\n\n\t\ttranslate(message: roomserver.TReqBroadCastFrameSyncReq): IGameInputCmd {\n\t\t\tlet sdata = this.textDecorder.decode(message.msgBytes)\n\t\t\tlet data = JSON.parse(sdata) as IGameInputCmd\n\t\t\t// console.log(`received net cmd: ${JSON.stringify(data)}`)\n\t\t\tdata.route = \"net\"\n\t\t\tdata.frameCount = LongHelper.toNumber(message.syncInfo.serverFrameCount)\n\t\t\tdata.receivedTime = Date.now()\n\t\t\treturn data\n\t\t}\n\n\t}\n\n}","\n/**\n * 客户端UI工具\n */\nnamespace kitten {\n\t/**\n\t * 手势分析\n\t */\n\texport namespace guesture { }\n\t/**\n\t * 游戏手柄\n\t */\n\texport namespace gamepad { }\n\t/**\n\t * ui事件\n\t */\n\texport namespace uievent { }\n\t/**\n\t * rpg输入\n\t */\n\texport namespace rpg { }\n\n\twindow[\"kitten\"] = kitten\n\n}\n","\nnamespace kitten.gamepad {\n\n\ttype Vector3 = fsync.Vector3\n\tconst Vector3 = fsync.Vector3\n\tconst UserInput = fsync.UserInput\n\tconst Vector = fsync.Vector\n\ttype BLRect = fsync.BLRect\n\tconst BLRect = fsync.BLRect\n\n\t/**\n\t * 环状摇杆\n\t */\n\texport class CircleStick {\n\n\t\t/**\n\t\t * 是否启用\n\t\t */\n\t\tenable: boolean = true\n\n\t\t/**\n\t\t * 控制器id\n\t\t */\n\t\tidentity: string = \"unkown\"\n\n\t\t/**\n\t\t* 控制器轴心起始位置\n\t\t*/\n\t\tprotected ctrlPosOrigin: Vector3\n\n\t\t/**\n\t\t * 获取输入端口列表\n\t\t */\n\t\tgetInputPorts() {\n\t\t\treturn this.inputPorts\n\t\t}\n\n\t\tprotected inputPorts: string[]\n\t\tprotected updateInputPorts() {\n\t\t\tthis.inputPorts = Object.keys(this.multiTouchMap).filter((key) => {\n\t\t\t\treturn this.multiTouchMap[key] == this.identity\n\t\t\t})\n\t\t}\n\n\t\tget ctrlStatus() {\n\t\t\treturn this.ctrlStatusRaw\n\t\t}\n\n\t\t/**\n\t\t * 获取触控范围中心店\n\t\t */\n\t\tgetCtrlCenterPos() {\n\t\t\treturn this.ctrlStatus.ctrlPos\n\t\t}\n\n\t\tprotected lastCtrlStatus: StickLastCtrlState\n\n\t\t/**\n\t\t * 控制器内部状态\n\t\t */\n\t\tprotected ctrlStatusRaw: StickCtrlState\n\n\t\t/**\n\t\t * 控制器对外状态\n\t\t */\n\t\t// ctrlStatus: StickCtrlState\n\n\t\t// resetExportStatus() {\n\t\t// \tthis.ctrlStatus.pressed = false\n\t\t// \tthis.ctrlStatus.touchAction = \"loosed\"\n\t\t// \tthis.ctrlStatus.strength = 0\n\t\t// \tVector.merge(this.ctrlStatus.ctrlPos, this.ctrlPosOrigin)\n\t\t// \tVector.merge(this.ctrlStatus.touchPoint, this.ctrlPosOrigin)\n\t\t// \tVector.resetValues(this.ctrlStatus.dir, 0)\n\t\t// }\n\n\t\t// /**\n\t\t//  * 导出状态\n\t\t//  */\n\t\t// exportTouchStatus() {\n\t\t// \tthis.ctrlStatus.pressed = this.ctrlStatusRaw.pressed\n\t\t// \tVector.merge(this.ctrlStatus.dir, this.ctrlStatusRaw.dir)\n\t\t// \tthis.ctrlStatus.strength = this.ctrlStatusRaw.strength\n\t\t// \tthis.ctrlStatus.touchAction = this.ctrlStatusRaw.touchAction\n\t\t// \tVector.merge(this.ctrlStatus.touchPoint, this.ctrlStatusRaw.touchPoint)\n\t\t// \tVector.merge(this.ctrlStatus.ctrlPos, this.ctrlStatusRaw.ctrlPos)\n\t\t// }\n\n\t\tupdateStatus() {\n\t\t\tthis.updateTouchAction()\n\t\t\tthis.calcTouchVector()\n\t\t\t// this.exportTouchStatus()\n\t\t}\n\n\t\tupdateTouchAction() {\n\t\t\tif (this.lastCtrlStatus.pressed) {\n\t\t\t\tif (this.ctrlStatusRaw.pressed) {\n\t\t\t\t\t// press -> press\n\t\t\t\t\tthis.ctrlStatusRaw.touchAction = \"move\"\n\t\t\t\t} else {\n\t\t\t\t\t// press -> loosed\n\t\t\t\t\tthis.ctrlStatusRaw.touchAction = \"end\"\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.ctrlStatusRaw.pressed) {\n\t\t\t\t\t// loosed -> press\n\t\t\t\t\tthis.ctrlStatusRaw.touchAction = \"begin\"\n\t\t\t\t} else {\n\t\t\t\t\t// loosed -> loosed\n\t\t\t\t\tthis.ctrlStatusRaw.touchAction = \"loosed\"\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.lastCtrlStatus.pressed = this.ctrlStatusRaw.pressed\n\n\t\t}\n\n\t\t/**\n\t\t * 计算触摸矢量数据\n\t\t */\n\t\tcalcTouchVector() {\n\t\t\tconst ctrlPos = this.ctrlStatusRaw.ctrlPos\n\t\t\tlet pos = this.ctrlStatusRaw.touchPoint\n\t\t\tthis.ctrlStatusRaw.dir.x = pos.x - ctrlPos.x\n\t\t\tthis.ctrlStatusRaw.dir.y = pos.y - ctrlPos.y\n\t\t\tthis.ctrlStatusRaw.strength = Vector.len(this.ctrlStatusRaw.dir)\n\t\t}\n\n\t\tinit(id: string, sharedState: StickSharedState) {\n\t\t\tthis.identity = id\n\t\t\tthis.ctrlPosOrigin = new Vector3()\n\t\t\tthis.touchRange = { height: 0, width: 0, x: 0, y: 0 }\n\t\t\t// this.ctrlStatus = new StickCtrlState()\n\t\t\tthis.ctrlStatusRaw = new StickCtrlState()\n\t\t\tthis.lastCtrlStatus = new StickLastCtrlState()\n\t\t\tthis.inputPorts = []\n\n\t\t\tthis.sharedState = sharedState\n\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * 动态设置当前摇杆中心点\n\t\t * @param pos \n\t\t */\n\t\tsetStartPos(pos: Vector3) {\n\t\t\tVector.merge(this.ctrlStatusRaw.ctrlPos, pos)\n\t\t}\n\n\t\t/**\n\t\t * 重置当前摇杆中心为原始中心点\n\t\t */\n\t\tresetStartPos() {\n\t\t\tthis.setStartPos(this.ctrlPosOrigin)\n\t\t}\n\n\t\tresetTouchPoint() {\n\t\t\tfsync.Vector.merge(this.ctrlStatusRaw.touchPoint, this.ctrlStatusRaw.ctrlPos)\n\t\t}\n\n\t\t/**\n\t\t * 设置主视图\n\t\t * @param pos \n\t\t */\n\t\tsetStartPosOrigin(pos: Vector3) {\n\t\t\tVector.merge(this.ctrlPosOrigin, pos)\n\t\t\tVector.merge(this.ctrlStatusRaw.ctrlPos, pos)\n\t\t}\n\n\t\t/**\n\t\t * 触控半径\n\t\t */\n\t\tprotected circleRadius: number = 10\n\n\t\t/**\n\t\t * 设置触控半径\n\t\t * @param radius \n\t\t */\n\t\tsetCircleRadius(radius: number) {\n\t\t\tthis.circleRadius = radius\n\t\t}\n\n\t\t/**\n\t\t * 获取触控半径\n\t\t * @param radius\n\t\t */\n\t\tgetCircleRadius() {\n\t\t\treturn this.circleRadius\n\t\t}\n\n\t\ttouchRange: BLRect\n\n\t\t/**\n\t\t * 设置触控范围\n\t\t * @param rect \n\t\t */\n\t\tsetTouchRange(rect: BLRect) {\n\t\t\tthis.touchRange.height = rect.height\n\t\t\tthis.touchRange.width = rect.width\n\t\t\tthis.touchRange.x = rect.x\n\t\t\tthis.touchRange.y = rect.y\n\t\t}\n\n\t\t/**\n\t\t * 获取触控范围\n\t\t */\n\t\tprotected getTouchRange(): BLRect {\n\t\t\t// let width = this.circleRadius\n\t\t\t// let height = this.circleRadius\n\t\t\t// return {\n\t\t\t// \tx: this.ctrlPos.x - width / 2,\n\t\t\t// \ty: this.ctrlPos.y - height / 2,\n\t\t\t// \twidth: width,\n\t\t\t// \theight: height,\n\t\t\t// }\n\t\t\treturn this.touchRange\n\t\t}\n\n\t\t/**\n\t\t * 处理触控输入\n\t\t * @param data \n\t\t */\n\t\thandlerInput(data: kitten.uievent.UserInputData): boolean {\n\t\t\tif (!this.enable) {\n\t\t\t\tthis.cleanTouchMap()\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tif (this.detectVirtualCirleInput(data)) {\n\t\t\t\t// pass\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\n\t\tcleanTouchMap() {\n\t\t\tfor (let key in this.multiTouchMap) {\n\t\t\t\tdelete this.sharedState.multiTouchMap[key]\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * 触摸状态map\n\t\t */\n\t\tprotected multiTouchMap: { [id: string]: string } = fsync.EmptyTable()\n\t\t// protected static multiTouchMap: { [id: string]: string } = fsync.EmptyTable()\n\t\tprotected sharedState: StickSharedState\n\n\t\t/**\n\t\t * 检测虚拟手柄输入\n\t\t * @param data \n\t\t */\n\t\tprotected detectVirtualCirleInput(data: kitten.uievent.UserInputData): boolean {\n\t\t\tif (data.action == \"ontouchstart\") {\n\t\t\t\tfor (let t of data.event.touches) {\n\t\t\t\t\tif (this.sharedState.multiTouchMap[t.identifier]) {\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t}\n\n\t\t\t\t\tlet pos = Vector3.fromNumArray([t.clientX, t.clientY])\n\t\t\t\t\tif (BLRect.containPoint(this.getTouchRange(), pos)) {\n\t\t\t\t\t\tthis.sharedState.multiTouchMap[t.identifier] = this.identity\n\t\t\t\t\t\tthis.multiTouchMap[t.identifier] = this.identity\n\t\t\t\t\t\tthis.ctrlStatusRaw.pressed = true\n\t\t\t\t\t\tthis.ctrlStatusRaw.touchPoint.x = pos.x\n\t\t\t\t\t\tthis.ctrlStatusRaw.touchPoint.y = pos.y\n\t\t\t\t\t\tVector.normalizeSelf(this.ctrlStatusRaw.dir)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (data.action == \"ontouchend\") {\n\t\t\t\tfor (let t of data.event.touches) {\n\t\t\t\t\tif (this.multiTouchMap[t.identifier] == this.identity) {\n\t\t\t\t\t\tlet pos = Vector3.fromNumArray([t.clientX, t.clientY])\n\t\t\t\t\t\tthis.ctrlStatusRaw.pressed = false\n\t\t\t\t\t\tthis.ctrlStatusRaw.touchPoint.x = pos.x\n\t\t\t\t\t\tthis.ctrlStatusRaw.touchPoint.y = pos.y\n\t\t\t\t\t\tdelete this.sharedState.multiTouchMap[t.identifier]\n\t\t\t\t\t\tdelete this.multiTouchMap[t.identifier]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (data.action == \"ontouchmove\") {\n\t\t\t\tfor (let t of data.event.touches) {\n\t\t\t\t\tif (this.multiTouchMap[t.identifier] == this.identity) {\n\t\t\t\t\t\tlet pos = Vector3.fromNumArray([t.clientX, t.clientY])\n\t\t\t\t\t\tthis.ctrlStatusRaw.touchPoint.x = pos.x\n\t\t\t\t\t\tthis.ctrlStatusRaw.touchPoint.y = pos.y\n\t\t\t\t\t\t// this.ctrlStatus.dir.x = pos.x - this.ctrlPos.x\n\t\t\t\t\t\t// this.ctrlStatus.dir.y = pos.y - this.ctrlPos.y\n\t\t\t\t\t\t// this.ctrlStatus.strength = Vector.len(this.ctrlStatus.dir)\n\t\t\t\t\t\tVector.normalizeSelf(this.ctrlStatusRaw.dir)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\n\t}\n\n}\n","namespace kitten.gamepad {\n\ttype Vector3 = fsync.Vector3\n\tconst Vector3 = fsync.Vector3\n\tconst UserInput = fsync.UserInput\n\tconst Vector = fsync.Vector\n\n\t/**\n\t * 基础控制器视图\n\t */\n\texport class CircleStickView {\n\t\t/**\n\t\t * 对应控制器ID\n\t\t */\n\t\tctrlId: string\n\t\tprotected circleView: graph.ISprite\n\n\t\tinit() {\n\t\t\treturn this\n\t\t}\n\n\t\tsetupView(ctrl: CircleStick, color: string) {\n\t\t\tlet length = Vector.len(UserInput.inst.clientSize)\n\n\t\t\tthis.ctrlId = ctrl.identity\n\t\t\tthis.circleView = graph.createSprite()\n\t\t\tthis.circleView.setColor(color)\n\t\t\tthis.circleView.setRadius(ctrl.getCircleRadius())\n\t\t\tlet center = ctrl.getCtrlCenterPos()\n\t\t\tthis.circleView.setPos(center.x, center.y)\n\t\t}\n\n\t}\n}","\nnamespace kitten.gamepad {\n\n\t/**\n\t * 自动重定位的摇杆\n\t */\n\texport class GameStick extends CircleStick {\n\n\t\t/**\n\t\t * 玩家放开触摸摇杆时,摇杆中心点和当前触摸点复位\n\t\t */\n\t\tprotected needResetAfterLoose: boolean\n\n\t\tinit(id: string, sharedState: StickSharedState) {\n\t\t\tthis.needResetAfterLoose = false\n\t\t\treturn super.init(id, sharedState)\n\t\t}\n\n\t\tupdateStatus() {\n\t\t\tthis.updateTouchAction()\n\n\t\t\t/**\n\t\t\t* 游戏摇杆的特性:\n\t\t\t* - 当玩家第一次触摸摇杆时,摇杆的触摸起点要设置为当前触摸点\n\t\t\t* - 玩家放开触摸摇杆时,摇杆中心点和当前触摸点复位\n\t\t\t*/\n\t\t\tif (this.ctrlStatusRaw.touchAction == \"begin\") {\n\t\t\t\tthis.needResetAfterLoose = false\n\t\t\t\tthis.setStartPos(this.ctrlStatusRaw.touchPoint)\n\t\t\t\tthis.calcTouchVector()\n\t\t\t} else if (this.ctrlStatusRaw.touchAction == \"end\") {\n\t\t\t\tthis.needResetAfterLoose = true\n\t\t\t\tthis.calcTouchVector()\n\t\t\t} else {\n\t\t\t\tif (this.needResetAfterLoose) {\n\t\t\t\t\tthis.needResetAfterLoose = false\n\t\t\t\t\tthis.resetStartPos()\n\t\t\t\t\tthis.resetTouchPoint()\n\t\t\t\t}\n\t\t\t\tthis.calcTouchVector()\n\t\t\t}\n\n\t\t\t// this.exportTouchStatus()\n\t\t}\n\n\t}\n\n}\n","namespace kitten.gamepad {\n\n\t/**\n\t * 主技能摇杆\n\t */\n\texport class MainSkillStick extends GameStick {\n\n\t\thandlerInput(data: kitten.uievent.UserInputData): boolean {\n\t\t\tif (super.handlerInput(data)) {\n\t\t\t\t// pass\n\t\t\t} else if (this.detectSkillRollInput(data)) {\n\t\t\t\t// pass\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\n\t\t/**\n\t\t * 检测鼠标控制技能方向\n\t\t * @param data \n\t\t */\n\t\tprotected detectSkillRollInput(data: kitten.uievent.UserInputData): boolean {\n\t\t\tif (data.action == \"onmousedown\") {\n\t\t\t\tthis.ctrlStatusRaw.pressed = true\n\n\t\t\t} else if (data.action == \"onmouseup\") {\n\t\t\t\tthis.ctrlStatusRaw.pressed = false\n\n\t\t\t} else if (data.action == \"onmousemove\") {\n\t\t\t\tconst ctrlPos = this.ctrlStatusRaw.ctrlPos\n\t\t\t\tlet offset = [data.event.clientX - ctrlPos.x, data.event.clientY - ctrlPos.y]\n\t\t\t\tlet strength = Math.sqrt(offset[0] * offset[0] + offset[1] * offset[1])\n\t\t\t\tthis.ctrlStatusRaw.dir.x = offset[0] / strength\n\t\t\t\tthis.ctrlStatusRaw.dir.y = offset[1] / strength\n\t\t\t\tthis.ctrlStatusRaw.strength = strength\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\n\t}\n}","namespace kitten.gamepad {\n\ttype Vector3 = fsync.Vector3\n\tconst Vector3 = fsync.Vector3\n\tconst UserInput = fsync.UserInput\n\tconst Vector = fsync.Vector\n\n\t/**\n\t * 移动摇杆\n\t */\n\texport class MoveStick extends GameStick {\n\n\t\thandlerInput(data: kitten.uievent.UserInputData): boolean {\n\t\t\tif (super.handlerInput(data)) {\n\t\t\t\t// pass\n\t\t\t} else if (this.detectKeyboardMoveInput(data)) {\n\t\t\t\t// pass\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\n\t\t/**\n\t\t* 获取输入端口列表\n\t\t*/\n\t\tgetInputPorts() {\n\t\t\tlet keys = super.getInputPorts()\n\t\t\tif (this.isKeyPressing) {\n\t\t\t\tkeys.push(\"keyboard1\")\n\t\t\t}\n\t\t\treturn keys\n\t\t}\n\n\t\tprotected pressingKeys: { [key: string]: boolean } = {}\n\t\tprotected isKeyPressing: boolean = false\n\n\t\tprotected updateKeyboardInputStatus() {\n\t\t\tlet k = [\"a\", \"d\", \"w\", \"s\"].filter((kx) => this.pressingKeys[kx])\n\t\t\tif (k.length <= 0) {\n\t\t\t\tthis.ctrlStatusRaw.pressed = false\n\t\t\t\tthis.ctrlStatusRaw.strength = 0\n\t\t\t} else {\n\t\t\t\tthis.ctrlStatusRaw.pressed = true\n\t\t\t\tthis.ctrlStatusRaw.strength = 1\n\t\t\t}\n\t\t\tthis.isKeyPressing = this.ctrlStatusRaw.pressed\n\t\t}\n\n\t\t/**\n\t\t * 检测键盘输入控制\n\t\t * @param data \n\t\t */\n\t\tprotected detectKeyboardMoveInput(data: kitten.uievent.UserInputData): boolean {\n\t\t\tif (data.action == \"onkeydown\") {\n\t\t\t\tconst key = data.event.key\n\n\t\t\t\tthis.pressingKeys[key] = true\n\t\t\t\tthis.updateKeyboardInputStatus()\n\t\t\t\tthis.updateStatus()\n\n\t\t\t\tif (key == \"a\") {\n\t\t\t\t\tthis.ctrlStatusRaw.dir.x = -1\n\t\t\t\t\tthis.ctrlStatusRaw.dir.y = 0\n\t\t\t\t} else if (key == \"d\") {\n\t\t\t\t\tthis.ctrlStatusRaw.dir.x = 1\n\t\t\t\t\tthis.ctrlStatusRaw.dir.y = 0\n\t\t\t\t} else if (key == \"w\") {\n\t\t\t\t\tthis.ctrlStatusRaw.dir.x = 0\n\t\t\t\t\tthis.ctrlStatusRaw.dir.y = 1\n\t\t\t\t} else if (key == \"s\") {\n\t\t\t\t\tthis.ctrlStatusRaw.dir.x = 0\n\t\t\t\t\tthis.ctrlStatusRaw.dir.y = -1\n\t\t\t\t}\n\t\t\t\tVector.addUp(Vector.merge(this.ctrlStatusRaw.touchPoint, this.ctrlStatusRaw.dir), this.ctrlStatusRaw.ctrlPos)\n\n\t\t\t\tthis.updateKeyboardInputStatus()\n\n\t\t\t} else if (data.action == \"onkeyup\") {\n\t\t\t\tconst key = data.event.key\n\n\t\t\t\tthis.pressingKeys[key] = false\n\n\t\t\t\tthis.updateKeyboardInputStatus()\n\n\t\t\t} else {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\n\t}\n}","namespace kitten.gamepad {\n\ttype Vector3 = fsync.Vector3\n\tconst Vector3 = fsync.Vector3\n\tconst UserInput = fsync.UserInput\n\n\t/**\n\t * 虚拟游戏手柄\n\t * - 虚拟设备\n\t */\n\texport class NormalGamepad {\n\n\t\tprotected enable: boolean = true\n\n\t\t/**\n\t\t * 控制输入是否可用\n\t\t */\n\t\tpublic get inputEnabled(): boolean {\n\t\t\treturn this.enable\n\t\t}\n\t\tpublic set inputEnabled(value: boolean) {\n\t\t\tthis.enable = value\n\t\t}\n\n\t\t/**\n\t\t * 左手控制器\n\t\t */\n\t\tget leftStick(): MoveStick {\n\t\t\treturn this.virutalCtrls[0] as MoveStick\n\t\t}\n\t\t/**\n\t\t * 左手控制器状态\n\t\t */\n\t\tget leftStickStatus() {\n\t\t\treturn this.leftStick.ctrlStatus\n\t\t}\n\t\t/**\n\t\t * 右手控制器\n\t\t */\n\t\tget rightStick(): MainSkillStick {\n\t\t\treturn this.virutalCtrls[1] as MainSkillStick\n\t\t}\n\t\t/**\n\t\t * 右手控制器状态\n\t\t */\n\t\tget rightStickStatus() {\n\t\t\treturn this.rightStick.ctrlStatus\n\t\t}\n\n\t\t/**\n\t\t * 更新手柄状态,包含:\n\t\t * - 延迟状态\n\t\t */\n\t\tupdateVirtualCtrls() {\n\t\t\tthis.virutalCtrls.forEach((ctrl) => ctrl.updateStatus())\n\n\t\t\t// let inputMap: { [key: string]: CircleStick } = {}\n\t\t\t// let overwriteMap: { [key: string]: CircleStick } = {}\n\t\t\t// this.virutalCtrls.forEach((ctrl) => {\n\t\t\t// \tctrl.getInputPorts().forEach((id) => {\n\t\t\t// \t\toverwriteMap[id] = ctrl\n\t\t\t// \t\tinputMap[ctrl.identity] = ctrl\n\t\t\t// \t})\n\t\t\t// })\n\t\t\t// let validMap = {}\n\t\t\t// Object.values(overwriteMap).forEach((ctrl) => {\n\t\t\t// \tvalidMap[ctrl.identity] = ctrl\n\t\t\t// })\n\t\t\t// // 排除掉被覆盖的输入摇杆\n\t\t\t// Object.values(inputMap).forEach((ctrl) => {\n\t\t\t// \tif (!validMap[ctrl.identity]) {\n\t\t\t// \t\tctrl.resetExportStatus()\n\t\t\t// \t}\n\t\t\t// })\n\t\t}\n\n\t\t/**\n\t\t * 摇杆列表\n\t\t */\n\t\tvirutalCtrls: CircleStick[]\n\n\t\t/**\n\t\t * 摇杆共享状态\n\t\t */\n\t\tsharedState: StickSharedState\n\n\t\tinit() {\n\n\t\t\tthis.sharedState = new StickSharedState()\n\n\t\t\tthis.virutalCtrls = []\n\t\t\t{\n\t\t\t\tlet ctrl = new MoveStick().init(\"movestick\", this.sharedState)\n\t\t\t\tthis.virutalCtrls[0] = ctrl\n\n\t\t\t\tlet pos = new Vector3()\n\t\t\t\tpos.x = UserInput.inst.clientSize.x * 0.2\n\t\t\t\tpos.y = UserInput.inst.clientSize.y * 0.8\n\t\t\t\t// 默认设置在左边\n\t\t\t\tctrl.setStartPosOrigin(pos)\n\t\t\t}\n\t\t\t{\n\t\t\t\tlet ctrl = new MainSkillStick().init(\"skillstick\", this.sharedState)\n\t\t\t\tthis.virutalCtrls[1] = ctrl\n\n\t\t\t\tlet pos = new Vector3()\n\t\t\t\tpos.x = UserInput.inst.clientSize.x * 0.8\n\t\t\t\tpos.y = UserInput.inst.clientSize.y * 0.8\n\t\t\t\t// 默认设置在右边\n\t\t\t\tctrl.setStartPosOrigin(pos)\n\t\t\t}\n\n\t\t\tthis.virtualCtrlViews = []\n\n\t\t\tUserInput.inst.addHandler(\"gamecontroller\", (data) => {\n\t\t\t\tthis.handlerInput(data)\n\t\t\t})\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * 触控调试视图列表\n\t\t */\n\t\tprotected virtualCtrlViews: CircleStickView[]\n\n\t\t/**\n\t\t * 创建调试视图\n\t\t */\n\t\tsetupSimpleView() {\n\n\t\t\t{\n\t\t\t\t// 左\n\t\t\t\tlet view = new CircleStickView().init()\n\t\t\t\tview.setupView(this.virutalCtrls[0], 'rgba(200, 255, 255, 1.0)')\n\t\t\t\tthis.virtualCtrlViews[0] = view\n\t\t\t}\n\t\t\t{\n\t\t\t\t// 右\n\t\t\t\tlet view = new CircleStickView().init()\n\t\t\t\tview.setupView(this.virutalCtrls[1], 'rgba(255, 200, 255, 1.0)')\n\t\t\t\tthis.virtualCtrlViews[1] = view\n\t\t\t}\n\n\t\t\tfor (let ctrl of this.virutalCtrls.slice(2)) {\n\t\t\t\t// 右\n\t\t\t\tlet view = new CircleStickView().init()\n\t\t\t\tview.setupView(ctrl, 'rgba(255, 255, 200, 1.0)')\n\t\t\t\tthis.virtualCtrlViews.push(view)\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * 处理各类输入\n\t\t * @param data \n\t\t */\n\t\thandlerInput(data: kitten.uievent.UserInputData): boolean {\n\t\t\tif (!this.enable) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\t// if (data.action == \"onsetup\") {\n\t\t\t// \tthis.setupSimpleView()\n\t\t\t// } else \n\t\t\t{\n\t\t\t\tlet b = false\n\t\t\t\t// for (let ctrl of this.virutalCtrls) {\n\t\t\t\t// for (let ctrl of this.virutalCtrls.reverse()) {\n\t\t\t\tfor (let i = this.virutalCtrls.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet ctrl = this.virutalCtrls[i]\n\t\t\t\t\tlet b2 = ctrl.handlerInput(data)\n\t\t\t\t\tb = b || b2\n\t\t\t\t}\n\t\t\t\treturn b\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\n\t}\n}","namespace kitten.gamepad {\n\ttype Vector3 = fsync.Vector3\n\tconst Vector3 = fsync.Vector3\n\tconst UserInput = fsync.UserInput\n\n\t/**\n\t* 操控状态\n\t* - move 移动中\n\t* - begin 刚开始点击\n\t* - end 刚刚松开\n\t* - loosed 松开状态\n\t*/\n\texport type TTouchAction = \"move\" | \"begin\" | \"end\" | \"loosed\"\n\n\t/**\n\t * 前一次摇杆状态\n\t */\n\texport class StickLastCtrlState {\n\t\tpressed: boolean = false\n\t}\n\n\t/**\n\t * 摇杆状态\n\t */\n\texport class StickCtrlState {\n\t\t/**\n\t\t * 当前触摸位置\n\t\t */\n\t\ttouchPoint: Vector3 = new Vector3()\n\t\t/**\n\t\t * 操控方向\n\t\t */\n\t\tdir: Vector3 = new Vector3()\n\t\t/**\n\t\t * 操作强度\n\t\t */\n\t\tstrength: number = 0\n\t\t/**\n\t\t * 是否处于按下状态\n\t\t */\n\t\tpressed: boolean = false\n\t\t/**\n\t\t * 触摸操控状态\n\t\t */\n\t\ttouchAction: TTouchAction = \"loosed\"\n\n\t\t/**\n\t\t * 控制器轴心位置\n\t\t */\n\t\tctrlPos: Vector3 = new Vector3()\n\t}\n}","\nnamespace kitten.gamepad {\n\t/**\n\t * 摇杆共享状态\n\t */\n\texport class StickSharedState {\n\t\tmultiTouchMap: { [id: string]: string } = fsync.EmptyTable()\n\t}\n}\n","\nnamespace kitten.guesture {\n\texport type TouchPoint = fsync.Vector3\n\texport const TouchPoint = fsync.Vector3\n\n\texport class ContinuoursIdTool {\n\t\t_idAcc: number = 0\n\t\t_idMap: { [key: string]: number } = {}\n\t\t/**\n\t\t * 转化为可连续的id\n\t\t * @param id \n\t\t */\n\t\tmapToContinuousId(id: string): number {\n\t\t\tlet cid = this._idMap[id]\n\t\t\tif (cid == null) {\n\t\t\t\tcid = this._idMap[id] = this._idAcc++\n\t\t\t}\n\t\t\treturn cid\n\t\t}\n\n\t}\n\tconst idTool = new ContinuoursIdTool()\n\n\texport class TouchPointQueue {\n\t\tclearPoints() {\n\t\t\tthis.points.length = 0\n\t\t}\n\t\t/**\n\t\t * 触摸点列表，[0]表示最新存入的点\n\t\t */\n\t\tprotected points: TouchPoint[]\n\n\t\tinit() {\n\t\t\tthis.points = []\n\t\t\treturn this\n\t\t}\n\n\t\t/**\n\t\t * 存入最新的触摸点\n\t\t * @param point \n\t\t */\n\t\tunshift(point: TouchPoint) {\n\t\t\tthis.points.unshift(point)\n\t\t}\n\n\t\t/**\n\t\t * 是否处于触摸状态\n\t\t */\n\t\ttouching: boolean = false\n\t\t/**\n\t\t * 触摸点ID\n\t\t */\n\t\ttouchId: number = -1\n\n\t\t/**\n\t\t * 触摸点列表，[0]表示最新存入的点\n\t\t * @param num \n\t\t */\n\t\tgetTopPoints(num: number = 2): TouchPoint[] {\n\t\t\treturn this.points.slice(0, num)\n\t\t}\n\n\t\t/**\n\t\t * 获取当前触摸点滑动方向\n\t\t */\n\t\tgetMoveVector(): TouchPoint {\n\t\t\tlet vec = new TouchPoint(0)\n\t\t\tif (this.points.length > 1) {\n\t\t\t\tfsync.Vector.subDown(fsync.Vector.addUp(vec, this.points[0]), this.points[1])\n\t\t\t}\n\t\t\treturn vec\n\t\t}\n\t\t/**\n\t\t * 获取当前触摸点整体位移方向\n\t\t */\n\t\tgetMaxMoveVector(): TouchPoint {\n\t\t\tlet vec = new TouchPoint(0)\n\t\t\tif (this.points.length > 1) {\n\t\t\t\tfsync.Vector.subDown(fsync.Vector.addUp(vec, this.points[0]), this.points[this.points.length - 1])\n\t\t\t}\n\t\t\treturn vec\n\t\t}\n\n\t\t/**\n\t\t * 获取\n\t\t */\n\t\tgetPoints(): TouchPoint[] {\n\t\t\treturn this.points\n\t\t}\n\t\t/**\n\t\t * 获取最新的点\n\t\t * @param index \n\t\t */\n\t\tgetPoint(index: number = 0): TouchPoint {\n\t\t\treturn this.points[index]\n\t\t}\n\t\t/**\n\t\t * 获取最老的点\n\t\t * @param index\n\t\t */\n\t\tgetOldPoint(index: number = 0): TouchPoint {\n\t\t\treturn this.points[this.points.length - 1 - index]\n\t\t}\n\t}\n\n\t/**\n\t * 手势类型\n\t */\n\texport enum GuestureTypes {\n\t\t/**\n\t\t * 开始触摸\n\t\t */\n\t\ttouch = \"touch\",\n\t\t/**\n\t\t * 点击\n\t\t */\n\t\tloose = \"loose\",\n\t\t/**\n\t\t * 拖拽\n\t\t */\n\t\tdrag = \"drag\",\n\t\t/**\n\t\t * 双击\n\t\t */\n\t\tdoubleClick = \"doubleClick\",\n\t\t/**\n\t\t * 缩放\n\t\t */\n\t\tscale = \"scale\",\n\t\t/**\n\t\t * 旋转\n\t\t */\n\t\trotate = \"rotate\",\n\n\t}\n\n\texport class GuestureInfo {\n\t\tgtype: GuestureTypes\n\t}\n\n\t/**\n\t * 点触信息\n\t */\n\texport class ClickGuestureInfo extends GuestureInfo {\n\t\tgtype = GuestureTypes.touch\n\n\t\tprotected pointQueues: TouchPointQueue[]\n\t\tinit(pointQueues: TouchPointQueue[]) {\n\t\t\tthis.pointQueues = pointQueues\n\t\t\treturn this\n\t\t}\n\n\t}\n\n\t/**\n\t * 拖拽信息\n\t */\n\texport class DragGuestureInfo extends GuestureInfo {\n\t\tgtype = GuestureTypes.drag\n\n\t\tprotected pointQueues: TouchPointQueue[]\n\t\tinit(pointQueues: TouchPointQueue[]) {\n\t\t\tthis.pointQueues = pointQueues\n\t\t\treturn this\n\t\t}\n\n\t\tgetMoveVector(index: number = 0): TouchPoint {\n\t\t\tlet points = this.pointQueues[index].getPoints()\n\t\t\tlet vec = new TouchPoint()\n\t\t\tif (points.length > 1) {\n\t\t\t\tfsync.Vector.subDown(fsync.Vector.addUp(vec, points[0]), points[1])\n\t\t\t}\n\t\t\treturn vec\n\t\t}\n\t\tgetMaxMoveVector(index: number = 0): TouchPoint {\n\t\t\tlet points = this.pointQueues[index].getPoints()\n\t\t\tlet vec = new TouchPoint(0)\n\t\t\tif (points.length > 1) {\n\t\t\t\tfsync.Vector.subDown(fsync.Vector.addUp(vec, points[0]), points[points.length - 1])\n\t\t\t}\n\t\t\treturn vec\n\t\t}\n\n\t\tgetOldPoint(index: number = 0) {\n\t\t\treturn this.pointQueues[this.pointQueues.length - 1].getOldPoint(index);\n\t\t}\n\n\t\tgetPoint(index: number = 0) {\n\t\t\treturn this.pointQueues[this.pointQueues.length - 1].getPoint(index);\n\t\t}\n\n\t\tgetPoints(index: number = 0) {\n\t\t\treturn this.pointQueues.map(pq => pq.getPoint(index))\n\t\t}\n\t\tgetOldPoints(index: number = 0) {\n\t\t\treturn this.pointQueues.map(pq => pq.getOldPoint(index))\n\t\t}\n\t}\n\n\t/**\n\t * 双击信息\n\t */\n\texport class DoubleClickGuestureInfo extends GuestureInfo {\n\t\tgtype = GuestureTypes.doubleClick\n\n\t\tprotected pointQueues: TouchPointQueue[]\n\t\tinit(pointQueues: TouchPointQueue[]) {\n\t\t\tthis.pointQueues = pointQueues\n\t\t\treturn this\n\t\t}\n\n\t}\n\n\texport type ScaleInfo = {\n\t\tscaleN: number\n\t\tdir: TouchPoint\n\t\tcenter: TouchPoint\n\t}\n\n\t/**\n\t * 缩放信息\n\t */\n\texport class ScaleGuestureInfo extends GuestureInfo {\n\t\tgtype = GuestureTypes.scale\n\n\t\tprotected pointQueues: TouchPointQueue[]\n\t\tinit(pointQueues: TouchPointQueue[]) {\n\t\t\tthis.pointQueues = pointQueues\n\t\t\treturn this\n\t\t}\n\n\t\tgetScaleInfo(): ScaleInfo {\n\t\t\tlet pq1 = this.pointQueues[0]\n\t\t\tlet pq2 = this.pointQueues[1]\n\t\t\tlet vec1 = pq1.getMaxMoveVector()\n\t\t\tlet vec2 = pq2.getMaxMoveVector()\n\t\t\tlet pt1_1 = pq1.getPoint()\n\t\t\tlet pt1_2 = pq1.getOldPoint()\n\t\t\tlet pt2_1 = pq2.getPoint()\n\t\t\tlet pt2_2 = pq2.getOldPoint()\n\t\t\tlet scaleN = fsync.Vector.distance(pt1_1, pt2_1) - fsync.Vector.distance(pt1_2, pt2_2)\n\t\t\tlet dir = fsync.Vector.subDown(vec1.clone(), vec2)\n\t\t\tlet center = fsync.Vector.addUp(pt1_2.clone(), pt2_2)\n\t\t\tlet info: ScaleInfo = {\n\t\t\t\tcenter,\n\t\t\t\tdir,\n\t\t\t\tscaleN,\n\t\t\t}\n\t\t\treturn info\n\t\t}\n\n\t}\n\n\texport type RotateInfo = {\n\t\tth: number\n\t\trotation: number\n\t\tcenter: TouchPoint\n\t}\n\t/**\n\t * 旋转信息\n\t */\n\texport class RotateGuestureInfo extends GuestureInfo {\n\t\tgtype = GuestureTypes.rotate\n\n\t\tprotected pointQueues: TouchPointQueue[]\n\t\tinit(pointQueues: TouchPointQueue[]) {\n\t\t\tthis.pointQueues = pointQueues\n\t\t\treturn this\n\t\t}\n\n\t\tgetRotateDirection(): RotateInfo {\n\t\t\tlet pq1 = this.pointQueues[0]\n\t\t\tlet pq2 = this.pointQueues[1]\n\t\t\tlet pt1 = pq1.getOldPoint()\n\t\t\tlet pt2 = pq2.getOldPoint()\n\t\t\tlet distanceY = fsync.Vector.len(fsync.Vector.subDown(pt1.clone(), pt2))\n\n\t\t\tlet vec1 = pq1.getMaxMoveVector()\n\t\t\tlet vec2 = pq2.getMaxMoveVector()\n\t\t\tlet distanceX = fsync.Vector.len(fsync.Vector.subDown(vec1.clone(), vec2))\n\n\t\t\tlet th = Math.atan2(distanceX, distanceY)\n\t\t\tlet center = fsync.Vector.addUp(pt1.clone(), pt2)\n\n\t\t\tlet info: RotateInfo = {\n\t\t\t\tth: th,\n\t\t\t\trotation: th / Math.PI * 180,\n\t\t\t\tcenter,\n\t\t\t}\n\n\t\t\treturn info\n\t\t}\n\n\t}\n\n\texport class GuestureConfig {\n\t\t/**\n\t\t * 最小移动距离\n\t\t */\n\t\tdragDistanceMin: number = 1\n\t\t/**\n\t\t * \n\t\t */\n\t\trotateRadius: number = 170\n\t}\n\n\t/**\n\t * 手势分析\n\t */\n\texport class GuestureAnalyzer {\n\t\tprotected pointQueues: TouchPointQueue[]\n\t\tprotected config: GuestureConfig\n\n\t\tprotected getActivedPointQueues() {\n\t\t\treturn this.pointQueues.filter((queue) => {\n\t\t\t\treturn queue.touching\n\t\t\t})\n\t\t}\n\n\t\tinit() {\n\t\t\tthis.pointQueues = []\n\t\t\tthis.config = new GuestureConfig()\n\t\t\treturn this\n\t\t}\n\n\t\tfindTouchPointQueueById(id: number): TouchPointQueue | null {\n\t\t\t// 基本能完全预测准\n\t\t\t{\n\t\t\t\tlet predictV = this.pointQueues[id]\n\t\t\t\tif (predictV && predictV.touchId == id) {\n\t\t\t\t\treturn predictV\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let i in this.pointQueues) {\n\t\t\t\tlet v = this.pointQueues[i]\n\t\t\t\tif (v.touchId == id) {\n\t\t\t\t\t// console.warn(\"missmatch\", id, i)\n\t\t\t\t\treturn v\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null\n\t\t}\n\n\t\t/**\n\t\t * 输入点触信息\n\t\t * @param points \n\t\t */\n\t\tinputTouchPoints(touching: boolean, points: TouchPoint[]) {\n\n\t\t\tconst pointQueues = this.pointQueues\n\t\t\tfor (let i in points) {\n\t\t\t\tif (points[i] != null) {\n\t\t\t\t\t// let pq = pointQueues[i]\n\t\t\t\t\tlet pqid = idTool.mapToContinuousId(i)\n\t\t\t\t\tlet pq = this.findTouchPointQueueById(pqid)\n\t\t\t\t\tif (pq == null) {\n\t\t\t\t\t\tpq = new TouchPointQueue().init()\n\t\t\t\t\t\tpq.touchId = pqid\n\t\t\t\t\t\t// pointQueues[i] = pq\n\t\t\t\t\t\tpointQueues[pqid] = pq\n\t\t\t\t\t}\n\t\t\t\t\tif (!pq.touching) {\n\t\t\t\t\t\tpq.clearPoints()\n\t\t\t\t\t}\n\t\t\t\t\tpq.touching = touching\n\t\t\t\t\tpq.unshift(points[i])\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * 单点手势\n\t\t */\n\t\tgetSinglePointGuesture(): GuestureInfo | null {\n\t\t\tconst config = this.config\n\t\t\tlet pointQueues = this.getActivedPointQueues()\n\t\t\tlet info: GuestureInfo = null\n\t\t\tif (pointQueues.length >= 1) {\n\t\t\t\tlet pointQueue = pointQueues[0]\n\t\t\t\tif (fsync.Vector.len(pointQueue.getMaxMoveVector()) > config.dragDistanceMin) {\n\t\t\t\t\tlet tinfo = new DragGuestureInfo()\n\t\t\t\t\ttinfo.init(pointQueues)\n\t\t\t\t\tinfo = tinfo\n\t\t\t\t} else {\n\t\t\t\t\tlet tinfo = new ClickGuestureInfo()\n\t\t\t\t\ttinfo.gtype = GuestureTypes.touch\n\t\t\t\t\ttinfo.init(pointQueues)\n\t\t\t\t\tinfo = tinfo\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// 未触摸\n\t\t\t\tlet tinfo = new ClickGuestureInfo()\n\t\t\t\ttinfo.gtype = GuestureTypes.loose\n\t\t\t\ttinfo.init(pointQueues)\n\t\t\t\tinfo = tinfo\n\t\t\t}\n\t\t\treturn info\n\t\t}\n\n\t\tgetTowPointGuesture(): GuestureInfo | null {\n\t\t\tconst config = this.config\n\t\t\tconst pointQueues = this.getActivedPointQueues()\n\t\t\tlet info: GuestureInfo = null\n\t\t\tif (pointQueues.length == 2) {\n\t\t\t\tlet pq1 = pointQueues[0]\n\t\t\t\tlet pq2 = pointQueues[1]\n\t\t\t\tlet moveVec1 = pq1.getMaxMoveVector()\n\t\t\t\tlet moveVec2 = pq2.getMaxMoveVector()\n\t\t\t\t/**\n\t\t\t\t * 计算点到直线距离\n\t\t\t\t * @param index1 \n\t\t\t\t * @param pt2 \n\t\t\t\t */\n\t\t\t\tlet calcDistance = (index1: number, pt2: TouchPoint) => {\n\t\t\t\t\tlet pq = pointQueues[index1]\n\t\t\t\t\tlet moveVec = pq.getMaxMoveVector()\n\t\t\t\t\tlet pt = pq.getPoint(0)\n\t\t\t\t\tif (moveVec.x == 0) {\n\t\t\t\t\t\treturn fsync.Vector.distance(pt, pt2)\n\t\t\t\t\t}\n\t\t\t\t\tlet k = moveVec.y / moveVec.x\n\t\t\t\t\tlet A = -k\n\t\t\t\t\tlet B = 1\n\t\t\t\t\tlet C = -pt.y + k * pt.x\n\t\t\t\t\tlet d = Math.abs((A * pt2.x + B * pt2.y + C) / ((A * A + B * B) ** 0.5))\n\t\t\t\t\treturn d\n\t\t\t\t}\n\t\t\t\tif (fsync.Vector.len(moveVec1) > config.dragDistanceMin || fsync.Vector.len(moveVec2) > config.dragDistanceMin) {\n\t\t\t\t\t// 计算点到直线距离\n\t\t\t\t\tlet d1 = calcDistance(0, pq2.getPoint(0))\n\t\t\t\t\tlet d2 = calcDistance(1, pq1.getPoint(0))\n\t\t\t\t\tif (d1 < config.rotateRadius || d2 < config.rotateRadius) {\n\t\t\t\t\t\t// 缩放操作\n\t\t\t\t\t\tlet tinfo = new ScaleGuestureInfo()\n\t\t\t\t\t\ttinfo.init(pointQueues)\n\t\t\t\t\t\tinfo = tinfo\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 旋转力矩足够，旋转操作\n\t\t\t\t\t\tlet tinfo = new RotateGuestureInfo()\n\t\t\t\t\t\ttinfo.init(pointQueues)\n\t\t\t\t\t\tinfo = tinfo\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// 非双指操作\n\t\t\t}\n\t\t\treturn info\n\t\t}\n\n\t\t/**\n\t\t * 获取手势信息\n\t\t */\n\t\tgetCurrentGuesture(): GuestureInfo | null {\n\t\t\tlet info: GuestureInfo = null\n\n\t\t\tconst pointQueues = this.getActivedPointQueues()\n\t\t\tif (pointQueues.length >= 2) {\n\t\t\t\tinfo = this.getTowPointGuesture()\n\t\t\t\tif (info == null) {\n\t\t\t\t\tinfo = this.getSinglePointGuesture()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinfo = this.getSinglePointGuesture()\n\t\t\t}\n\t\t\treturn info\n\t\t}\n\t}\n}\n","\nnamespace kitten.rpg {\n\t/**\n\t * 缓存指定角色行为的命令\n\t */\n\texport class SingleActorCmdBuffer<T extends IActorCmd = IActorCmd> {\n\t\tprotected cmds: T[]\n\n\t\tinit() {\n\t\t\tthis.cmds = []\n\t\t\treturn this\n\t\t}\n\n\t\tputCmd(cmd: T) {\n\t\t\tthis.cmds.push(cmd)\n\t\t}\n\n\t\tpopCmd(): T {\n\t\t\treturn this.cmds.shift()\n\t\t}\n\n\t\tgetLatestCmd(): T {\n\t\t\treturn this.cmds[this.cmds.length - 1]\n\t\t}\n\t}\n\n\t/**\n\t * 管理所有角色命令缓冲\n\t */\n\texport class ActorCmdBuffer<T extends IActorCmd = IActorCmd>{\n\t\tcmdBuffers: { [key: string]: SingleActorCmdBuffer<T> }\n\n\t\tinit() {\n\t\t\tthis.cmdBuffers = {}\n\t\t\treturn this\n\t\t}\n\n\t\taddCmdBuffer(actorId: TActorId) {\n\t\t\tlet cmdBuffer = this.getCmdBuffer(actorId)\n\t\t\tif (cmdBuffer == null) {\n\t\t\t\tcmdBuffer = this.cmdBuffers[actorId] = new SingleActorCmdBuffer<T>().init()\n\t\t\t}\n\t\t\treturn cmdBuffer\n\t\t}\n\n\t\tputCmd(cmd: T) {\n\t\t\tthis.addCmdBuffer(cmd.actorId).putCmd(cmd)\n\t\t}\n\n\t\tgetCmdBuffer(actorId: TActorId) {\n\t\t\treturn this.cmdBuffers[actorId]\n\t\t}\n\n\t\tgetLatestCmd(actorId: TActorId) {\n\t\t\treturn this.addCmdBuffer(actorId).getLatestCmd()\n\t\t}\n\n\t\tgetOrPutLatestCmd(actorId: TActorId) {\n\t\t\tlet cmdBuffer = this.addCmdBuffer(actorId)\n\t\t\tlet cmd = cmdBuffer.getLatestCmd()\n\t\t\tif (cmd == null) {\n\t\t\t\tcmd = {\n\t\t\t\t\tactorId,\n\t\t\t\t} as T\n\t\t\t\tcmdBuffer.putCmd(cmd)\n\t\t\t}\n\t\t\treturn cmd\n\t\t}\n\n\t\tgetActors(): TActorId[] {\n\t\t\treturn Object.keys(this.cmdBuffers)\n\t\t}\n\n\t\tclear() {\n\t\t\tthis.init()\n\t\t}\n\t}\n}\n","\nnamespace kitten.rpg {\n\t/**\n\t * 角色行为命令定义\n\t */\n\texport interface IActorCmd {\n\t\t// 执行者id\n\t\tactorId: TActorId\n\n\t}\n\n\texport interface IRPGActorCmd extends IActorCmd {\n\t\t// 移动\n\t\tmove?: {\n\t\t\t// 方向\n\t\t\tdir: number[],\n\t\t}\n\t\tskill?: {\n\t\t\tskillName: string\n\t\t\tskillId?: number\n\t\t\ttargets?: TActorId[]\n\t\t}\n\t}\n}\n","\nnamespace kitten.rpg {\n\texport interface ICmdTranslator {\n\t\tinit(): ICmdTranslator\n\t\tsetRoleData(roleData: RPGRoleDataBase)\n\t\tsetGameInput(gamepad: kitten.gamepad.NormalGamepad)\n\t\tclearCurGameCmd(): void\n\t\tgetCurGameCmd(): fsync.IGameInputCmd\n\t\tgetNopCmd(): fsync.IGameInputCmd\n\t}\n}\n","\nnamespace kitten.rpg {\n\texport type TActorId = string\n\n\texport class RPGPlayerCmd implements fsync.IGameInputCmd {\n\t\tnetFrameCount?: number;\n\t\tisAdjustedForSurge?: boolean;\n\t\tcmdType: \"RoleCmd\" | \"Pass\";\n\t\tcmdId: string;\n\t\tneedSync?: boolean;\n\t\troute: \"net\" | \"local\";\n\t\troleId: fsync.TRoleId;\n\t\tcreateTime: number;\n\t\tgenType?: \"con\" | \"sep\";\n\t\tcreateFrameCount?: number;\n\t\tframeCount?: number;\n\t\treceivedTime?: number;\n\t\tisSurge?: boolean;\n\t\tcmdIndex: number;\n\t\tmove?: {\n\t\t\t// 执行者id\n\t\t\tactorId: TActorId\n\t\t\ttimes: number,\n\t\t\t// 方位\n\t\t\tdir: number[];\n\t\t};\n\t\tskills?: {\n\t\t\t// 执行者id\n\t\t\tactorId: TActorId\n\t\t\tskillName: string;\n\t\t\tskillId: number;\n\t\t\t/**\n\t\t\t * 技能在技能列表中索引\n\t\t\t */\n\t\t\tskillIndex: number;\n\n\t\t\ttouchAction: gamepad.TTouchAction\n\t\t\ttargets?: string[];\n\t\t\t// 方位\n\t\t\tdir: number[];\n\t\t}[]\n\n\t}\n}\n","\nnamespace kitten.rpg {\n\tconst uidTool = new fsync.UniqueIDTool().init()\n\n\t/**\n\t * 将玩家操作转译成统一指令\n\t */\n\texport class RPGPlayerCmdTranslator implements ICmdTranslator {\n\t\tinit() {\n\t\t\treturn this\n\t\t}\n\n\t\tprotected curGameCmd: RPGPlayerCmd\n\n\t\tprotected roleData: RPGRoleDataBase\n\t\tsetRoleData(roleData: RPGRoleDataBase) {\n\t\t\tthis.roleData = roleData\n\t\t}\n\n\t\tprotected curCmdIndex = 1\n\t\tprotected initGameCtrl() {\n\t\t\tlet cmd = this.curGameCmd\n\t\t\tif (cmd == null) {\n\t\t\t\tconst now = Date.now()\n\t\t\t\tcmd = {\n\t\t\t\t\tcmdIndex: -1,\n\t\t\t\t\tneedSync: true,\n\t\t\t\t\troute: \"local\",\n\t\t\t\t\tcmdType: \"RoleCmd\",\n\t\t\t\t\tcmdId: null,\n\t\t\t\t\troleId: this.roleData.roleId,\n\t\t\t\t\tcreateTime: now,\n\t\t\t\t\tskills: [],\n\t\t\t\t}\n\t\t\t\tthis.curGameCmd = cmd\n\t\t\t}\n\t\t}\n\n\t\tprotected getGameCmd() {\n\t\t\tthis.initGameCtrl()\n\t\t\tlet cmd = this.curGameCmd\n\t\t\treturn cmd\n\t\t}\n\n\t\tprotected gamepad: kitten.gamepad.NormalGamepad\n\t\tsetGameInput(gamepad: kitten.gamepad.NormalGamepad) {\n\t\t\tthis.gamepad = gamepad\n\t\t}\n\n\t\t/**\n\t\t * 简单的转义出：df []\n\t\t * - 左按下->平移{方向，正在移动}\n\t\t * - 右按下->技能方向{技能索引，方向，正在释放}\n\t\t */\n\t\tprotected translate(gamepad: kitten.gamepad.NormalGamepad) {\n\t\t\tif (gamepad == null) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tgamepad.updateVirtualCtrls()\n\n\t\t\tif (gamepad.leftStickStatus.pressed) {\n\t\t\t\tlet cmd = this.getGameCmd()\n\t\t\t\tcmd.move = {\n\t\t\t\t\tactorId: undefined,\n\t\t\t\t\ttimes: 1,\n\t\t\t\t\tdir: gamepad.leftStickStatus.dir.getBinData(),\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet cmd = this.getGameCmd()\n\t\t\t\tcmd.move = null\n\t\t\t}\n\n\t\t\tthis.getGameCmd().skills.length = 0\n\t\t\tlet skillSticks = gamepad.virutalCtrls.slice(1)\n\t\t\tfor (let i = 0; i < skillSticks.length; i++) {\n\t\t\t\tlet status = skillSticks[i].ctrlStatus\n\t\t\t\tif (status.touchAction != \"loosed\") {\n\t\t\t\t\tlet cmd = this.getGameCmd()\n\t\t\t\t\tcmd.skills.push({\n\t\t\t\t\t\tskillIndex: i,\n\t\t\t\t\t\tactorId: undefined,\n\t\t\t\t\t\tskillName: undefined,\n\t\t\t\t\t\tskillId: undefined,\n\t\t\t\t\t\ttargets: [],\n\t\t\t\t\t\ttouchAction: status.touchAction,\n\t\t\t\t\t\tdir: status.dir.getBinData(),\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tlet cmd = this.curGameCmd\n\t\t\t\tif (\n\t\t\t\t\tcmd.skills.length == 0\n\t\t\t\t\t&& cmd.move == null\n\t\t\t\t) {\n\t\t\t\t\tthis.curGameCmd = null\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tclearCurGameCmd(): void {\n\t\t\tthis.curGameCmd = null\n\t\t}\n\n\t\tprotected cmdCopy = fsync.EmptyTable()\n\t\tgetCurGameCmd(): fsync.IGameInputCmd {\n\t\t\tthis.translate(this.gamepad)\n\t\t\tlet cmd = fsync.ObjectUtils.copyDataDeep({} as fsync.IGameInputCmd, this.curGameCmd)\n\t\t\tif (cmd != null) {\n\t\t\t\tcmd.cmdId = uidTool.genTypedId(\"icmd_\" + this.roleData.roleId)\n\t\t\t\tcmd.cmdIndex = this.curCmdIndex++\n\t\t\t}\n\t\t\treturn cmd\n\t\t}\n\n\t\t/**\n\t\t * 创建一个空指令, 提示一帧结束\n\t\t */\n\t\tgetNopCmd() {\n\t\t\tlet cmd: RPGPlayerCmd = {\n\t\t\t\t/**\n\t\t\t\t * 命令类型\n\t\t\t\t */\n\t\t\t\tcmdType: \"RoleCmd\",\n\t\t\t\tcmdId: uidTool.genTypedId(\"icmd_\" + this.roleData.roleId),\n\t\t\t\t/**\n\t\t\t\t * 创建顺序，保证命令执行顺序\n\t\t\t\t */\n\t\t\t\tcmdIndex: this.curCmdIndex++,\n\t\t\t\t/**\n\t\t\t\t * 该命令是否需要触发同步\n\t\t\t\t * - 默认false\n\t\t\t\t */\n\t\t\t\tneedSync: true,\n\t\t\t\t// 来源\n\t\t\t\troute: \"local\",\n\t\t\t\t// 输入端id，通常可使用roleId代替\n\t\t\t\troleId: this.roleData.roleId,\n\t\t\t\t// 创建时间（发送时间）\n\t\t\t\tcreateTime: Date.now(),\n\t\t\t\tskills: [],\n\t\t\t}\n\t\t\treturn cmd\n\t\t}\n\t}\n}\n","\nnamespace kitten.rpg {\n\texport class RPGRoleDataBase {\n\t\tuserId: fsync.TUserId = 0\n\t\troleId: fsync.TRoleId = \"\"\n\t\troomId?: fsync.TRoomId = 0\n\t\tlevel: number = 0\n\t\tbattleCount: number = 0\n\t\tscore: number = 0\n\t\twinRate: number = 0\n\t}\n}\n","\n/**\n * 手势分析\n */\nnamespace kitten.uievent {\n\texport type UserInputData = {\n\t\taction: \"onsetup\" | \"updateclientsize\" | \"onkeydown\" | \"onkeyup\" | \"onmousemove\" | \"onmousedown\" | \"onmouseup\" | \"ontouchmove\" | \"ontouchstart\" | \"ontouchend\",\n\t\tevent: {\n\t\t\tclientX?: number,\n\t\t\tclientY?: number,\n\t\t\tkeyCode?: number,\n\t\t\tkey?: string,\n\t\t\ttouches?: {\n\t\t\t\tidentifier: number,\n\t\t\t\tclientX?: number,\n\t\t\t\tclientY?: number,\n\t\t\t}[]\n\t\t},\n\t\tclientSize: {\n\t\t\twidth: number,\n\t\t\theight: number,\n\t\t},\n\t}\n\n\texport class UIEventHandler {\n\n\t\tprotected _initOnce = false\n\n\t\tprotected convertDesignX: (n: number) => number\n\t\tprotected convertDesignY: (n: number) => number\n\n\t\tprotected handlerEvent(data: UserInputData) {\n\t\t\tdata.event.clientX = this.convertDesignX(data.event.clientX)\n\t\t\tdata.event.clientY = this.convertDesignY(data.event.clientY)\n\t\t\tfor (let t of data.event.touches || []) {\n\t\t\t\tt.clientX = this.convertDesignX(t.clientX)\n\t\t\t\tt.clientY = this.convertDesignY(t.clientY)\n\t\t\t}\n\t\t\t// console.log(data)\n\n\t\t\tfor (let handler of fsync.device.userEventHandlers) {\n\t\t\t\thandler(JSON.stringify(data))\n\t\t\t}\n\t\t}\n\n\t\tbindUIEvents(force: boolean = false) {\n\t\t\tif (this._initOnce && (!force)) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tthis._initOnce = true\n\n\t\t\tconst clientSize = fsync.device.clientSize\n\t\t\tlet convertDesignX: (n: number) => number\n\t\t\tlet convertDesignY: (n: number) => number\n\n\t\t\tfunction _initGraph() {\n\t\t\t\t// const screenWidth = document.body.clientWidth\n\t\t\t\t// const screenHeight = document.body.clientHeight\n\t\t\t\tconst designWidth = clientSize.x\n\t\t\t\tconst designHeight = clientSize.y\n\n\t\t\t\tconst screenWidth = window.innerWidth\n\t\t\t\tconst screenHeight = window.innerHeight\n\t\t\t\tconsole.log(screenWidth, screenHeight)\n\t\t\t\tconst scaleX = screenWidth / designWidth\n\t\t\t\tconst scaleY = screenHeight / designHeight\n\t\t\t\tconst scaleMin = Math.min(scaleX, scaleY)\n\t\t\t\tconst width = designWidth * scaleMin\n\t\t\t\tconst height = designHeight * scaleMin\n\n\t\t\t\tconsole.log(\"screenSize:\", screenWidth, screenHeight)\n\t\t\t\tconsole.log(\"deviceSize:\", width, height)\n\n\t\t\t\tconvertDesignX = (x: number) => {\n\t\t\t\t\treturn (x - (screenWidth - width) / 2) / scaleMin\n\t\t\t\t}\n\t\t\t\tconvertDesignY = (y: number) => {\n\t\t\t\t\treturn (y - (screenHeight - height) / 2) / scaleMin\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t_initGraph()\n\n\t\t\tthis.convertDesignX = convertDesignX\n\t\t\tthis.convertDesignY = convertDesignY\n\n\t\t\tlet handlerEvent = (data: UserInputData) => {\n\t\t\t\treturn this.handlerEvent(data)\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tdocument.onkeydown = (ev: KeyboardEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"onkeydown\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\tkeyCode: ev.keyCode,\n\t\t\t\t\t\t\tkey: ev.key,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\n\t\t\t\tdocument.onkeyup = (ev: KeyboardEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"onkeyup\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\tkeyCode: ev.keyCode,\n\t\t\t\t\t\t\tkey: ev.key,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"document.onkeyXXX not support\")\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tdocument.onmousedown = (ev: MouseEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"onmousedown\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\tclientX: ev.clientX,\n\t\t\t\t\t\t\tclientY: ev.clientY,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\n\t\t\t\tdocument.onmouseup = (ev: MouseEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"onmouseup\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\tclientX: ev.clientX,\n\t\t\t\t\t\t\tclientY: ev.clientY,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\n\t\t\t\tdocument.onmousemove = (ev: MouseEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"onmousemove\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\tclientX: ev.clientX,\n\t\t\t\t\t\t\tclientY: ev.clientY,\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"document.onmouseXXX not support\")\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tdocument.ontouchstart = (ev: TouchEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"ontouchstart\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\ttouches: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0; i < ev.changedTouches.length; i++) {\n\t\t\t\t\t\tlet t = ev.changedTouches[i]\n\t\t\t\t\t\tdata.event.touches.push({\n\t\t\t\t\t\t\tidentifier: t.identifier,\n\t\t\t\t\t\t\tclientX: t.clientX,\n\t\t\t\t\t\t\tclientY: t.clientY,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\n\t\t\t\tdocument.ontouchend = (ev: TouchEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"ontouchend\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\ttouches: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0; i < ev.changedTouches.length; i++) {\n\t\t\t\t\t\tlet t = ev.changedTouches[i]\n\t\t\t\t\t\tdata.event.touches.push({\n\t\t\t\t\t\t\tidentifier: t.identifier,\n\t\t\t\t\t\t\tclientX: t.clientX,\n\t\t\t\t\t\t\tclientY: t.clientY,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\n\t\t\t\tdocument.ontouchmove = (ev: TouchEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"ontouchmove\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t\ttouches: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0; i < ev.changedTouches.length; i++) {\n\t\t\t\t\t\tlet t = ev.changedTouches[i]\n\t\t\t\t\t\tdata.event.touches.push({\n\t\t\t\t\t\t\tidentifier: t.identifier,\n\t\t\t\t\t\t\tclientX: t.clientX,\n\t\t\t\t\t\t\tclientY: t.clientY,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"document.ontouchXXX not support\")\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tdocument.body.onresize = (ev: UIEvent) => {\n\t\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\t\taction: \"updateclientsize\",\n\t\t\t\t\t\tclientSize: {\n\t\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tevent: {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\thandlerEvent(data)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"document.body.onresize not support\")\n\t\t\t}\n\n\t\t}\n\n\t\tpostInitEvent(size: fsync.Vector3) {\n\t\t\tconst clientSize = fsync.device.clientSize\n\t\t\tclientSize.x = size.x\n\t\t\tclientSize.y = size.y\n\n\t\t\tlet handlerEvent = (data: UserInputData) => {\n\t\t\t\treturn this.handlerEvent(data)\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\taction: \"updateclientsize\",\n\t\t\t\t\tclientSize: {\n\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t},\n\t\t\t\t\tevent: {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\thandlerEvent(data)\n\t\t\t}\n\t\t\t{\n\t\t\t\tconst data: UserInputData = {\n\t\t\t\t\taction: \"onsetup\",\n\t\t\t\t\tclientSize: {\n\t\t\t\t\t\twidth: clientSize.x,\n\t\t\t\t\t\theight: clientSize.y,\n\t\t\t\t\t},\n\t\t\t\t\tevent: {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\thandlerEvent(data)\n\t\t\t}\n\t\t}\n\t}\n\n\texport const uiEventHandler = new UIEventHandler()\n}\n","namespace lang.libs {\n\n    export type LogParam = { time?: boolean, tags?: string[] }\n\n    export class Log {\n\n        private static _enablePlainLog: boolean = false;\n        public static get enablePlainLog(): boolean {\n            return Log._enablePlainLog;\n        }\n        public static toPlainLog(args: any[]) {\n            const plainTexts = []\n            for (let info of args) {\n                let ret = ''\n                if (info instanceof Error) {\n                    ret = `Error content: ${JSON.stringify(info)}\\n${info.stack}`\n                } else if (info instanceof Object) {\n                    ret = JSON.stringify(info)\n                } else {\n                    ret = info\n                }\n                plainTexts.push(ret)\n            }\n\n            return plainTexts\n        }\n\n        public static set enablePlainLog(value: boolean) {\n            Log._enablePlainLog = value;\n            if (value) {\n                const logOld = console.log\n                const warnOld = console.warn\n                const errorOld = console.error\n                console['logOld'] = console['logOld'] || logOld\n                console['warnOld'] = console['warnOld'] || warnOld\n                console['errorOld'] = console['errorOld'] || errorOld\n                console.log = function (...args) {\n                    const plainTexts = Log.toPlainLog(args)\n                    logOld.apply(console, plainTexts)\n                }\n\n                console.warn = function (...args) {\n                    const plainTexts = Log.toPlainLog(args)\n                    warnOld.apply(console, plainTexts)\n                }\n\n                console.error = function (...args) {\n                    const plainTexts = Log.toPlainLog(args)\n                    errorOld.apply(console, plainTexts)\n                }\n            } else {\n                if (console['logOld']) {\n                    console.log = console['logOld']\n                }\n                if (console['warnOld']) {\n                    console.warn = console['warnOld']\n                }\n                if (console['errorOld']) {\n                    console.error = console['errorOld']\n                }\n            }\n        }\n\n        protected static _instance: Log\n        public static get instance(): Log {\n            if (!this._instance)\n                this._instance = new Log();\n            return this._instance;\n        }\n\n        protected time?: boolean\n        protected tags?: string[]\n\n        constructor(x: LogParam = {}) {\n            this.setLogParams(x)\n        }\n\n        setLogParams({ time, tags }: LogParam = {}) {\n            this.time = time\n            if (tags) {\n                this.tags = tags.concat()\n            }\n        }\n\n\n        protected getTagsStamp() {\n            let tag = `[${this.tags.join('][')}]`\n            if (this.time) {\n                tag = tag + `[t/${Date.now()}]`\n            }\n            return tag\n        }\n\n        /**\n         * 将消息打印到控制台，不存储至日志文件\n         */\n        info(...args) {\n            // if (this.tags) {\n            //     args = this.tags.concat(args)\n            // }\n            // if (this.time) {\n            //     args.push(new Date().getTime())\n            // }\n            console.log(' -', this.getTagsStamp(), ...args);\n        }\n\n        /**\n         * 将消息打印到控制台，并储至日志文件\n         */\n        warn(...args) {\n            // if (this.tags) {\n            //     args = this.tags.concat(args)\n            // }\n            // if (this.time) {\n            //     args.push(new Date().getTime())\n            // }\n            console.warn(' -', this.getTagsStamp(), ...args);\n        }\n\n        /**\n         * 将消息打印到控制台，并储至日志文件\n         */\n        error(...args) {\n            // if (this.tags) {\n            //     args = this.tags.concat(args)\n            // }\n            // if (this.time) {\n            //     args.push(new Date().getTime())\n            // }\n            console.error(' -', this.getTagsStamp(), ...args);\n            for (let p of args) {\n                if (p instanceof Error) {\n                    console.log(p.stack)\n                }\n            }\n            console.log('>>>error')\n            console.log(new Error().stack)\n        }\n\n    }\n\n    export var log = Log.instance\n\n}","namespace fsync {\n\n\t/**\n\t * client base on websocket on browser platform\n\t */\n\texport class BWebSocketClient implements INetClient {\n\t\tprotected client: WebSocket\n\t\tprotected sessionId: TSessionId\n\n\t\tonerror: (error: Error) => void | null = null;\n\t\tonclose: (reason: Reason) => void | null = null;\n\t\tisConnected: boolean = false\n\n\t\tinit() {\n\t\t\tthis.sessionId = 0\n\t\t\tthis.isConnected = false\n\t\t\tthis.sessionCallbacks = EmptyTable()\n\t\t\tthis.subHandlers = EmptyTable()\n\t\t\treturn this\n\t\t}\n\n\t\tsendRaw(data: bytes) {\n\t\t\tthis.client.send(data)\n\t\t}\n\t\tsend(reqId: TReqId, data: bytes, call: (info: SessionInfo) => void = null) {\n\t\t\tif (this.sessionId == 0) {\n\t\t\t\tthis.sessionId++\n\t\t\t}\n\t\t\tlet sessionId = this.sessionId++\n\n\t\t\tlet sessionInfo = [\n\t\t\t\t// sessionId\n\t\t\t\tsessionId,\n\t\t\t\t// reqId\n\t\t\t\treqId,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t]\n\n\t\t\tlet sessionData = new Uint8Array(Uint32Array.from(sessionInfo).buffer)\n\n\t\t\tlet headInfo = [\n\t\t\t\t// headSize\n\t\t\t\tTCPReqHeadSize,\n\t\t\t\t// dataSize\n\t\t\t\tSessionInfoHeadSize + data.length,\n\t\t\t\t// TransOptions\n\t\t\t\t0,\n\t\t\t]\n\n\t\t\tlet headData = new Uint8Array(Uint32Array.from(headInfo).buffer)\n\t\t\tlet sendData = BufferHelper.concatUint8Array([headData, sessionData, data])\n\n\t\t\tif (!!call) {\n\t\t\t\tassert_true(!this.sessionCallbacks[sessionId])\n\t\t\t\tthis.sessionCallbacks[sessionId] = call\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tthis.sendRaw(sendData)\n\t\t\t} catch (e) {\n\t\t\t\tdelete this.sessionCallbacks[sessionId]\n\t\t\t}\n\t\t}\n\n\t\tlisten(reqId: TReqId, call: (info: SessionInfo) => void) {\n\t\t\tlet handlers = this.subHandlers[reqId]\n\t\t\tif (handlers == null) {\n\t\t\t\thandlers = []\n\t\t\t\tthis.subHandlers[reqId] = handlers\n\t\t\t}\n\t\t\thandlers.push(call)\n\t\t}\n\n\t\tprotected sessionCallbacks: { [key: number]: ClientReqHandler }\n\t\tprotected subHandlers: { [key: number]: ClientReqHandler[] }\n\t\tprotected onProcessData(data: ArrayBuffer) {\n\t\t\t/**\n\t\t\t *\ttype HeadInfo struct {\n\t\t\t *\t\t// 头部大小\n\t\t\t *\t\tHeadSize uint32\n\t\t\t *\t\t// 数据段总大小（不包含头部大小）\n\t\t\t *\t\tDataSize uint32\n\t\t\t *\t\tTransOptions TTCPTransOptions(uint32)\n\t\t\t *\t}\n\t\t\t * 头部 3 个 uint32 大小\n\t\t\t */\n\t\t\t/**\n\t\t\t*\ttype SessionInfoHead struct {\n\t\t\t*\t\tSessionId TSessionId\n\t\t\t*\t\tReqId     TReqId\n\t\t\t*\t\tTime      TTimeStamp\n\t\t\t*\t}\n\t\t\t* \tSessionHead 4 个 uint32 大小\n\t\t\t*/\n\t\t\tconst sessionData = data.slice(TCPReqHeadSize, TCPReqHeadSize + SessionInfoHeadSize)\n\t\t\tconst sessionUint32 = new Uint32Array(sessionData)\n\t\t\tconst sessionId = sessionUint32[0]\n\t\t\tconst reqId = sessionUint32[1]\n\t\t\tconst body = data.slice(TCPReqHeadSize + SessionInfoHeadSize)\n\t\t\tconst time = sessionUint32[2] * (3 ** 32) + sessionUint32[3]\n\n\t\t\tconst sessionInfo: SessionInfo = {\n\t\t\t\tdata: new Uint8Array(body),\n\t\t\t\treqId: reqId,\n\t\t\t\trawData: data,\n\t\t\t\tsessionId: sessionId,\n\t\t\t\ttime: 0,\n\t\t\t}\n\n\t\t\tconst call = this.sessionCallbacks[sessionId]\n\t\t\tif (!!call) {\n\t\t\t\tdelete this.sessionCallbacks[sessionId]\n\t\t\t\tcall(sessionInfo)\n\t\t\t}\n\t\t\tconst handlers = this.subHandlers[reqId]\n\t\t\tif (!!handlers) {\n\t\t\t\tfor (let handler of handlers.concat()) {\n\t\t\t\t\thandler(sessionInfo)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconnect(url: string): Promise<void> {\n\t\t\tif (!url.startsWith(\"ws://\")) {\n\t\t\t\tconsole.error(\"add 'ws://' to url please\")\n\t\t\t}\n\n\t\t\tconst ret = new RPromise<void>()\n\n\t\t\tlet client = new WebSocket(url)\n\n\t\t\tclient.onerror = (ev: Event) => {\n\t\t\t\tret.fail(ev)\n\t\t\t}\n\n\t\t\tclient.close = (code?: number, reason?: string) => {\n\t\t\t\tthis.isConnected = false\n\t\t\t\tconst _ = this.onclose && this.onclose({ code, reason })\n\t\t\t}\n\n\t\t\tclient.onopen = (ev: Event) => {\n\t\t\t\tclient.binaryType = \"arraybuffer\"\n\n\t\t\t\tthis.isConnected = true\n\t\t\t\tclient.onerror = (ev: Event) => {\n\t\t\t\t\tconst _ = this.onerror && this.onerror(new Error(\"\" + ev))\n\t\t\t\t}\n\n\t\t\t\tret.success(undefined)\n\t\t\t}\n\n\t\t\tclient.onmessage = async (e: MessageEvent) => {\n\t\t\t\tconst data = e.data as ArrayBuffer\n\t\t\t\tthis.onProcessData(data)\n\t\t\t}\n\n\t\t\tthis.client = client\n\n\t\t\treturn ret.promise\n\t\t}\n\n\t\tclose() {\n\t\t\tif(this.client!=null){\n\t\t\t\tthis.client.close()\n\t\t\t}\n\t\t}\n\n\t}\n\n}","namespace fsync {\n\t// import { WebSocketClient } from \"./WebSocketClient\";\n\n\texport class ClientFactory {\n\t\tstatic createClient(proto: \"websocket\"): INetClient {\n\t\t\tlet client: INetClient\n\t\t\tif (document == null) {\n\t\t\t\t// client = new WebSocketClient()\n\t\t\t} else {\n\t\t\t\tclient = new BWebSocketClient()\n\t\t\t}\n\n\t\t\tclient.init()\n\t\t\treturn client\n\t\t}\n\t}\n\n}","namespace fsync {\n\nexport interface INetClient {\n\tinit()\n\tisConnected: boolean\n\tsendRaw(data: bytes)\n\tsend(reqId: TReqId, data: bytes, call: (info: SessionInfo) => void)\n\tonerror: (error: Error) => void | null;\n\tonclose: (reason: Reason) => void | null;\n\tclose()\n\tconnect(url: string): Promise<void>\n\tlisten(reqId: TReqId, call: (info: SessionInfo) => void)\n}\n\n}","namespace fsync {\n\n\texport class PBClient {\n\t\tclient: INetClient\n\t\tproto: ProtoTool\n\t\tinit(client: INetClient) {\n\t\t\tthis.client = client\n\t\t\treturn this\n\t\t}\n\n\t\tSendReqPB(reqId: TReqId, message: Object, cls: new () => any, call: (info: SessionInfo) => void = null) {\n\t\t\tlet bdata = this.proto.encode(message, cls)\n\t\t\treturn this.send(reqId, bdata, call)\n\t\t}\n\n\t\tSubEvent(respId: TRespId, call: (result: SessionInfo) => void) {\n\t\t\tthis.client.listen(respId, call)\n\t\t}\n\n\t\tclose() {\n\t\t\tthis.client && this.client.close()\n\t\t}\n\n\t\tconnect(url: string): Promise<void> {\n\t\t\treturn this.client.connect(url)\n\t\t}\n\t\tlisten(reqId: TReqId, call: (info: SessionInfo) => void) {\n\t\t\treturn this.client.listen(reqId, call)\n\t\t}\n\n\t\tsendRaw(data: bytes) {\n\t\t\treturn this.client.sendRaw(data)\n\t\t}\n\t\tsend(reqId: TReqId, data: bytes, call: (info: SessionInfo) => void = null) {\n\t\t\treturn this.client.send(reqId, data, call)\n\t\t}\n\n\t\tset onerror(value: (error: Error) => void | null) {\n\t\t\tthis.client.onerror = value\n\t\t}\n\t\tget onerror(): (error: Error) => void | null {\n\t\t\treturn this.client.onerror\n\t\t}\n\n\t\tset onclose(value: (reason: Reason) => void | null) {\n\t\t\tthis.client.onclose = value\n\t\t}\n\t\tget onclose(): (reason: Reason) => void | null {\n\t\t\treturn this.client.onclose\n\t\t}\n\n\t\tget isConnected(): boolean {\n\t\t\treturn this.client.isConnected\n\t\t}\n\t}\n}","\nnamespace fsync {\n\texport class ProtoPool {\n\t\tprotected protos: { [key: string]: string }\n\t\tinit() {\n\t\t\tthis.protos = EmptyTable()\n\t\t\treturn this\n\t\t}\n\t\tput(key: string, content: string) {\n\t\t\tthis.protos[key] = content\n\t\t}\n\t\tget(key: string): string {\n\t\t\treturn this.protos[key]\n\t\t}\n\t}\n\n\texport const protoPool = new ProtoPool().init()\n}\n","\nnamespace fsync {\n\n\texport class ProtoTool {\n\t\tprotected root: protobuf.Root | null = null\n\n\t\tprotoVersion: int32 = 0\n\n\t\tinit(pkg: string) {\n\t\t\tthis.package = pkg\n\t\t\treturn this\n\t\t}\n\n\t\tparseProto(content: string, call: () => void) {\n\t\t\tlet result = protobuf.parse(content)\n\t\t\tthis.root = result.root\n\t\t\tconst _ = call && call()\n\t\t}\n\n\t\tloadProto(srcFile: string, call: () => void) {\n\t\t\tconst content = protoPool.get(srcFile)\n\t\t\tif (content != null) {\n\t\t\t\tthis.parseProto(content, call)\n\t\t\t} else {\n\t\t\t\tprotobuf.load(srcFile, (err, root) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tthrow err\n\t\t\t\t\t}\n\t\t\t\t\tthis.root = root\n\t\t\t\t\tconst _ = call && call()\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tpackage: string\n\n\t\tdecode<T>(buffer: Uint8Array, cls: new () => T): T {\n\t\t\tlet MessageProto = this.root.lookupType(`${this.package}.${cls.name}`)\n\t\t\tvar message = MessageProto.decode(buffer);\n\t\t\tvar object = MessageProto.toObject(message, {\n\t\t\t\t// longs: String,\n\t\t\t\t// enums: String,\n\t\t\t\t// bytes: String,\n\t\t\t\t// see ConversionOptions\n\t\t\t});\n\t\t\treturn object as T\n\t\t}\n\n\t\tencode<T>(obj: T, cls: new () => T = null): Uint8Array {\n\t\t\tlet clsName = cls == null ? obj.constructor.name : cls.name\n\t\t\tlet MessageProto = this.root.lookupType(`${this.package}.${clsName}`)\n\t\t\tvar errMsg = MessageProto.verify(obj);\n\t\t\tif (errMsg)\n\t\t\t\tthrow Error(errMsg);\n\n\t\t\t// Create a new message\n\t\t\tvar message = MessageProto.create(obj); // or use .fromObject if conversion is necessary\n\n\t\t\t// Encode a message to an Uint8Array (browser) or Buffer (node)\n\t\t\tvar buffer = MessageProto.encode(message).finish();\n\t\t\treturn buffer\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport type TReqId = int64\n\texport type TRespId = int64\n\texport type bytes = Uint8Array\n\texport type TSessionId = int64\n\n\texport class Reason {\n\n\t}\n\n\texport type SessionInfo = {\n\t\tsessionId: TSessionId\n\t\treqId: TReqId\n\t\ttime: TTimeStamp\n\t\tdata: bytes\n\t\trawData: ArrayBuffer\n\t}\n\n\texport type ClientReqHandler = (sessionInfo: SessionInfo) => void\n\n\texport type HeadInfo = {\n\t\t// 头部大小\n\t\theadSize: uint32\n\t\t// 数据段总大小（不包含头部大小）\n\t\tdataSize: uint32\n\t}\n\n\texport type TTCPTransOptions = uint32\n\texport type TCPReqHead = {\n\t\t// 头部大小\n\t\tHeadSize: uint32\n\t\t// 数据段总大小（不包含头部大小）\n\t\tDataSize: uint32\n\t\t//一些选项：...|是否压缩\n\t\tTransOptions: TTCPTransOptions\n\t}\n\n\texport const TCPReqHeadSize = 12\n\texport const SessionInfoHeadSize = 16\n\texport const UintSize = 4\n\n}","namespace fsync {\r\n\r\n\t/**\r\n\t * 分析有差异的entity，从而支持平行世界收束覆写\r\n\t */\r\n\texport class EntityMergeSystem implements IUpdater {\r\n\t\t// merge from source to target\r\n\t\tsource: ECSWorld\r\n\t\ttarget: ECSWorld\r\n\r\n\t\t// 仅在需要的时候开启，避免每帧都执行合并\r\n\t\tneedMerge: bool = false\r\n\r\n\t\tinit() {\r\n\t\t\tthis.needMerge = false\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t// mg1 -> mg2\r\n\t\tprotected mergeDiffEntities(mg1: EntityManager, mg2: EntityManager) {\r\n\t\t\tmg1.dirtyManager.sortDirtyEntities(mg1)\r\n\t\t\tmg2.dirtyManager.sortDirtyEntities(mg2)\r\n\r\n\t\t\tlet applyMap: { [key: string]: bool } = EmptyTable()\r\n\r\n\t\t\ttype EntityMap = { [key: string]: Entity }\r\n\t\t\tlet newMap: EntityMap = EmptyTable()\r\n\t\t\tlet removeMap: EntityMap = EmptyTable()\r\n\t\t\tlet modifyMap: EntityMap = EmptyTable()\r\n\r\n\t\t\tmg1.dirtyManager.forEachDirtyEntities((entity) => {\r\n\t\t\t\tif (applyMap[entity.identity]) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tapplyMap[entity.identity] = true\r\n\r\n\t\t\t\tif (mg2.existsEntity(entity)) {\r\n\t\t\t\t\tif (mg1.existsEntity(entity)) {\r\n\t\t\t\t\t\t// this.onEntityUpdate(entity)\r\n\t\t\t\t\t\tmodifyMap[entity.identity] = entity\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// this.onRemoveEntity(entity)\r\n\t\t\t\t\t\tremoveMap[entity.identity] = entity\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (mg1.existsEntity(entity)) {\r\n\t\t\t\t\t\t// this.onNewEntity(entity)\r\n\t\t\t\t\t\tnewMap[entity.identity] = entity\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tmg2.dirtyManager.forEachDirtyEntities((entity) => {\r\n\t\t\t\tif (applyMap[entity.identity]) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tapplyMap[entity.identity] = true\r\n\r\n\t\t\t\tif (mg1.existsEntity(entity)) {\r\n\t\t\t\t\tif (mg2.existsEntity(entity)) {\r\n\t\t\t\t\t\t// this.onEntityUpdate(entity)\r\n\t\t\t\t\t\tmodifyMap[entity.identity] = entity\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// this.onNewEntity(entity)\r\n\t\t\t\t\t\tnewMap[entity.identity] = entity\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (mg2.existsEntity(entity)) {\r\n\t\t\t\t\t\t// this.onRemoveEntity(entity)\r\n\t\t\t\t\t\tremoveMap[entity.identity] = entity\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\t// for (let entity of Object.values(removeMap)) {\r\n\t\t\t// \tif (newMap[entity.identity]) {\r\n\t\t\t// \t\tconsole.log(\"lkjwel\")\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\r\n\t\t\tfor (let entity of Object.values(removeMap)) {\r\n\t\t\t\tthis.onRemoveEntity(entity)\r\n\t\t\t}\r\n\r\n\t\t\tfor (let entity of Object.values(newMap)) {\r\n\t\t\t\tthis.onNewEntity(entity)\r\n\t\t\t}\r\n\r\n\t\t\tfor (let entity of Object.values(modifyMap)) {\r\n\t\t\t\tthis.onUpdateEntity(entity)\r\n\t\t\t}\r\n\r\n\t\t\tmg1.dirtyManager.clearFlags()\r\n\t\t\tmg2.dirtyManager.clearFlags()\r\n\t\t}\r\n\r\n\t\t// entity新建\r\n\t\tonNewEntity(entity: Entity) {\r\n\r\n\t\t}\r\n\r\n\t\t// entity移除\r\n\t\tonRemoveEntity(entity: Entity) {\r\n\r\n\t\t}\r\n\r\n\t\t// entity内容有变更\r\n\t\tonUpdateEntity(entity: Entity) {\r\n\r\n\t\t}\r\n\r\n\t\tonBeforeUpdate(): void {\r\n\t\t\ttry {\r\n\t\t\t\tif (this.needMerge) {\r\n\t\t\t\t\tthis.mergeDiffEntities(this.source.entityManager, this.target.entityManager)\r\n\t\t\t\t\tthis.target.mergeFrom(this.source)\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(e)\r\n\t\t\t}\r\n\t\t}\r\n\t\tonAfterUpdate(): void {\r\n\t\t}\r\n\r\n\t\tupdate() {\r\n\r\n\t\t}\r\n\t}\r\n\r\n}","/// <reference path=\"./EntityMergeSystem.ts\" />\n\nnamespace fsync {\n\n\texport class ForceMergeSystem extends EntityMergeSystem {\n\t\t// entity新建\n\t\tonNewEntity(entity: Entity) {\n\t\t\tthis.target.entityManager.cloneEntity(entity, this.source.entityManager)\n\t\t}\n\n\t\t// entity移除\n\t\tonRemoveEntity(entity: Entity) {\n\t\t\tthis.target.entityManager.removeEntity(entity)\n\t\t}\n\n\t\t// entity内容有变更\n\t\tonUpdateEntity(entity: Entity) {\n\t\t\t// this.target.entityManager.removeEntity(entity)\n\t\t\t// this.target.entityManager.cloneEntity(entity, this.source.entityManager)\n\t\t\tthis.target.entityManager.overwriteEntity(entity, this.source.entityManager)\n\t\t}\n\n\t}\n}","\nnamespace fsync {\n\t/**\n\t * 帧同步策略\n\t */\n\texport class FrameSyncStrategy {\n\n\t\tprotected mainProcess: WorldMainProcess\n\t\tinit(mainProcess: WorldMainProcess) {\n\t\t\tthis.mainProcess = mainProcess\n\t\t\treturn this\n\t\t}\n\n\t\twaitSyncTimes: number = 0\n\t\twaitSyncTimeline: number = 0\n\t\tlastUpdateTime = 0\n\t\tnetDelayUtil: NetDelay = new NetDelay()\n\t\tlastSyncTime = 0\n\t\tlastCmd: IGameInputCmd\n\t\tupdate() {\n\n\t\t\tlet predictCmdBuffer = this.mainProcess.predictCmdBuffer\n\t\t\tlet mainCmdBuffer = this.mainProcess.mainCmdBuffer\n\n\t\t\tlet netCmd = predictCmdBuffer.getLatestNetCmd()\n\t\t\tif (netCmd != null && this.lastCmd != netCmd) {\n\t\t\t\tthis.lastCmd = netCmd\n\t\t\t\tlet netDelay = 0\n\t\t\t\tnetDelay = (netCmd.receivedTime - netCmd.createTime) / 1e3\n\t\t\t\tthis.netDelayUtil.putDelay(netDelay)\n\t\t\t}\n\n\t\t\t// 以下单位秒\n\t\t\tconst littleDelay = 0.08\n\t\t\tconst middleDelay = 1.0\n\t\t\tconst middleWaitTime = 3\n\n\t\t\tlet delayAv = this.netDelayUtil.getDelayAv()\n\t\t\tlet syncDuration = 5000\n\t\t\tif (delayAv < 0.100) {\n\t\t\t\tsyncDuration = 2500\n\t\t\t} else if (delayAv < 0.300) {\n\t\t\t\tsyncDuration = 2000\n\t\t\t} else if (delayAv < 0.500) {\n\t\t\t\tsyncDuration = 1700\n\t\t\t} else if (delayAv < 0.750) {\n\t\t\t\tsyncDuration = 3000\n\t\t\t} else if (delayAv < 1.100) {\n\t\t\t\tsyncDuration = 3000\n\t\t\t} else {\n\t\t\t\tsyncDuration = delayAv * 10\n\t\t\t}\n\n\t\t\t// 回滚重演流程\n\t\t\tlet syncDt = (Date.now() - this.lastSyncTime)\n\t\t\tlet needSyncRightNow = false\n\t\t\tif (predictCmdBuffer.needSyncRightNow && syncDt > 800) {\n\t\t\t\tpredictCmdBuffer.needSyncRightNow = false\n\t\t\t\tneedSyncRightNow = true\n\t\t\t}\n\t\t\tif (mainCmdBuffer.needSyncRightNow && syncDt > 800) {\n\t\t\t\tmainCmdBuffer.needSyncRightNow = false\n\t\t\t\tneedSyncRightNow = true\n\t\t\t}\n\t\t\tif (predictCmdBuffer.needSync\n\t\t\t\t&& (Date.now() - this.lastSyncTime) > Math.max(500, syncDuration - mainCmdBuffer.surgeTimes * 500)) {\n\t\t\t\tpredictCmdBuffer.needSync = false\n\t\t\t\tneedSyncRightNow = true\n\t\t\t}\n\t\t\tif (needSyncRightNow) {\n\t\t\t\tmainCmdBuffer.surgeTimes = 0\n\t\t\t\tpredictCmdBuffer.surgeTimes = 0\n\t\t\t}\n\n\t\t\t// if (false) {\n\t\t\tif (needSyncRightNow) {\n\n\t\t\t\tconsole.log(\"syncmmm\")\n\t\t\t\tlet t1 = Date.now()\n\t\t\t\t// 回滚重演流程需要禁用输入流程\n\t\t\t\t// 同时也尽量避免代入视图流程, 减少性能消耗\n\t\t\t\tconst predictUpdater = this.mainProcess.predictUpdater\n\t\t\t\tlet isInputEnabled = predictUpdater.isGroupEnabled(Refers.InputSystem)\n\t\t\t\tif (isInputEnabled) {\n\t\t\t\t\tpredictUpdater.disableGroup(Refers.InputSystem)\n\t\t\t\t}\n\t\t\t\tthis.lastSyncTime = Date.now()\n\t\t\t\tlet curPredictFrameCount = this.mainProcess.worldPredict.frameCount\n\t\t\t\t// this.mainProcess.syncPredictToCurFrame()\n\t\t\t\tthis.mainProcess.syncMain(true)\n\t\t\t\tlet latestLocalCmd = predictCmdBuffer.getLatestLocalCmd()\n\t\t\t\t// if (latestLocalCmd != null) {\n\t\t\t\t// this.mainProcess.updatePredictToTheFrame(latestLocalCmd.frameCount)\n\t\t\t\t// } else {\n\t\t\t\tthis.mainProcess.updatePredictToTheFrame(curPredictFrameCount)\n\t\t\t\t// }\n\t\t\t\tif (isInputEnabled) {\n\t\t\t\t\tpredictUpdater.enableGroup(Refers.InputSystem)\n\t\t\t\t}\n\t\t\t\tlet t2 = Date.now()\n\t\t\t\tconsole.log(\"merge all done\", t2 - t1)\n\t\t\t}\n\n\t\t\t// 正常的推进流程\n\t\t\t{\n\t\t\t\t// let latestCmd = this.mainProcess.mainCmdBuffer.getOrderedNetCmd()\n\t\t\t\t// let serverMainFrameCount = latestCmd ? latestCmd.frameCount : 0\n\t\t\t\t// console.log(\"framexx:\", this.mainProcess.worldPredict.frameCount, this.mainProcess.worldMain.frameCount, serverMainFrameCount, Date.now())\n\n\t\t\t\tlet curPredictFrameCount = this.mainProcess.worldPredict.frameCount\n\t\t\t\t// console.log(\"CPC:\", curPredictFrameCount)\n\t\t\t\tpredictCmdBuffer.syncLocalCmd()\n\t\t\t\tlet localCmd = predictCmdBuffer.getLatestLocalCmd()\n\t\t\t\tif (localCmd != null) {\n\t\t\t\t\tthis.mainProcess.updatePredictToTheFrame(Math.max(localCmd.frameCount, curPredictFrameCount + 1))\n\t\t\t\t} else {\n\t\t\t\t\tthis.mainProcess.updatePredict()\n\t\t\t\t}\n\t\t\t\t// console.log(\"updateto\", this.mainProcess.worldPredict.frameCount)\n\t\t\t\t// this.mainProcess.updateMain()\n\t\t\t\tthis.mainProcess.syncMain(false)\n\t\t\t}\n\t\t}\n\t}\n}","namespace fsync {\n\n\texport class Refers {\n\t\tstatic NormalSystem = \"NormalSystem\"\n\t\tstatic MergeSystem = \"MergeSystem\"\n\t\tstatic InputSystem = \"InputSystem\"\n\t\tstatic SyncViewSystem = \"SyncViewSystem\"\n\t}\n\n\texport class WorldMainProcess {\n\t\t/**\n\t\t * 主线\n\t\t */\n\t\tworldMain: ECSWorld\n\t\t/**\n\t\t * 预测线\n\t\t */\n\t\tworldPredict: ECSWorld\n\n\t\tprotected worlds: ECSWorld[]\n\n\t\tmergeSystem: EntityMergeSystem\n\t\tecsDataMergeSystem: eds.ECSDataMergeSystem\n\t\tmainUpdater: UpdaterGroupManager\n\t\tpredictUpdater: UpdaterGroupManager\n\n\t\tpredictCmdBuffer: InputCmdBuffer\n\t\tmainCmdBuffer: InputCmdBuffer\n\n\t\t// 主线帧计数\n\t\tserverMainFrameCount: number = 0\n\t\t// 主线时间\n\t\tserverMainTime: number = 0\n\n\t\tclear() {\n\t\t\tthis.mainUpdater.clear()\n\t\t\tthis.predictUpdater.clear()\n\t\t\t// this.worldMain.clear()\n\t\t\t// this.worldPredict.clear()\n\t\t}\n\n\t\tinit() {\n\n\t\t\tthis.frameSyncStrategy = new FrameSyncStrategy().init(this)\n\n\t\t\t{\n\t\t\t\tlet updateManager = new UpdaterGroupManager()\n\t\t\t\tupdateManager.init()\n\t\t\t\tupdateManager.setGroupUpdateOrder([\n\t\t\t\t\tRefers.NormalSystem,\n\t\t\t\t\tRefers.MergeSystem,\n\t\t\t\t])\n\t\t\t\tthis.mainUpdater = updateManager\n\t\t\t}\n\t\t\t{\n\t\t\t\tlet updateManager = new UpdaterGroupManager()\n\t\t\t\tupdateManager.init()\n\t\t\t\tupdateManager.setGroupUpdateOrder([\n\t\t\t\t\tRefers.NormalSystem,\n\t\t\t\t\tRefers.MergeSystem,\n\t\t\t\t])\n\t\t\t\tthis.predictUpdater = updateManager\n\t\t\t}\n\n\t\t\tthis.worldMain = new ECSWorld()\n\t\t\tthis.worldMain.name = \"main\"\n\t\t\tthis.worldMain.init(new FrameSyncUtils().init())\n\n\t\t\tthis.worldPredict = new ECSWorld()\n\t\t\tthis.worldPredict.name = \"predict\"\n\t\t\tthis.worldPredict.init(new FrameSyncUtils().init())\n\n\t\t\tthis.worlds = [this.worldMain, this.worldPredict]\n\n\t\t\tthis.mergeSystem = this.createMergeSystem(this.worldMain, this.worldPredict)\n\t\t\tthis.mainUpdater.getUpdaterGroup(Refers.MergeSystem).addUpdater(this.mergeSystem)\n\n\t\t\tthis.ecsDataMergeSystem = this.createMergeSystem2(this.worldMain, this.worldPredict)\n\t\t\tthis.mainUpdater.getUpdaterGroup(Refers.MergeSystem).addUpdater(this.ecsDataMergeSystem)\n\t\t\t// 默认禁用合并系统\n\t\t\tthis.mainUpdater.disableGroup(Refers.MergeSystem)\n\n\t\t\t{\n\t\t\t\tlet inputCmdBuffer = new InputCmdBuffer()\n\t\t\t\tinputCmdBuffer.name = this.worldMain.name\n\t\t\t\tthis.mainCmdBuffer = inputCmdBuffer\n\t\t\t}\n\n\t\t\t{\n\t\t\t\tlet inputCmdBuffer = new InputCmdBuffer()\n\t\t\t\tinputCmdBuffer.name = this.worldPredict.name\n\t\t\t\tinputCmdBuffer.route = \"local\"\n\t\t\t\tthis.predictCmdBuffer = inputCmdBuffer\n\t\t\t}\n\n\t\t\treturn this\n\t\t}\n\n\t\tget netDelayUtil() {\n\t\t\treturn this.frameSyncStrategy.netDelayUtil\n\t\t}\n\n\t\tcreateMergeSystem(source: ECSWorld, target: ECSWorld) {\n\t\t\tlet mergeSystem: EntityMergeSystem = new ForceMergeSystem().init()\n\t\t\tmergeSystem.source = source\n\t\t\tmergeSystem.target = target\n\t\t\treturn mergeSystem\n\t\t}\n\n\t\tcreateMergeSystem2(source: ECSWorld, target: ECSWorld) {\n\t\t\tlet mergeSystem: eds.ECSDataForceMergeSystem = new eds.ECSDataForceMergeSystem().init()\n\t\t\tmergeSystem.source = source\n\t\t\tmergeSystem.target = target\n\t\t\treturn mergeSystem\n\t\t}\n\n\t\t// addMergeSystem(source: ECSWorld, target: ECSWorld) {\n\t\t// \tlet mergeSystem: MergeSystem = new ForceMergeSystem()\n\t\t// \tmergeSystem.init()\n\t\t// \tmergeSystem.source = source\n\t\t// \tmergeSystem.target = target\n\t\t// \tthis.mainUpdater.getUpdaterGroup(Refers.MergeSystem)\n\t\t// }\n\n\t\t// // 添加必要的公共系统\n\t\t// addBasicSystemsToWorld() {\n\t\t// \t/**\n\t\t// \t * 合并方向：主线 -> 预测线\n\t\t// \t */\n\t\t// \tthis.addMergeSystem(this.worldMain, this.worldPredict)\n\t\t// }\n\n\t\tprotected frameSyncStrategy: FrameSyncStrategy\n\n\t\tupdate() {\n\t\t\tthis.frameSyncStrategy.update()\n\n\t\t\tthis.worldPredict.entityManager.cleanEntityProtoMap()\n\t\t\tthis.worldMain.entityManager.cleanEntityProtoMap()\n\t\t}\n\n\t\tupdatePredict() {\n\t\t\tthis.worldPredict.frameCount++\n\t\t\tthis.predictUpdater.onBeforeUpdate()\n\t\t\tthis.predictUpdater.update()\n\t\t\tthis.predictUpdater.onAfterUpdate()\n\t\t}\n\n\t\tsyncMain(needMerge: bool = false): void {\n\t\t\tlet latestNetCmd = this.mainCmdBuffer.getOrderedNetCmd()\n\t\t\tlet serverMainFrameCount = latestNetCmd ? latestNetCmd.frameCount : 0\n\t\t\t// 主线按照服务器节奏追赶进度\n\t\t\twhile (this.worldMain.frameCount < serverMainFrameCount - 2) {\n\t\t\t\tthis.updateMain()\n\t\t\t}\n\t\t\tif (needMerge) {\n\t\t\t\tconsole.log(\"serverMainFrameCount:\", serverMainFrameCount)\n\t\t\t\t// this.mergeSystem.needMerge = true\n\t\t\t\t// this.mainUpdater.enableGroup(Refers.MergeSystem)\n\t\t\t\t/**\n\t\t\t\t * 之所以维持 -1 而不是 -0 是为了确保每次执行的一帧内所有 cmdIndex 都已经接收到了\n\t\t\t\t */\n\t\t\t\tif (this.worldMain.frameCount < serverMainFrameCount - 1) {\n\t\t\t\t\tthis.updateMain()\n\t\t\t\t\tthis.ecsDataMergeSystem.onBeforeUpdate()\n\t\t\t\t\tthis.predictCmdBuffer.mergeFrom(this.mainCmdBuffer)\n\t\t\t\t\t// 需要定位出 latestNetCmd 附近的 localCmd, 从而定位出时间点相当的localCmd\n\t\t\t\t\t// test\n\t\t\t\t\tthis.worldPredict.frameCount = latestNetCmd.createFrameCount\n\t\t\t\t}\n\t\t\t\t// this.mergeSystem.onBeforeUpdate()\n\t\t\t\t// this.mainUpdater.disableGroup(Refers.MergeSystem)\n\t\t\t\t// this.mergeSystem.needMerge = false\n\t\t\t}\n\t\t}\n\n\t\tsyncPredictToMain() {\n\t\t\t// console.log(\"syncx\")\n\t\t\tthis.syncMain(true)\n\t\t}\n\n\t\t/**\n\t\t * 回滚到最新的主线，并重新依赖本地指令演进到最新预测线\n\t\t */\n\t\tsyncPredictToCurFrame() {\n\t\t\tlet curPredictFrameCount = this.worldPredict.frameCount\n\t\t\tthis.syncMain(true)\n\t\t\twhile (this.worldPredict.frameCount < curPredictFrameCount) {\n\t\t\t\tthis.updatePredict()\n\t\t\t}\n\t\t}\n\n\t\tupdatePredictToTheFrame(frameCount: number) {\n\t\t\twhile (this.worldPredict.frameCount < frameCount) {\n\t\t\t\tthis.updatePredict()\n\t\t\t}\n\t\t}\n\n\t\tlastTT: number = 0\n\t\tupdateMain() {\n\t\t\tlet latestCmd = this.mainCmdBuffer.getOrderedNetCmd()\n\t\t\tlet serverMainFrameCount = latestCmd ? latestCmd.frameCount : 0\n\t\t\tif (this.worldMain.frameCount < serverMainFrameCount - 1) {\n\t\t\t\t// let xx = Date.now()\n\t\t\t\t// console.log(\"update time:\", xx - this.lastTT)\n\t\t\t\t// this.lastTT = xx\n\t\t\t\tthis.worldMain.frameCount++\n\t\t\t\tthis.mainUpdater.onBeforeUpdate()\n\t\t\t\tthis.mainUpdater.update()\n\t\t\t\tthis.mainUpdater.onAfterUpdate()\n\t\t\t}\n\t\t}\n\t}\n\n}","namespace fsync.eds {\r\n\r\n\t/**\r\n\t * 分析有差异的entity，从而支持平行世界收束覆写\r\n\t */\r\n\texport class ECSDataMergeSystem implements IUpdater {\r\n\t\t// merge from source to target\r\n\t\tsource: ECSWorld\r\n\t\ttarget: ECSWorld\r\n\r\n\t\tinit() {\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\t// mg1 -> mg2\r\n\t\tprotected mergeDiffEntities(mg1: eds.DataManager, mg2: eds.DataManager) {\r\n\r\n\t\t\tmg1.buildReferRelationMap()\r\n\t\t\tmg2.buildReferRelationMap()\r\n\r\n\t\t\tlet applyMap: { [key: string]: bool } = EmptyTable()\r\n\r\n\t\t\ttype EntityMap = { [key: string]: eds.IDataClass$ }\r\n\t\t\tlet newMap: EntityMap = EmptyTable()\r\n\t\t\tlet removeMap: EntityMap = EmptyTable()\r\n\t\t\tlet modifyMap: EntityMap = EmptyTable()\r\n\r\n\t\t\tmg1.dirtyManager.forEachDirtyEntities((ecsdata) => {\r\n\t\t\t\tif (applyMap[ecsdata.oid]) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tapplyMap[ecsdata.oid] = true\r\n\r\n\t\t\t\tif (mg2.existsData(ecsdata)) {\r\n\t\t\t\t\tif (mg1.existsData(ecsdata)) {\r\n\t\t\t\t\t\t// this.onEntityUpdate(entity)\r\n\t\t\t\t\t\tmodifyMap[ecsdata.oid] = ecsdata\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// this.onRemoveEntity(entity)\r\n\t\t\t\t\t\tremoveMap[ecsdata.oid] = ecsdata\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (mg1.existsData(ecsdata)) {\r\n\t\t\t\t\t\t// this.onNewEntity(entity)\r\n\t\t\t\t\t\tnewMap[ecsdata.oid] = ecsdata\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tmg2.dirtyManager.forEachDirtyEntities((ecsdata) => {\r\n\t\t\t\tif (applyMap[ecsdata.oid]) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tapplyMap[ecsdata.oid] = true\r\n\r\n\t\t\t\tif (mg1.existsData(ecsdata)) {\r\n\t\t\t\t\tif (mg2.existsData(ecsdata)) {\r\n\t\t\t\t\t\t// this.onEntityUpdate(entity)\r\n\t\t\t\t\t\tmodifyMap[ecsdata.oid] = ecsdata\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// this.onNewEntity(entity)\r\n\t\t\t\t\t\tnewMap[ecsdata.oid] = ecsdata\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (mg2.existsData(ecsdata)) {\r\n\t\t\t\t\t\t// this.onRemoveEntity(entity)\r\n\t\t\t\t\t\tremoveMap[ecsdata.oid] = ecsdata\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tfor (let entity of Object.values(removeMap)) {\r\n\t\t\t\tthis.onRemoveEntity(entity)\r\n\t\t\t}\r\n\r\n\t\t\tfor (let entity of Object.values(newMap)) {\r\n\t\t\t\tthis.onNewEntity(entity)\r\n\t\t\t}\r\n\r\n\t\t\tfor (let entity of Object.values(modifyMap)) {\r\n\t\t\t\tthis.onUpdateEntity(entity)\r\n\t\t\t}\r\n\r\n\t\t\tmg1.dirtyManager.clearFlags()\r\n\t\t\tmg2.dirtyManager.clearFlags()\r\n\t\t}\r\n\r\n\t\t// entity新建\r\n\t\tonNewEntity(entity: eds.IDataClass$) {\r\n\r\n\t\t}\r\n\r\n\t\t// entity移除\r\n\t\tonRemoveEntity(entity: eds.IDataClass$) {\r\n\r\n\t\t}\r\n\r\n\t\t// entity内容有变更\r\n\t\tonUpdateEntity(entity: eds.IDataClass$) {\r\n\r\n\t\t}\r\n\r\n\t\tonBeforeUpdate(): void {\r\n\t\t\ttry {\r\n\t\t\t\tthis.mergeDiffEntities(this.source.dataManager, this.target.dataManager)\r\n\t\t\t\tthis.target.mergeFrom(this.source)\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(e)\r\n\t\t\t}\r\n\t\t}\r\n\t\tonAfterUpdate(): void {\r\n\t\t}\r\n\r\n\t\tupdate() {\r\n\r\n\t\t}\r\n\t}\r\n\r\n}","/// <reference path=\"./ECSDataMergeSystem.ts\" />\n\nnamespace fsync.eds {\n\n\texport class ECSDataForceMergeSystem extends ECSDataMergeSystem {\n\t\t// entity新建\n\t\tonNewEntity(entity: IDataClass$) {\n\t\t\tthis.target.dataManager['cloneData'](entity, this.source.dataManager)\n\t\t}\n\n\t\t// entity移除\n\t\tonRemoveEntity(entity: IDataClass$) {\n\t\t\tthis.target.dataManager['removeData'](entity)\n\t\t}\n\n\t\t// entity内容有变更\n\t\tonUpdateEntity(entity: IDataClass$) {\n\t\t\tthis.target.dataManager['overwriteData'](entity, this.source.dataManager)\n\t\t}\n\n\t}\n}","namespace fsync.network.roomclient {\r\n\t/**\r\n\t * 房间客户端工厂\r\n\t */\r\n\texport class RoomClientFactory {\r\n\t\t/**\r\n\t\t * 创建房间客户端\r\n\t\t * - mgobe 腾讯\r\n\t\t * @param techSource 所使用的技术来源\r\n\t\t */\r\n\t\tstatic createClient(techSource: \"mgobe\" | \"glee\"): IRoomClient {\r\n\t\t\tswitch (techSource) {\r\n\t\t\t\tcase \"mgobe\": {\r\n\t\t\t\t\tlet client = new mgobe.RoomClient().init()\r\n\t\t\t\t\treturn client\r\n\t\t\t\t}\r\n\t\t\t\tcase \"glee\": {\r\n\t\t\t\t\tlet client = new glee.v1.RoomClient().init()\r\n\t\t\t\t\treturn client\r\n\t\t\t\t}\r\n\t\t\t\tdefault: {\r\n\t\t\t\t\tthrow new Error(\"invalid techSource\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","\r\nnamespace fsync.roomserver {\r\n\t/** TRolePlayState enum. */\r\n\texport enum TRolePlayState {\r\n\t\tPENDING = 0,\r\n\t\tREADY = 1,\r\n\t\tPLAYING = 2\r\n\t}\r\n}\r\n\r\n/**\r\n * 基于腾讯云游戏的房间服务器\r\n */\r\nnamespace fsync.network.roomclient {\r\n\r\n\texport type CreateSignature = (callback: (signature: MGOBE.types.Signature) => any) => any;\r\n\t/**\r\n\t * @name  初始化参数：游戏信息\r\n\t * @description 游戏秘钥指控制台上的“游戏key”。在初始化SDK时，secretKey、CreateSignature两个参数传其中一个即可。如果实现了CreateSignature方法，则忽略secretKey参数。\r\n\t * @description CreateSignature用于计算签名signature，优点在于避免客户端泄露游戏密钥。\r\n\t * @field {string} gameId  游戏ID\r\n\t * @field {string} openId  玩家openId\r\n\t * @field {string} secretKey  游戏秘钥\r\n\t * @field {CreateSignature} createSignature  签名函数\r\n\t */\r\n\texport interface GameInfoPara {\r\n\t\tgameId: string;\r\n\t\topenId: string;\r\n\t\tsecretKey?: string;\r\n\t\tcreateSignature?: CreateSignature;\r\n\t}\r\n\t/**\r\n\t * @name  初始化参数：配置参数\r\n\t * @description 服务地址指控制台上的“域名”\r\n\t * @field {number} reconnectMaxTimes  重连接次数（默认15）（可选）\r\n\t * @field {number} reconnectInterval  重连接时间间隔（毫秒，默认500）（可选）\r\n\t * @field {number} resendInterval  消息重发时间间隔（毫秒，默认1000）（可选）\r\n\t * @field {number} resendTimeout  消息重发超时时间（毫秒，默认20000）（可选）\r\n\t * @field {string} url  服务地址\r\n\t * @field {boolean} isAutoRequestFrame  是否自动补帧（默认false）（可选）\r\n\t * @field {string} cacertNativeUrl  本地CA根证书路径（CocosNative环境需要该参数）（可选）\r\n\t */\r\n\texport interface ConfigPara {\r\n\t\treconnectMaxTimes?: number;\r\n\t\treconnectInterval?: number;\r\n\t\tresendInterval?: number;\r\n\t\tresendTimeout?: number;\r\n\t\turl?: string;\r\n\t\tisAutoRequestFrame?: boolean;\r\n\t\tcacertNativeUrl?: string;\r\n\t}\r\n\r\n\texport class TRoomClientConnectInfo {\r\n\t\tgameInfo: GameInfoPara\r\n\t\tconfig: ConfigPara\r\n\t}\r\n\texport class TRoomServerInfo {\r\n\t\tserverTime: number\r\n\t}\r\n\texport class TRoomClientConnectResult {\r\n\t\tindicate: roomserver.TResultIndicate\r\n\t\tserverInfo: TRoomServerInfo\r\n\t}\r\n\r\n\texport interface IRoomClient {\r\n\r\n\t\t/**\r\n\t\t * 获取本地缓存的房间数据\r\n\t\t */\r\n\t\tgetLocalRoomInfo?(): roomserver.TRoomModel\r\n\r\n\t\t/**\r\n\t\t * 设置protobuf工具\r\n\t\t */\r\n\t\tsetProto(proto: ProtoTool)\r\n\r\n\t\t/**\r\n\t\t * 关闭连接\r\n\t\t */\r\n\t\tclose()\r\n\r\n\t\t/**\r\n\t\t * 初始化连接\r\n\t\t * @param call \r\n\t\t */\r\n\t\tconnectAsync(info: TRoomClientConnectInfo, call: (result: TRoomClientConnectResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 更新 protobuf 协议文件\r\n\t\t * - 如果客户端版本较新，则服务器只返回服务器上协议版本号\r\n\t\t * - 如果客户端版本较旧，则服务器返回新协议文件内容\r\n\t\t * @param info \r\n\t\t * @param call \r\n\t\t */\r\n\t\tcheckoutProto(info: { clientProtoVersion: number }, call: (result: roomserver.TDownloadProtoResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 通过房间匹配服匹配房间\r\n\t\t * @param roleInfo \r\n\t\t * @param roomInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tmatchRoom(roleInfo: roomserver.TRoleInfo, roomInfo: roomserver.TRoomInfo, call: (result: roomserver.TMatchJobResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 通过ID搜索房间\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tsearchRoomById(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TQueryRoomsResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 发送房间服心跳\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tsendRoomHeartBeat(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.THeartBeatResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 发送房间匹配服心跳\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tsendMatcherHeartBeat(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.THeartBeatResult) => void)\r\n\r\n\t\tsendHeartBeat(opInfo: roomserver.ITRoomUserOpInfo)\r\n\t\t/**\r\n\t\t * 维持心跳\r\n\t\t * @param opInfo \r\n\t\t */\r\n\t\tstartHeartBeatProcess(opInfo: roomserver.ITRoomUserOpInfo)\r\n\r\n\t\t/**\r\n\t\t * 停止心跳\r\n\t\t */\r\n\t\tstopHeartBeatProcess()\r\n\r\n\t\t/**\r\n\t\t * 进入房间\r\n\t\t * @param roleInfo \r\n\t\t * @param roomInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tenterRoom(roleInfo: roomserver.TRoleInfo, roomInfo: roomserver.ITRoomModel, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 退出房间\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\texitRoom(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 强制销毁房间\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tdestoryRoomForce(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 进入准备状态\r\n\t\t * - 所有玩家进入准备状态之后，即可开始游戏\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tprepareStartGame(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TRespStartGameResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 广播房间消息\r\n\t\t * @param reqData \r\n\t\t * @param call \r\n\t\t */\r\n\t\tbroadCastRoomMessage(reqData: roomserver.TReqBroadCastClientMessage, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 广播帧同步消息\r\n\t\t * @param reqData\r\n\t\t * @param call\r\n\t\t */\r\n\t\tbroadCastFrameSyncMessage(reqData: roomserver.TReqBroadCastFrameSyncReq, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 请求补帧\r\n\t\t */\r\n\t\trequestFrameSyncMessages(opInfo: roomserver.TRoomUserOpInfo, paras: roomserver.TReqFrameRecordsInfo, call: (result: roomserver.TReqFrameRecordsResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听帧同步广播\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenFrameSyncBroadCast(call: (message: roomserver.TReqBroadCastFrameSyncReq) => void)\r\n\r\n\t\t/**\r\n\t\t * 取消监听帧同步广播\r\n\t\t * @param call \r\n\t\t */\r\n\t\toffFrameSyncBroadCast(call: (message: roomserver.TReqBroadCastFrameSyncReq) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听房间内广播消息\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenRoomBroadCast(call: (message: roomserver.TReqBroadCastClientMessage) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听成员离开房间\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenExitRoom(call: (message: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听成员进入房间\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenEnterRoom(call: (message: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听成员设置房间\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenSetRoomInfo(call: (message: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听成员进入准备状态\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenPrepareStartGame(call: (message: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听游戏开始\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenStartGame(call: (message: roomserver.TRespStartGameResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听同步游戏记录\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenFetchGameOpRecords(call: (message: roomserver.TFetchGameOpRecordsResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 房间销毁\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenDestoryRoom(call: (message: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 验证房间\r\n\t\t * @param call\r\n\t\t */\r\n\t\tvalidateRoom(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 设置房间信息\r\n\t\t * @param call\r\n\t\t */\r\n\t\tsetRoomInfo(opInfo: roomserver.ITRoomUserOpInfo, roomInfo: roomserver.ITRoomSettings, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 放逐成员（未实现）\r\n\t\t * @param call\r\n\t\t */\r\n\t\tbanishMember(opInfo: roomserver.ITRoomUserOpInfo, roles: string[], call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 获取房间信息（未实现）\r\n\t\t * @param call\r\n\t\t */\r\n\t\tgetRoomInfo(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TGetRoomInfoResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 获取游戏操作记录（未实现）\r\n\t\t * @param call\r\n\t\t */\r\n\t\tfetchGameOpRecords(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TFetchGameOpRecordsResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听成员网络状态变化\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenChangedMemberNetworkState(call: (result: roomserver.TChangeMemberNetworkStateResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 监听玩家信息变化\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenChangeCustomPlayerStatus(call: (result: roomserver.TChangeCustomPlayerStatus) => void)\r\n\r\n\t\t/**\r\n\t\t * 开始帧同步\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tstartFrameSync(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 停止帧同步\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tstopFrameSync(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 开始帧同步广播回调接口\r\n\t\t * @param call \r\n\t\t */\r\n\t\tonStartFrameSync(call: (result: roomserver.TNormalResult) => void)\r\n\t\t/**\r\n\t\t * 停止帧同步广播回调接口\r\n\t\t */\r\n\t\tonStopFrameSync(call: (result: roomserver.TNormalResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 自动补帧失败回调接口\r\n\t\t */\r\n\t\tonAutoRequestFrameError(call: (result: roomserver.TReqFrameRecordsResult) => void)\r\n\r\n\t\t/**\r\n\t\t * 重试自动补帧\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tretryAutoRequestFrame(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void)\r\n\t}\r\n}\r\n","namespace fsync {\n\n\texport type TUserId = int64\n\texport type TRoleId = string\n\texport type TChairNo = int64\n\texport type TRoomId = int64\n\texport type TRoomSessionId = int64\n\n\texport function TRoomModel_GetRoomInfo(roomInfo: roomserver.ITRoomModel): roomserver.TRoomInfo {\n\t\treturn {\n\t\t\tbasicInfo: roomInfo.basicInfo,\n\t\t\troomSettings: roomInfo.roomSettings,\n\t\t\tgameInfo: roomInfo.gameInfo,\n\t\t}\n\t}\n\n}","namespace fsync {\n\n\texport const InvalidSessionId = 0\n\n\texport const ReqId = {\n\t\tInvalidReqId: 0,\n\t\t//100000~100000 特殊请求\n\t\tBasicAllReq: 100000,\n\n\t\t//101000~102000 基础请求\n\t\tBasicHeartBeat: 101000,\n\t\tBasicCheckoutProto: 101001,\n\n\t\t//200000~202000 房间服务器基础请求\n\t\tRoomEnterRoom: 201000,\n\t\tRoomExitRoom: 201001,\n\t\tRoomDestroyRoomForce: 201002,\n\t\t//帧同步请求\n\t\tRoomFrameSync: 201003,\n\t\tRoomIsRoomValid: 201004,\n\t\tRoomSetRoomInfo: 201005,\n\t\tRoomBanishMember: 201006,\n\t\tRoomSetSelfRoomChairNo: 201007,\n\t\tRoomFilterMembers: 201008,\n\t\tRoomStartGame: 201009,\n\t\tRoomPrepareRoomStartGame: 201013,\n\t\tRoomFetchGameOpRecords: 201014,\n\t\tRoomGetRoomInfo: 201015,\n\n\t\tRoomNotifyCreateRoom: 201010,\n\t\tRoomNotifyRemoveRoom: 201011,\n\n\t\t//广播客户端消息\n\t\tRoomBroadCastClientMessage: 201012,\n\n\t\t//202000~203000房间匹配服\n\t\tRoomRegisterRoomServer: 202001,\n\t\tRoomUnregisterRoomServer: 202002,\n\t\tRoomMatchUsersWithDefaultRule: 203001,\n\t\tRoomSearchRoomById: 203002,\n\t\tRoomGetRecommendRooms: 203003,\n\n\t\t//房间其他业务ID\n\t\t//扔鸡蛋\n\t\tRoomThrowEgg: 211001,\n\n\t}\n\n\t//回复ID偏移段位\n\tconst RespIdStageOffset = 100000000\n\tconst RespIdStageOffset2 = 200000000\n\n\texport const RespId = {\n\n\t\t//帧同步通知\n\t\tRoomNotifyFrameSync: ReqId.RoomFrameSync + RespIdStageOffset2,\n\t\tRoomNotifyClientMessage: ReqId.RoomBroadCastClientMessage + RespIdStageOffset2,\n\n\t}\n\n\texport function toRespId(reqId: TReqId): TReqId {\n\t\treturn reqId + RespIdStageOffset\n\t}\n\n}","const serverprotoSource = `\nsyntax = \"proto3\";\npackage roomserver;\n\n// type int64 int64\n// type string string\n// type int64 int64\n// type string string\n// type string string\n\n//房间id生成规则: id:int64=parseInt64(timestamp+incr(0~99999))\n//type string string\n//type int64 int64\n\n// type int64 int64\n// type int32 int32\n// type float float\n// type string string\n// type string string\n// type string string\n// type int64 int64\n\nmessage TErrorInfo {\n  int32 code = 1;\n  string reason = 2;\n  string message = 3;\n}\nmessage TResultIndicate {\n  bool ok = 1;\n  TErrorInfo err = 2;\n}\nmessage TNormalResult {\n  TResultIndicate indicate = 1;\n  TRoomUserOpInfo op_info = 2;\n}\n\nmessage TRoomBasic {\n  //房间号\n  string room_id = 1;\n  //房间创建时间\n  int64 create_time = 2;\n  // uuid 用于日志查询等功能\n  string uuid = 3;\n  //房间连接地址配置\n  string conn_addr = 4;\n  // 创建房间的方式\n  int64 create_type = 5;\n}\n\nmessage TRoomSettings {\n  string room_type = 1;\n  string name = 2;\n  string password = 3;\n  // 房主\n  string owner_id = 4;\n  // 是否禁止加入房间\n  bool is_forbid_join = 5;\n  // 是否私有, 属性为 true 表示该房间为私有房间，不能被 matchRoom 接口匹配到。\n  bool is_private = 6;\n}\n\nmessage TRoomGameInfo {\n  //  游戏模式/类型\n  int32 game_mode = 1;\n  //  固定帧间隔\n  int64 frame_duration = 2;\n  //需要多少角色来匹配\n  int32 role_count = 3;\n  //匹配时长\n  float match_timeout = 4;\n}\n\nmessage TRoomGameState {\n  int64 game_session_id = 1;\n  int64 start_time = 2;\n  int32 random_seed = 3;\n  bool is_playing = 4;\n}\n\nmessage TServerInfo {\n  string address = 1;\n  string server_id = 2;\n}\n\nmessage TRoomInfo {\n  TRoomBasic basic_info = 1;\n  TRoomSettings room_settings = 2;\n  TRoomGameInfo game_info = 3;\n  TServerInfo server_info = 4;\n}\n\nmessage TRoomModel {\n  TRoomBasic basic_info = 1;\n  TRoomSettings room_settings = 2;\n  TRoomGameInfo game_info = 3;\n  TServerInfo server_info = 4;\n  TRoomGameState game_state = 5;\n  repeated TRoleModel role_models = 6;\n}\n\nmessage TReqGetRoomInfo { TRoomUserOpInfo op_info = 1; }\n\nmessage TGetRoomInfoResult {\n  TResultIndicate indicate = 1;\n  TRoomUserOpInfo op_info = 2;\n  TRoomModel room_model = 3;\n}\n\nmessage TQueryRoomsResult {\n  TResultIndicate indicate = 1;\n  TRoomsInfo rooms_info = 2;\n}\n\nmessage TRoomsInfo {\n  int32 count = 1;\n  repeated TRoomModel room_models = 2;\n}\n\nmessage TRoomUserOpInfo {\n  string room_id = 1;\n  string role_id = 2;\n  // 用于匹配自带角色id生成功能的服务器\n  string role_token = 3;\n}\n\nmessage TMatchJobResult {\n  TResultIndicate indicate = 1;\n  TRoomUserOpInfo op_info = 2;\n  TRoomsInfo rooms_info = 3;\n}\n\nmessage TUserInfo { int64 user_id = 1; }\n\nmessage TRoleBasic {\n  // 角色id\n  string role_id = 1;\n  // 角色性别\n  int32 sex = 2;\n  // 角色名\n  string role_name = 3;\n  // 角色头像uri\n  string role_head_uri = 4;\n  // 服务器生成的roleId\n  string server_role_id = 5;\n  // 是否为人机\n  bool is_robot = 6;\n}\n\nmessage TRoleGameInfo {\n  //分数\n  int32 score = 1;\n  //等级\n  int32 level = 2;\n  //对战局数\n  int32 battle_count = 3;\n  //胜率\n  float win_rate = 4;\n}\n\nmessage TRoleRoomState {\n  string room_id = 1;\n  int64 chair_no = 2;\n  //角色客户端和服务器是否连接\n  bool is_conn_active = 3;\n  bool is_master = 4;\n}\n\nenum TRolePlayState {\n  PENDING = 0;\n  READY = 1;\n  PLAYING = 2;\n}\n\nmessage TRoleGameState { TRolePlayState state = 1; }\n\nmessage TRoleInfo {\n  TRoleBasic basic_info = 1;\n  TUserInfo user_info = 2;\n  TRoleGameInfo game_info = 3;\n  TRoleRoomState room_state = 4;\n}\n\nmessage TRoleModel {\n  TRoleBasic basic_info = 1;\n  TUserInfo user_info = 2;\n  TRoleGameInfo game_info = 3;\n  TRoleRoomState room_state = 4;\n  TRoleGameState game_state = 5;\n  TRoleNetworkInfo netwok_info = 6;\n}\n\nmessage TRoomMemberFilterInfo {}\n\nmessage THandleResult { TResultIndicate indicate = 1; }\n\nmessage TRoomPlayerMessageOptions {}\nmessage TRoomPlayerMessage { TRoomPlayerMessageOptions options = 1; }\n\nmessage TReqEnterRoom {\n  TRoomUserOpInfo op_info = 1;\n  TRoleInfo role_info = 2;\n  TRoomModel room_info = 3;\n}\n\nmessage TReqExitRoom { TRoomUserOpInfo op_info = 1; }\n\nmessage TReqDestroyRoomForce { TRoomUserOpInfo op_info = 1; }\n\nmessage TReqRoleBroadOptions { string role_id = 1; }\nmessage TFrameSyncInfo {\n  //  服务器当前游戏时间\n  int64 server_time = 1;\n  //  服务器当前游戏已进行帧数\n  int64 server_frame_count = 2;\n  //客户端当前游戏时间\n  int64 client_time = 3;\n  // 客户端拟合时间, 分布尽量均匀\n  int64 client_lerp_time = 4;\n  // 随机数种子\n  int32 random_seed = 5;\n  // 是否补帧\n  bool is_replay = 6;\n}\n\nmessage TReqBroadCastFrameSyncReq {\n  //  标记发送方\n  TRoomUserOpInfo op_info = 1;\n  TFrameSyncInfo sync_info = 2;\n  bytes msg_bytes = 4;\n}\n\nmessage TReqBroadCastClientMessage {\n  //  标记发送方\n  TRoomUserOpInfo op_info = 1;\n  TFrameSyncInfo sync_info = 2;\n  //  标记接收方\n  repeated TReqRoleBroadOptions targets = 3;\n  bytes msg_bytes = 4;\n  string msg_str = 5;\n}\n\nmessage TReqValidateRoom { TRoomUserOpInfo op_info = 1; }\n\nmessage TReqSetRoomInfo {\n  TRoomUserOpInfo op_info = 1;\n  TRoomSettings room_info = 2;\n}\n\nmessage TReqBanishMember {\n  TRoomUserOpInfo op_info = 1;\n  repeated string roles = 2;\n}\n\nmessage TReqSetSelfRoomChairNo {\n  TRoomUserOpInfo op_info = 1;\n  int64 chair_no = 2;\n}\n\nmessage TReqFilterMembers {\n  TRoomUserOpInfo op_info = 1;\n  TRoomMemberFilterInfo filter_info = 2;\n}\n\nmessage TStartGameOptions {}\n\nmessage TReqStartGame {\n  TRoomUserOpInfo op_info = 1;\n  TStartGameOptions start_options = 2;\n}\n\nmessage TFrameSyncInitConfig { int32 random_seed = 1; }\nmessage TRespStartGameResult {\n  TResultIndicate indicate = 1;\n  TRoomUserOpInfo op_info = 2;\n  TFrameSyncInitConfig frame_sync_init_config = 3;\n}\n\nmessage TReqSearchRoomById { TRoomUserOpInfo op_info = 1; }\n\nmessage TReqGetRecommendRooms { TRoomUserOpInfo op_info = 1; }\n\nmessage TReqMatchUsersWithDefaultRule {\n  TRoomUserOpInfo op_info = 1;\n  TRoleInfo role_info = 2;\n  TRoomInfo room_info = 3;\n}\n\nmessage TReqNotifyCreateRoom { TRoomModel room_model = 1; }\n\nmessage TReqNotifyRemoveRoom { TRoomUserOpInfo op_info = 1; }\n\nmessage TReqFetchGameOpRecords { TRoomUserOpInfo op_info = 1; }\n\nmessage TFetchGameOpRecordsResult {\n  TResultIndicate indicate = 1;\n  TRoomUserOpInfo op_info = 2;\n  repeated TReqBroadCastFrameSyncReq sync_op_records = 3;\n}\n\nmessage TReqHeartBeat { TRoomUserOpInfo op_info = 1; }\n\nmessage THeartBeatResult { TRoomUserOpInfo op_info = 1; }\n\nmessage TRoomServerRegisterForMatcherServerInfo {\n  //服务器ID\n  string server_id = 1;\n  //房间服务器连接ID\n  string conn_id = 2;\n  //房间服连接地址（给客户端用）\n  string client_conn_addr = 3;\n  //当前房间数量\n  int64 room_count = 4;\n}\n\nmessage TRoomServerRegisterForMatcherServerResult {\n  TResultIndicate indicate = 1;\n}\n\nmessage TRoomServerUnregisterForMatcherServerInfo {\n  //服务器ID\n  string server_id = 1;\n  //房间服务器连接ID\n  string conn_id = 2;\n  //房间服连接地址（给客户端用）\n  string client_conn_addr = 3;\n}\n\nmessage TRoomServerUnregisterForMatcherServerResult {\n  TResultIndicate indicate = 1;\n}\n\n// string 长度需要小于64MB\nmessage TReqDownloadProto {\n  //  客户端proto版本\n  int32 proto_version = 1;\n  // 是否强制更新\n  bool force = 2;\n}\n\nmessage TProtoInfo {\n  //  服务端传回的proto版本\n  int32 version = 1;\n  //  如果客户端缓存的协议版本和服务端的相同，则不需要重新下载 proto_content\n  string content = 2;\n}\n\nmessage TDownloadProtoResult {\n  TResultIndicate indicate = 1;\n  TProtoInfo proto_info = 2;\n}\n\nmessage TRoleNetworkInfo{\n  int32 room_network_state = 1;\n  int32 relay_network_state = 2;\n}\n\nmessage TChangeMemberNetworkStateResult{\n  TResultIndicate indicate = 1;\n  TRoomUserOpInfo op_info = 2;\n  TRoleNetworkInfo network_info = 3;\n}\n\nmessage TChangeCustomPlayerStatus{\n\n}\n\nmessage TReqFrameRecordsInfo{\n  int32 begin_frame = 1;\n  int32 end_frame = 2;\n}\n\nmessage TReqFrameRecordsResult{\n  TResultIndicate indicate = 1;\n  TRoomUserOpInfo op_info = 2;\n  repeated TReqBroadCastFrameSyncReq messages = 3;\n}\n\n// 移动方向信息\nmessage TActorMoveInfo{\n  int32 x = 1;\n  int32 y = 2;\n  string actor_id = 3;\n}\n\n// RPG控制命令信息\nmessage TRPGPlayerCmd {\n  // 角色id\n  int32 role_id = 1;\n  // 命令唯一Id\n  int32 cmd_id = 2;\n  // 命令创建时间\n  int64 create_time = 3;\n  // 命令创建所在帧\n  int32 create_frame_count = 4;\n  // 命令实际需要在那一帧执行\n  int32 frame_count = 5;\n  // 命令序号\n  int32 cmd_index = 6;\n  // // 命令类型,false 表示空命令,true 表示角色命令\n  // bool cmd_type = 7;\n  // // 该命令是否可触发同步\n  // bool need_sync = 8;\n  // // 是否触发使用技能\n  // bool use_skill = 9;\n  // 布尔值数据集合\n  int64 cmd_flags = 7;\n  // 角色移动信息\n  TActorMoveInfo move = 8;\n}\n\n`\nconst fileBaseName = 'serverproto'\nconst srcFile = `./src/protos/${ fileBaseName }.proto`\nfsync.protoPool.put(srcFile, serverprotoSource)\n","namespace fsync {\n        //import * as $protobuf from \"protobufjs\";\n        /** Namespace  */\n        export namespace roomserver {\n\n                /** Properties of a TErrorInfo. */\n                export interface ITErrorInfo {\n\n                        /** TErrorInfo code */\n                        code?: (number | null);\n\n                        /** TErrorInfo reason */\n                        reason?: (string | null);\n\n                        /** TErrorInfo message */\n                        message?: (string | null);\n                }\n\n                /** Represents a TErrorInfo. */\n                export class TErrorInfo implements ITErrorInfo {\n\n                        /**\n                         * Constructs a new TErrorInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITErrorInfo);\n\n                        /** TErrorInfo code. */\n                        public code: number;\n\n                        /** TErrorInfo reason. */\n                        public reason: string;\n\n                        /** TErrorInfo message. */\n                        public message: string;\n\n                        /**\n                         * Creates a new TErrorInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TErrorInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITErrorInfo): roomserver.TErrorInfo;\n\n                        /**\n                         * Encodes the specified TErrorInfo message. Does not implicitly {@link TErrorInfo.verify|verify} messages.\n                         * @param message TErrorInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITErrorInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TErrorInfo message, length delimited. Does not implicitly {@link TErrorInfo.verify|verify} messages.\n                         * @param message TErrorInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITErrorInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TErrorInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TErrorInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TErrorInfo;\n\n                        /**\n                         * Decodes a TErrorInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TErrorInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TErrorInfo;\n\n                        /**\n                         * Verifies a TErrorInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TErrorInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TErrorInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TErrorInfo;\n\n                        /**\n                         * Creates a plain object from a TErrorInfo message. Also converts values to other types if specified.\n                         * @param message TErrorInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TErrorInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TErrorInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TResultIndicate. */\n                export interface ITResultIndicate {\n\n                        /** TResultIndicate ok */\n                        ok?: (boolean | null);\n\n                        /** TResultIndicate err */\n                        err?: (ITErrorInfo | null);\n                }\n\n                /** Represents a TResultIndicate. */\n                export class TResultIndicate implements ITResultIndicate {\n\n                        /**\n                         * Constructs a new TResultIndicate.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITResultIndicate);\n\n                        /** TResultIndicate ok. */\n                        public ok: boolean;\n\n                        /** TResultIndicate err. */\n                        public err?: (ITErrorInfo | null);\n\n                        /**\n                         * Creates a new TResultIndicate instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TResultIndicate instance\n                         */\n                        //        public static create(properties?: roomserver.ITResultIndicate): roomserver.TResultIndicate;\n\n                        /**\n                         * Encodes the specified TResultIndicate message. Does not implicitly {@link TResultIndicate.verify|verify} messages.\n                         * @param message TResultIndicate message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITResultIndicate, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TResultIndicate message, length delimited. Does not implicitly {@link TResultIndicate.verify|verify} messages.\n                         * @param message TResultIndicate message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITResultIndicate, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TResultIndicate message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TResultIndicate\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TResultIndicate;\n\n                        /**\n                         * Decodes a TResultIndicate message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TResultIndicate\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TResultIndicate;\n\n                        /**\n                         * Verifies a TResultIndicate message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TResultIndicate message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TResultIndicate\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TResultIndicate;\n\n                        /**\n                         * Creates a plain object from a TResultIndicate message. Also converts values to other types if specified.\n                         * @param message TResultIndicate\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TResultIndicate, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TResultIndicate to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TNormalResult. */\n                export interface ITNormalResult {\n\n                        /** TNormalResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TNormalResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TNormalResult. */\n                export class TNormalResult implements ITNormalResult {\n\n                        /**\n                         * Constructs a new TNormalResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITNormalResult);\n\n                        /** TNormalResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TNormalResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TNormalResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TNormalResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITNormalResult): roomserver.TNormalResult;\n\n                        /**\n                         * Encodes the specified TNormalResult message. Does not implicitly {@link TNormalResult.verify|verify} messages.\n                         * @param message TNormalResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITNormalResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TNormalResult message, length delimited. Does not implicitly {@link TNormalResult.verify|verify} messages.\n                         * @param message TNormalResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITNormalResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TNormalResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TNormalResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TNormalResult;\n\n                        /**\n                         * Decodes a TNormalResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TNormalResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TNormalResult;\n\n                        /**\n                         * Verifies a TNormalResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TNormalResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TNormalResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TNormalResult;\n\n                        /**\n                         * Creates a plain object from a TNormalResult message. Also converts values to other types if specified.\n                         * @param message TNormalResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TNormalResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TNormalResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomBasic. */\n                export interface ITRoomBasic {\n\n                        /** TRoomBasic roomId */\n                        roomId?: (string | null);\n\n                        /** TRoomBasic createTime */\n                        createTime?: (number | Long | null);\n\n                        /** TRoomBasic uuid */\n                        uuid?: (string | null);\n\n                        /** TRoomBasic connAddr */\n                        connAddr?: (string | null);\n\n                        /** TRoomBasic createType */\n                        createType?: (number | Long | null);\n                }\n\n                /** Represents a TRoomBasic. */\n                export class TRoomBasic implements ITRoomBasic {\n\n                        /**\n                         * Constructs a new TRoomBasic.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomBasic);\n\n                        /** TRoomBasic roomId. */\n                        public roomId: string;\n\n                        /** TRoomBasic createTime. */\n                        public createTime: (number | Long);\n\n                        /** TRoomBasic uuid. */\n                        public uuid: string;\n\n                        /** TRoomBasic connAddr. */\n                        public connAddr: string;\n\n                        /** TRoomBasic createType. */\n                        public createType: (number | Long);\n\n                        /**\n                         * Creates a new TRoomBasic instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomBasic instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomBasic): roomserver.TRoomBasic;\n\n                        /**\n                         * Encodes the specified TRoomBasic message. Does not implicitly {@link TRoomBasic.verify|verify} messages.\n                         * @param message TRoomBasic message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomBasic, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomBasic message, length delimited. Does not implicitly {@link TRoomBasic.verify|verify} messages.\n                         * @param message TRoomBasic message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomBasic, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomBasic message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomBasic\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomBasic;\n\n                        /**\n                         * Decodes a TRoomBasic message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomBasic\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomBasic;\n\n                        /**\n                         * Verifies a TRoomBasic message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomBasic message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomBasic\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomBasic;\n\n                        /**\n                         * Creates a plain object from a TRoomBasic message. Also converts values to other types if specified.\n                         * @param message TRoomBasic\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomBasic, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomBasic to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomSettings. */\n                export interface ITRoomSettings {\n\n                        /** TRoomSettings roomType */\n                        roomType?: (string | null);\n\n                        /** TRoomSettings name */\n                        name?: (string | null);\n\n                        /** TRoomSettings password */\n                        password?: (string | null);\n\n                        /** TRoomSettings ownerId */\n                        ownerId?: (string | null);\n\n                        /** TRoomSettings isForbidJoin */\n                        isForbidJoin?: (boolean | null);\n\n                        /** TRoomSettings isPrivate */\n                        isPrivate?: (boolean | null);\n                }\n\n                /** Represents a TRoomSettings. */\n                export class TRoomSettings implements ITRoomSettings {\n\n                        /**\n                         * Constructs a new TRoomSettings.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomSettings);\n\n                        /** TRoomSettings roomType. */\n                        public roomType: string;\n\n                        /** TRoomSettings name. */\n                        public name: string;\n\n                        /** TRoomSettings password. */\n                        public password: string;\n\n                        /** TRoomSettings ownerId. */\n                        public ownerId: string;\n\n                        /** TRoomSettings isForbidJoin. */\n                        public isForbidJoin: boolean;\n\n                        /** TRoomSettings isPrivate. */\n                        public isPrivate: boolean;\n\n                        /**\n                         * Creates a new TRoomSettings instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomSettings instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomSettings): roomserver.TRoomSettings;\n\n                        /**\n                         * Encodes the specified TRoomSettings message. Does not implicitly {@link TRoomSettings.verify|verify} messages.\n                         * @param message TRoomSettings message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomSettings, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomSettings message, length delimited. Does not implicitly {@link TRoomSettings.verify|verify} messages.\n                         * @param message TRoomSettings message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomSettings, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomSettings message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomSettings\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomSettings;\n\n                        /**\n                         * Decodes a TRoomSettings message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomSettings\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomSettings;\n\n                        /**\n                         * Verifies a TRoomSettings message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomSettings message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomSettings\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomSettings;\n\n                        /**\n                         * Creates a plain object from a TRoomSettings message. Also converts values to other types if specified.\n                         * @param message TRoomSettings\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomSettings, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomSettings to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomGameInfo. */\n                export interface ITRoomGameInfo {\n\n                        /** TRoomGameInfo gameMode */\n                        gameMode?: (number | null);\n\n                        /** TRoomGameInfo frameDuration */\n                        frameDuration?: (number | Long | null);\n\n                        /** TRoomGameInfo roleCount */\n                        roleCount?: (number | null);\n\n                        /** TRoomGameInfo matchTimeout */\n                        matchTimeout?: (number | null);\n                }\n\n                /** Represents a TRoomGameInfo. */\n                export class TRoomGameInfo implements ITRoomGameInfo {\n\n                        /**\n                         * Constructs a new TRoomGameInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomGameInfo);\n\n                        /** TRoomGameInfo gameMode. */\n                        public gameMode: number;\n\n                        /** TRoomGameInfo frameDuration. */\n                        public frameDuration: (number | Long);\n\n                        /** TRoomGameInfo roleCount. */\n                        public roleCount: number;\n\n                        /** TRoomGameInfo matchTimeout. */\n                        public matchTimeout: number;\n\n                        /**\n                         * Creates a new TRoomGameInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomGameInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomGameInfo): roomserver.TRoomGameInfo;\n\n                        /**\n                         * Encodes the specified TRoomGameInfo message. Does not implicitly {@link TRoomGameInfo.verify|verify} messages.\n                         * @param message TRoomGameInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomGameInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomGameInfo message, length delimited. Does not implicitly {@link TRoomGameInfo.verify|verify} messages.\n                         * @param message TRoomGameInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomGameInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomGameInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomGameInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomGameInfo;\n\n                        /**\n                         * Decodes a TRoomGameInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomGameInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomGameInfo;\n\n                        /**\n                         * Verifies a TRoomGameInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomGameInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomGameInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomGameInfo;\n\n                        /**\n                         * Creates a plain object from a TRoomGameInfo message. Also converts values to other types if specified.\n                         * @param message TRoomGameInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomGameInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomGameInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomGameState. */\n                export interface ITRoomGameState {\n\n                        /** TRoomGameState gameSessionId */\n                        gameSessionId?: (number | Long | null);\n\n                        /** TRoomGameState startTime */\n                        startTime?: (number | Long | null);\n\n                        /** TRoomGameState randomSeed */\n                        randomSeed?: (number | null);\n\n                        /** TRoomGameState isPlaying */\n                        isPlaying?: (boolean | null);\n                }\n\n                /** Represents a TRoomGameState. */\n                export class TRoomGameState implements ITRoomGameState {\n\n                        /**\n                         * Constructs a new TRoomGameState.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomGameState);\n\n                        /** TRoomGameState gameSessionId. */\n                        public gameSessionId: (number | Long);\n\n                        /** TRoomGameState startTime. */\n                        public startTime: (number | Long);\n\n                        /** TRoomGameState randomSeed. */\n                        public randomSeed: number;\n\n                        /** TRoomGameState isPlaying. */\n                        public isPlaying: boolean;\n\n                        /**\n                         * Creates a new TRoomGameState instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomGameState instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomGameState): roomserver.TRoomGameState;\n\n                        /**\n                         * Encodes the specified TRoomGameState message. Does not implicitly {@link TRoomGameState.verify|verify} messages.\n                         * @param message TRoomGameState message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomGameState, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomGameState message, length delimited. Does not implicitly {@link TRoomGameState.verify|verify} messages.\n                         * @param message TRoomGameState message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomGameState, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomGameState message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomGameState\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomGameState;\n\n                        /**\n                         * Decodes a TRoomGameState message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomGameState\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomGameState;\n\n                        /**\n                         * Verifies a TRoomGameState message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomGameState message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomGameState\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomGameState;\n\n                        /**\n                         * Creates a plain object from a TRoomGameState message. Also converts values to other types if specified.\n                         * @param message TRoomGameState\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomGameState, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomGameState to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TServerInfo. */\n                export interface ITServerInfo {\n\n                        /** TServerInfo address */\n                        address?: (string | null);\n\n                        /** TServerInfo serverId */\n                        serverId?: (string | null);\n                }\n\n                /** Represents a TServerInfo. */\n                export class TServerInfo implements ITServerInfo {\n\n                        /**\n                         * Constructs a new TServerInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITServerInfo);\n\n                        /** TServerInfo address. */\n                        public address: string;\n\n                        /** TServerInfo serverId. */\n                        public serverId: string;\n\n                        /**\n                         * Creates a new TServerInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TServerInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITServerInfo): roomserver.TServerInfo;\n\n                        /**\n                         * Encodes the specified TServerInfo message. Does not implicitly {@link TServerInfo.verify|verify} messages.\n                         * @param message TServerInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITServerInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TServerInfo message, length delimited. Does not implicitly {@link TServerInfo.verify|verify} messages.\n                         * @param message TServerInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITServerInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TServerInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TServerInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TServerInfo;\n\n                        /**\n                         * Decodes a TServerInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TServerInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TServerInfo;\n\n                        /**\n                         * Verifies a TServerInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TServerInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TServerInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TServerInfo;\n\n                        /**\n                         * Creates a plain object from a TServerInfo message. Also converts values to other types if specified.\n                         * @param message TServerInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TServerInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TServerInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomInfo. */\n                export interface ITRoomInfo {\n\n                        /** TRoomInfo basicInfo */\n                        basicInfo?: (ITRoomBasic | null);\n\n                        /** TRoomInfo roomSettings */\n                        roomSettings?: (ITRoomSettings | null);\n\n                        /** TRoomInfo gameInfo */\n                        gameInfo?: (ITRoomGameInfo | null);\n\n                        /** TRoomInfo serverInfo */\n                        serverInfo?: (ITServerInfo | null);\n                }\n\n                /** Represents a TRoomInfo. */\n                export class TRoomInfo implements ITRoomInfo {\n\n                        /**\n                         * Constructs a new TRoomInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomInfo);\n\n                        /** TRoomInfo basicInfo. */\n                        public basicInfo?: (ITRoomBasic | null);\n\n                        /** TRoomInfo roomSettings. */\n                        public roomSettings?: (ITRoomSettings | null);\n\n                        /** TRoomInfo gameInfo. */\n                        public gameInfo?: (ITRoomGameInfo | null);\n\n                        /** TRoomInfo serverInfo. */\n                        public serverInfo?: (ITServerInfo | null);\n\n                        /**\n                         * Creates a new TRoomInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomInfo): roomserver.TRoomInfo;\n\n                        /**\n                         * Encodes the specified TRoomInfo message. Does not implicitly {@link TRoomInfo.verify|verify} messages.\n                         * @param message TRoomInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomInfo message, length delimited. Does not implicitly {@link TRoomInfo.verify|verify} messages.\n                         * @param message TRoomInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomInfo;\n\n                        /**\n                         * Decodes a TRoomInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomInfo;\n\n                        /**\n                         * Verifies a TRoomInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomInfo;\n\n                        /**\n                         * Creates a plain object from a TRoomInfo message. Also converts values to other types if specified.\n                         * @param message TRoomInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomModel. */\n                export interface ITRoomModel {\n\n                        /** TRoomModel basicInfo */\n                        basicInfo?: (ITRoomBasic | null);\n\n                        /** TRoomModel roomSettings */\n                        roomSettings?: (ITRoomSettings | null);\n\n                        /** TRoomModel gameInfo */\n                        gameInfo?: (ITRoomGameInfo | null);\n\n                        /** TRoomModel serverInfo */\n                        serverInfo?: (ITServerInfo | null);\n\n                        /** TRoomModel gameState */\n                        gameState?: (ITRoomGameState | null);\n\n                        /** TRoomModel roleModels */\n                        roleModels?: (ITRoleModel[] | null);\n                }\n\n                /** Represents a TRoomModel. */\n                export class TRoomModel implements ITRoomModel {\n\n                        /**\n                         * Constructs a new TRoomModel.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomModel);\n\n                        /** TRoomModel basicInfo. */\n                        public basicInfo?: (ITRoomBasic | null);\n\n                        /** TRoomModel roomSettings. */\n                        public roomSettings?: (ITRoomSettings | null);\n\n                        /** TRoomModel gameInfo. */\n                        public gameInfo?: (ITRoomGameInfo | null);\n\n                        /** TRoomModel serverInfo. */\n                        public serverInfo?: (ITServerInfo | null);\n\n                        /** TRoomModel gameState. */\n                        public gameState?: (ITRoomGameState | null);\n\n                        /** TRoomModel roleModels. */\n                        public roleModels: ITRoleModel[];\n\n                        /**\n                         * Creates a new TRoomModel instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomModel instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomModel): roomserver.TRoomModel;\n\n                        /**\n                         * Encodes the specified TRoomModel message. Does not implicitly {@link TRoomModel.verify|verify} messages.\n                         * @param message TRoomModel message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomModel, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomModel message, length delimited. Does not implicitly {@link TRoomModel.verify|verify} messages.\n                         * @param message TRoomModel message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomModel, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomModel message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomModel\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomModel;\n\n                        /**\n                         * Decodes a TRoomModel message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomModel\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomModel;\n\n                        /**\n                         * Verifies a TRoomModel message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomModel message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomModel\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomModel;\n\n                        /**\n                         * Creates a plain object from a TRoomModel message. Also converts values to other types if specified.\n                         * @param message TRoomModel\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomModel, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomModel to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqGetRoomInfo. */\n                export interface ITReqGetRoomInfo {\n\n                        /** TReqGetRoomInfo opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqGetRoomInfo. */\n                export class TReqGetRoomInfo implements ITReqGetRoomInfo {\n\n                        /**\n                         * Constructs a new TReqGetRoomInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqGetRoomInfo);\n\n                        /** TReqGetRoomInfo opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqGetRoomInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqGetRoomInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqGetRoomInfo): roomserver.TReqGetRoomInfo;\n\n                        /**\n                         * Encodes the specified TReqGetRoomInfo message. Does not implicitly {@link TReqGetRoomInfo.verify|verify} messages.\n                         * @param message TReqGetRoomInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqGetRoomInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqGetRoomInfo message, length delimited. Does not implicitly {@link TReqGetRoomInfo.verify|verify} messages.\n                         * @param message TReqGetRoomInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqGetRoomInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqGetRoomInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqGetRoomInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqGetRoomInfo;\n\n                        /**\n                         * Decodes a TReqGetRoomInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqGetRoomInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqGetRoomInfo;\n\n                        /**\n                         * Verifies a TReqGetRoomInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqGetRoomInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqGetRoomInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqGetRoomInfo;\n\n                        /**\n                         * Creates a plain object from a TReqGetRoomInfo message. Also converts values to other types if specified.\n                         * @param message TReqGetRoomInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqGetRoomInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqGetRoomInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TGetRoomInfoResult. */\n                export interface ITGetRoomInfoResult {\n\n                        /** TGetRoomInfoResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TGetRoomInfoResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TGetRoomInfoResult roomModel */\n                        roomModel?: (ITRoomModel | null);\n                }\n\n                /** Represents a TGetRoomInfoResult. */\n                export class TGetRoomInfoResult implements ITGetRoomInfoResult {\n\n                        /**\n                         * Constructs a new TGetRoomInfoResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITGetRoomInfoResult);\n\n                        /** TGetRoomInfoResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TGetRoomInfoResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TGetRoomInfoResult roomModel. */\n                        public roomModel?: (ITRoomModel | null);\n\n                        /**\n                         * Creates a new TGetRoomInfoResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TGetRoomInfoResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITGetRoomInfoResult): roomserver.TGetRoomInfoResult;\n\n                        /**\n                         * Encodes the specified TGetRoomInfoResult message. Does not implicitly {@link TGetRoomInfoResult.verify|verify} messages.\n                         * @param message TGetRoomInfoResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITGetRoomInfoResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TGetRoomInfoResult message, length delimited. Does not implicitly {@link TGetRoomInfoResult.verify|verify} messages.\n                         * @param message TGetRoomInfoResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITGetRoomInfoResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TGetRoomInfoResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TGetRoomInfoResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TGetRoomInfoResult;\n\n                        /**\n                         * Decodes a TGetRoomInfoResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TGetRoomInfoResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TGetRoomInfoResult;\n\n                        /**\n                         * Verifies a TGetRoomInfoResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TGetRoomInfoResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TGetRoomInfoResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TGetRoomInfoResult;\n\n                        /**\n                         * Creates a plain object from a TGetRoomInfoResult message. Also converts values to other types if specified.\n                         * @param message TGetRoomInfoResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TGetRoomInfoResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TGetRoomInfoResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TQueryRoomsResult. */\n                export interface ITQueryRoomsResult {\n\n                        /** TQueryRoomsResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TQueryRoomsResult roomsInfo */\n                        roomsInfo?: (ITRoomsInfo | null);\n                }\n\n                /** Represents a TQueryRoomsResult. */\n                export class TQueryRoomsResult implements ITQueryRoomsResult {\n\n                        /**\n                         * Constructs a new TQueryRoomsResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITQueryRoomsResult);\n\n                        /** TQueryRoomsResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TQueryRoomsResult roomsInfo. */\n                        public roomsInfo?: (ITRoomsInfo | null);\n\n                        /**\n                         * Creates a new TQueryRoomsResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TQueryRoomsResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITQueryRoomsResult): roomserver.TQueryRoomsResult;\n\n                        /**\n                         * Encodes the specified TQueryRoomsResult message. Does not implicitly {@link TQueryRoomsResult.verify|verify} messages.\n                         * @param message TQueryRoomsResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITQueryRoomsResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TQueryRoomsResult message, length delimited. Does not implicitly {@link TQueryRoomsResult.verify|verify} messages.\n                         * @param message TQueryRoomsResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITQueryRoomsResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TQueryRoomsResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TQueryRoomsResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TQueryRoomsResult;\n\n                        /**\n                         * Decodes a TQueryRoomsResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TQueryRoomsResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TQueryRoomsResult;\n\n                        /**\n                         * Verifies a TQueryRoomsResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TQueryRoomsResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TQueryRoomsResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TQueryRoomsResult;\n\n                        /**\n                         * Creates a plain object from a TQueryRoomsResult message. Also converts values to other types if specified.\n                         * @param message TQueryRoomsResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TQueryRoomsResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TQueryRoomsResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomsInfo. */\n                export interface ITRoomsInfo {\n\n                        /** TRoomsInfo count */\n                        count?: (number | null);\n\n                        /** TRoomsInfo roomModels */\n                        roomModels?: (ITRoomModel[] | null);\n                }\n\n                /** Represents a TRoomsInfo. */\n                export class TRoomsInfo implements ITRoomsInfo {\n\n                        /**\n                         * Constructs a new TRoomsInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomsInfo);\n\n                        /** TRoomsInfo count. */\n                        public count: number;\n\n                        /** TRoomsInfo roomModels. */\n                        public roomModels: ITRoomModel[];\n\n                        /**\n                         * Creates a new TRoomsInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomsInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomsInfo): roomserver.TRoomsInfo;\n\n                        /**\n                         * Encodes the specified TRoomsInfo message. Does not implicitly {@link TRoomsInfo.verify|verify} messages.\n                         * @param message TRoomsInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomsInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomsInfo message, length delimited. Does not implicitly {@link TRoomsInfo.verify|verify} messages.\n                         * @param message TRoomsInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomsInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomsInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomsInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomsInfo;\n\n                        /**\n                         * Decodes a TRoomsInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomsInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomsInfo;\n\n                        /**\n                         * Verifies a TRoomsInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomsInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomsInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomsInfo;\n\n                        /**\n                         * Creates a plain object from a TRoomsInfo message. Also converts values to other types if specified.\n                         * @param message TRoomsInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomsInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomsInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomUserOpInfo. */\n                export interface ITRoomUserOpInfo {\n\n                        /** TRoomUserOpInfo roomId */\n                        roomId?: (string | null);\n\n                        /** TRoomUserOpInfo roleId */\n                        serverRoleId?: (string | null);\n\n                        /** TRoomUserOpInfo roleToken */\n                        roleId?: (string | null);\n                }\n\n                /** Represents a TRoomUserOpInfo. */\n                export class TRoomUserOpInfo implements ITRoomUserOpInfo {\n\n                        /**\n                         * Constructs a new TRoomUserOpInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomUserOpInfo);\n\n                        /** TRoomUserOpInfo roomId. */\n                        public roomId: string;\n\n                        /** TRoomUserOpInfo roleId. */\n                        public serverRoleId: string;\n\n                        /** TRoomUserOpInfo roleToken. */\n                        public roleId: string;\n\n                        /**\n                         * Creates a new TRoomUserOpInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomUserOpInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomUserOpInfo): roomserver.TRoomUserOpInfo;\n\n                        /**\n                         * Encodes the specified TRoomUserOpInfo message. Does not implicitly {@link TRoomUserOpInfo.verify|verify} messages.\n                         * @param message TRoomUserOpInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomUserOpInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomUserOpInfo message, length delimited. Does not implicitly {@link TRoomUserOpInfo.verify|verify} messages.\n                         * @param message TRoomUserOpInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomUserOpInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomUserOpInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomUserOpInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomUserOpInfo;\n\n                        /**\n                         * Decodes a TRoomUserOpInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomUserOpInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomUserOpInfo;\n\n                        /**\n                         * Verifies a TRoomUserOpInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomUserOpInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomUserOpInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomUserOpInfo;\n\n                        /**\n                         * Creates a plain object from a TRoomUserOpInfo message. Also converts values to other types if specified.\n                         * @param message TRoomUserOpInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomUserOpInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomUserOpInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TMatchJobResult. */\n                export interface ITMatchJobResult {\n\n                        /** TMatchJobResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TMatchJobResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TMatchJobResult roomsInfo */\n                        roomsInfo?: (ITRoomsInfo | null);\n                }\n\n                /** Represents a TMatchJobResult. */\n                export class TMatchJobResult implements ITMatchJobResult {\n\n                        /**\n                         * Constructs a new TMatchJobResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITMatchJobResult);\n\n                        /** TMatchJobResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TMatchJobResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TMatchJobResult roomsInfo. */\n                        public roomsInfo?: (ITRoomsInfo | null);\n\n                        /**\n                         * Creates a new TMatchJobResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TMatchJobResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITMatchJobResult): roomserver.TMatchJobResult;\n\n                        /**\n                         * Encodes the specified TMatchJobResult message. Does not implicitly {@link TMatchJobResult.verify|verify} messages.\n                         * @param message TMatchJobResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITMatchJobResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TMatchJobResult message, length delimited. Does not implicitly {@link TMatchJobResult.verify|verify} messages.\n                         * @param message TMatchJobResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITMatchJobResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TMatchJobResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TMatchJobResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TMatchJobResult;\n\n                        /**\n                         * Decodes a TMatchJobResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TMatchJobResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TMatchJobResult;\n\n                        /**\n                         * Verifies a TMatchJobResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TMatchJobResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TMatchJobResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TMatchJobResult;\n\n                        /**\n                         * Creates a plain object from a TMatchJobResult message. Also converts values to other types if specified.\n                         * @param message TMatchJobResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TMatchJobResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TMatchJobResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TUserInfo. */\n                export interface ITUserInfo {\n\n                        /** TUserInfo userId */\n                        userId?: (number | Long | null);\n                }\n\n                /** Represents a TUserInfo. */\n                export class TUserInfo implements ITUserInfo {\n\n                        /**\n                         * Constructs a new TUserInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITUserInfo);\n\n                        /** TUserInfo userId. */\n                        public userId: (number | Long);\n\n                        /**\n                         * Creates a new TUserInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TUserInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITUserInfo): roomserver.TUserInfo;\n\n                        /**\n                         * Encodes the specified TUserInfo message. Does not implicitly {@link TUserInfo.verify|verify} messages.\n                         * @param message TUserInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITUserInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TUserInfo message, length delimited. Does not implicitly {@link TUserInfo.verify|verify} messages.\n                         * @param message TUserInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITUserInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TUserInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TUserInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TUserInfo;\n\n                        /**\n                         * Decodes a TUserInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TUserInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TUserInfo;\n\n                        /**\n                         * Verifies a TUserInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TUserInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TUserInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TUserInfo;\n\n                        /**\n                         * Creates a plain object from a TUserInfo message. Also converts values to other types if specified.\n                         * @param message TUserInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TUserInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TUserInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoleBasic. */\n                export interface ITRoleBasic {\n\n                        /** TRoleBasic roleId */\n                        serverRoleId?: (string | null);\n\n                        /** TRoleBasic sex */\n                        sex?: (number | null);\n\n                        /** TRoleBasic roleName */\n                        roleName?: (string | null);\n\n                        /** TRoleBasic roleHeadUri */\n                        roleHeadUri?: (string | null);\n\n                        /** TRoleBasic serverRoleId */\n                        roleId?: (string | null);\n\n                        /** TRoleBasic isRobot */\n                        isRobot?: (boolean | null);\n                }\n\n                /** Represents a TRoleBasic. */\n                export class TRoleBasic implements ITRoleBasic {\n\n                        /**\n                         * Constructs a new TRoleBasic.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoleBasic);\n\n                        /** TRoleBasic roleId. */\n                        public serverRoleId: string;\n\n                        /** TRoleBasic sex. */\n                        public sex: number;\n\n                        /** TRoleBasic roleName. */\n                        public roleName: string;\n\n                        /** TRoleBasic roleHeadUri. */\n                        public roleHeadUri: string;\n\n                        /** TRoleBasic serverRoleId. */\n                        public roleId: string;\n\n                        /** TRoleBasic isRobot. */\n                        public isRobot: boolean;\n\n                        /**\n                         * Creates a new TRoleBasic instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoleBasic instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoleBasic): roomserver.TRoleBasic;\n\n                        /**\n                         * Encodes the specified TRoleBasic message. Does not implicitly {@link TRoleBasic.verify|verify} messages.\n                         * @param message TRoleBasic message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoleBasic, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoleBasic message, length delimited. Does not implicitly {@link TRoleBasic.verify|verify} messages.\n                         * @param message TRoleBasic message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoleBasic, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoleBasic message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoleBasic\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoleBasic;\n\n                        /**\n                         * Decodes a TRoleBasic message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoleBasic\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoleBasic;\n\n                        /**\n                         * Verifies a TRoleBasic message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoleBasic message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoleBasic\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoleBasic;\n\n                        /**\n                         * Creates a plain object from a TRoleBasic message. Also converts values to other types if specified.\n                         * @param message TRoleBasic\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoleBasic, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoleBasic to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoleGameInfo. */\n                export interface ITRoleGameInfo {\n\n                        /** TRoleGameInfo score */\n                        score?: (number | null);\n\n                        /** TRoleGameInfo level */\n                        level?: (number | null);\n\n                        /** TRoleGameInfo battleCount */\n                        battleCount?: (number | null);\n\n                        /** TRoleGameInfo winRate */\n                        winRate?: (number | null);\n                }\n\n                /** Represents a TRoleGameInfo. */\n                export class TRoleGameInfo implements ITRoleGameInfo {\n\n                        /**\n                         * Constructs a new TRoleGameInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoleGameInfo);\n\n                        /** TRoleGameInfo score. */\n                        public score: number;\n\n                        /** TRoleGameInfo level. */\n                        public level: number;\n\n                        /** TRoleGameInfo battleCount. */\n                        public battleCount: number;\n\n                        /** TRoleGameInfo winRate. */\n                        public winRate: number;\n\n                        /**\n                         * Creates a new TRoleGameInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoleGameInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoleGameInfo): roomserver.TRoleGameInfo;\n\n                        /**\n                         * Encodes the specified TRoleGameInfo message. Does not implicitly {@link TRoleGameInfo.verify|verify} messages.\n                         * @param message TRoleGameInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoleGameInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoleGameInfo message, length delimited. Does not implicitly {@link TRoleGameInfo.verify|verify} messages.\n                         * @param message TRoleGameInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoleGameInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoleGameInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoleGameInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoleGameInfo;\n\n                        /**\n                         * Decodes a TRoleGameInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoleGameInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoleGameInfo;\n\n                        /**\n                         * Verifies a TRoleGameInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoleGameInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoleGameInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoleGameInfo;\n\n                        /**\n                         * Creates a plain object from a TRoleGameInfo message. Also converts values to other types if specified.\n                         * @param message TRoleGameInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoleGameInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoleGameInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoleRoomState. */\n                export interface ITRoleRoomState {\n\n                        /** TRoleRoomState roomId */\n                        roomId?: (string | null);\n\n                        /** TRoleRoomState chairNo */\n                        chairNo?: (number | Long | null);\n\n                        /** TRoleRoomState isConnActive */\n                        isConnActive?: (boolean | null);\n\n                        /** TRoleRoomState isMaster */\n                        isMaster?: (boolean | null);\n                }\n\n                /** Represents a TRoleRoomState. */\n                export class TRoleRoomState implements ITRoleRoomState {\n\n                        /**\n                         * Constructs a new TRoleRoomState.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoleRoomState);\n\n                        /** TRoleRoomState roomId. */\n                        public roomId: string;\n\n                        /** TRoleRoomState chairNo. */\n                        public chairNo: (number | Long);\n\n                        /** TRoleRoomState isConnActive. */\n                        public isConnActive: boolean;\n\n                        /** TRoleRoomState isMaster. */\n                        public isMaster: boolean;\n\n                        /**\n                         * Creates a new TRoleRoomState instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoleRoomState instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoleRoomState): roomserver.TRoleRoomState;\n\n                        /**\n                         * Encodes the specified TRoleRoomState message. Does not implicitly {@link TRoleRoomState.verify|verify} messages.\n                         * @param message TRoleRoomState message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoleRoomState, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoleRoomState message, length delimited. Does not implicitly {@link TRoleRoomState.verify|verify} messages.\n                         * @param message TRoleRoomState message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoleRoomState, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoleRoomState message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoleRoomState\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoleRoomState;\n\n                        /**\n                         * Decodes a TRoleRoomState message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoleRoomState\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoleRoomState;\n\n                        /**\n                         * Verifies a TRoleRoomState message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoleRoomState message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoleRoomState\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoleRoomState;\n\n                        /**\n                         * Creates a plain object from a TRoleRoomState message. Also converts values to other types if specified.\n                         * @param message TRoleRoomState\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoleRoomState, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoleRoomState to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** TRolePlayState enum. */\n                enum TRolePlayState {\n                        PENDING = 0,\n                        READY = 1,\n                        PLAYING = 2\n                }\n\n                /** Properties of a TRoleGameState. */\n                export interface ITRoleGameState {\n\n                        /** TRoleGameState state */\n                        state?: (TRolePlayState | null);\n                }\n\n                /** Represents a TRoleGameState. */\n                export class TRoleGameState implements ITRoleGameState {\n\n                        /**\n                         * Constructs a new TRoleGameState.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoleGameState);\n\n                        /** TRoleGameState state. */\n                        public state: TRolePlayState;\n\n                        /**\n                         * Creates a new TRoleGameState instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoleGameState instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoleGameState): roomserver.TRoleGameState;\n\n                        /**\n                         * Encodes the specified TRoleGameState message. Does not implicitly {@link TRoleGameState.verify|verify} messages.\n                         * @param message TRoleGameState message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoleGameState, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoleGameState message, length delimited. Does not implicitly {@link TRoleGameState.verify|verify} messages.\n                         * @param message TRoleGameState message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoleGameState, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoleGameState message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoleGameState\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoleGameState;\n\n                        /**\n                         * Decodes a TRoleGameState message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoleGameState\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoleGameState;\n\n                        /**\n                         * Verifies a TRoleGameState message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoleGameState message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoleGameState\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoleGameState;\n\n                        /**\n                         * Creates a plain object from a TRoleGameState message. Also converts values to other types if specified.\n                         * @param message TRoleGameState\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoleGameState, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoleGameState to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoleInfo. */\n                export interface ITRoleInfo {\n\n                        /** TRoleInfo basicInfo */\n                        basicInfo?: (ITRoleBasic | null);\n\n                        /** TRoleInfo userInfo */\n                        userInfo?: (ITUserInfo | null);\n\n                        /** TRoleInfo gameInfo */\n                        gameInfo?: (ITRoleGameInfo | null);\n\n                        /** TRoleInfo roomState */\n                        roomState?: (ITRoleRoomState | null);\n                }\n\n                /** Represents a TRoleInfo. */\n                export class TRoleInfo implements ITRoleInfo {\n\n                        /**\n                         * Constructs a new TRoleInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoleInfo);\n\n                        /** TRoleInfo basicInfo. */\n                        public basicInfo?: (ITRoleBasic | null);\n\n                        /** TRoleInfo userInfo. */\n                        public userInfo?: (ITUserInfo | null);\n\n                        /** TRoleInfo gameInfo. */\n                        public gameInfo?: (ITRoleGameInfo | null);\n\n                        /** TRoleInfo roomState. */\n                        public roomState?: (ITRoleRoomState | null);\n\n                        /**\n                         * Creates a new TRoleInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoleInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoleInfo): roomserver.TRoleInfo;\n\n                        /**\n                         * Encodes the specified TRoleInfo message. Does not implicitly {@link TRoleInfo.verify|verify} messages.\n                         * @param message TRoleInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoleInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoleInfo message, length delimited. Does not implicitly {@link TRoleInfo.verify|verify} messages.\n                         * @param message TRoleInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoleInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoleInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoleInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoleInfo;\n\n                        /**\n                         * Decodes a TRoleInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoleInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoleInfo;\n\n                        /**\n                         * Verifies a TRoleInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoleInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoleInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoleInfo;\n\n                        /**\n                         * Creates a plain object from a TRoleInfo message. Also converts values to other types if specified.\n                         * @param message TRoleInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoleInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoleInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoleModel. */\n                export interface ITRoleModel {\n\n                        /** TRoleModel basicInfo */\n                        basicInfo?: (ITRoleBasic | null);\n\n                        /** TRoleModel userInfo */\n                        userInfo?: (ITUserInfo | null);\n\n                        /** TRoleModel gameInfo */\n                        gameInfo?: (ITRoleGameInfo | null);\n\n                        /** TRoleModel roomState */\n                        roomState?: (ITRoleRoomState | null);\n\n                        /** TRoleModel gameState */\n                        gameState?: (ITRoleGameState | null);\n\n                        /** TRoleModel netwokInfo */\n                        netwokInfo?: (ITRoleNetworkInfo | null);\n                }\n\n                /** Represents a TRoleModel. */\n                export class TRoleModel implements ITRoleModel {\n\n                        /**\n                         * Constructs a new TRoleModel.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoleModel);\n\n                        /** TRoleModel basicInfo. */\n                        public basicInfo?: (ITRoleBasic | null);\n\n                        /** TRoleModel userInfo. */\n                        public userInfo?: (ITUserInfo | null);\n\n                        /** TRoleModel gameInfo. */\n                        public gameInfo?: (ITRoleGameInfo | null);\n\n                        /** TRoleModel roomState. */\n                        public roomState?: (ITRoleRoomState | null);\n\n                        /** TRoleModel gameState. */\n                        public gameState?: (ITRoleGameState | null);\n\n                        /** TRoleModel netwokInfo. */\n                        public netwokInfo?: (ITRoleNetworkInfo | null);\n\n                        /**\n                         * Creates a new TRoleModel instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoleModel instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoleModel): roomserver.TRoleModel;\n\n                        /**\n                         * Encodes the specified TRoleModel message. Does not implicitly {@link TRoleModel.verify|verify} messages.\n                         * @param message TRoleModel message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoleModel, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoleModel message, length delimited. Does not implicitly {@link TRoleModel.verify|verify} messages.\n                         * @param message TRoleModel message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoleModel, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoleModel message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoleModel\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoleModel;\n\n                        /**\n                         * Decodes a TRoleModel message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoleModel\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoleModel;\n\n                        /**\n                         * Verifies a TRoleModel message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoleModel message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoleModel\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoleModel;\n\n                        /**\n                         * Creates a plain object from a TRoleModel message. Also converts values to other types if specified.\n                         * @param message TRoleModel\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoleModel, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoleModel to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomMemberFilterInfo. */\n                export interface ITRoomMemberFilterInfo {\n                }\n\n                /** Represents a TRoomMemberFilterInfo. */\n                export class TRoomMemberFilterInfo implements ITRoomMemberFilterInfo {\n\n                        /**\n                         * Constructs a new TRoomMemberFilterInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomMemberFilterInfo);\n\n                        /**\n                         * Creates a new TRoomMemberFilterInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomMemberFilterInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomMemberFilterInfo): roomserver.TRoomMemberFilterInfo;\n\n                        /**\n                         * Encodes the specified TRoomMemberFilterInfo message. Does not implicitly {@link TRoomMemberFilterInfo.verify|verify} messages.\n                         * @param message TRoomMemberFilterInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomMemberFilterInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomMemberFilterInfo message, length delimited. Does not implicitly {@link TRoomMemberFilterInfo.verify|verify} messages.\n                         * @param message TRoomMemberFilterInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomMemberFilterInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomMemberFilterInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomMemberFilterInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomMemberFilterInfo;\n\n                        /**\n                         * Decodes a TRoomMemberFilterInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomMemberFilterInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomMemberFilterInfo;\n\n                        /**\n                         * Verifies a TRoomMemberFilterInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomMemberFilterInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomMemberFilterInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomMemberFilterInfo;\n\n                        /**\n                         * Creates a plain object from a TRoomMemberFilterInfo message. Also converts values to other types if specified.\n                         * @param message TRoomMemberFilterInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomMemberFilterInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomMemberFilterInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a THandleResult. */\n                export interface ITHandleResult {\n\n                        /** THandleResult indicate */\n                        indicate?: (ITResultIndicate | null);\n                }\n\n                /** Represents a THandleResult. */\n                export class THandleResult implements ITHandleResult {\n\n                        /**\n                         * Constructs a new THandleResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITHandleResult);\n\n                        /** THandleResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /**\n                         * Creates a new THandleResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns THandleResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITHandleResult): roomserver.THandleResult;\n\n                        /**\n                         * Encodes the specified THandleResult message. Does not implicitly {@link THandleResult.verify|verify} messages.\n                         * @param message THandleResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITHandleResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified THandleResult message, length delimited. Does not implicitly {@link THandleResult.verify|verify} messages.\n                         * @param message THandleResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITHandleResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a THandleResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns THandleResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.THandleResult;\n\n                        /**\n                         * Decodes a THandleResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns THandleResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.THandleResult;\n\n                        /**\n                         * Verifies a THandleResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a THandleResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns THandleResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.THandleResult;\n\n                        /**\n                         * Creates a plain object from a THandleResult message. Also converts values to other types if specified.\n                         * @param message THandleResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.THandleResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this THandleResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomPlayerMessageOptions. */\n                export interface ITRoomPlayerMessageOptions {\n                }\n\n                /** Represents a TRoomPlayerMessageOptions. */\n                export class TRoomPlayerMessageOptions implements ITRoomPlayerMessageOptions {\n\n                        /**\n                         * Constructs a new TRoomPlayerMessageOptions.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomPlayerMessageOptions);\n\n                        /**\n                         * Creates a new TRoomPlayerMessageOptions instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomPlayerMessageOptions instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomPlayerMessageOptions): roomserver.TRoomPlayerMessageOptions;\n\n                        /**\n                         * Encodes the specified TRoomPlayerMessageOptions message. Does not implicitly {@link TRoomPlayerMessageOptions.verify|verify} messages.\n                         * @param message TRoomPlayerMessageOptions message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomPlayerMessageOptions, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomPlayerMessageOptions message, length delimited. Does not implicitly {@link TRoomPlayerMessageOptions.verify|verify} messages.\n                         * @param message TRoomPlayerMessageOptions message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomPlayerMessageOptions, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomPlayerMessageOptions message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomPlayerMessageOptions\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomPlayerMessageOptions;\n\n                        /**\n                         * Decodes a TRoomPlayerMessageOptions message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomPlayerMessageOptions\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomPlayerMessageOptions;\n\n                        /**\n                         * Verifies a TRoomPlayerMessageOptions message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomPlayerMessageOptions message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomPlayerMessageOptions\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomPlayerMessageOptions;\n\n                        /**\n                         * Creates a plain object from a TRoomPlayerMessageOptions message. Also converts values to other types if specified.\n                         * @param message TRoomPlayerMessageOptions\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomPlayerMessageOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomPlayerMessageOptions to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomPlayerMessage. */\n                export interface ITRoomPlayerMessage {\n\n                        /** TRoomPlayerMessage options */\n                        options?: (ITRoomPlayerMessageOptions | null);\n                }\n\n                /** Represents a TRoomPlayerMessage. */\n                export class TRoomPlayerMessage implements ITRoomPlayerMessage {\n\n                        /**\n                         * Constructs a new TRoomPlayerMessage.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomPlayerMessage);\n\n                        /** TRoomPlayerMessage options. */\n                        public options?: (ITRoomPlayerMessageOptions | null);\n\n                        /**\n                         * Creates a new TRoomPlayerMessage instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomPlayerMessage instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomPlayerMessage): roomserver.TRoomPlayerMessage;\n\n                        /**\n                         * Encodes the specified TRoomPlayerMessage message. Does not implicitly {@link TRoomPlayerMessage.verify|verify} messages.\n                         * @param message TRoomPlayerMessage message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomPlayerMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomPlayerMessage message, length delimited. Does not implicitly {@link TRoomPlayerMessage.verify|verify} messages.\n                         * @param message TRoomPlayerMessage message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomPlayerMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomPlayerMessage message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomPlayerMessage\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomPlayerMessage;\n\n                        /**\n                         * Decodes a TRoomPlayerMessage message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomPlayerMessage\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomPlayerMessage;\n\n                        /**\n                         * Verifies a TRoomPlayerMessage message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomPlayerMessage message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomPlayerMessage\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomPlayerMessage;\n\n                        /**\n                         * Creates a plain object from a TRoomPlayerMessage message. Also converts values to other types if specified.\n                         * @param message TRoomPlayerMessage\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomPlayerMessage, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomPlayerMessage to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqEnterRoom. */\n                export interface ITReqEnterRoom {\n\n                        /** TReqEnterRoom opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqEnterRoom roleInfo */\n                        roleInfo?: (ITRoleInfo | null);\n\n                        /** TReqEnterRoom roomInfo */\n                        roomInfo?: (ITRoomModel | null);\n                }\n\n                /** Represents a TReqEnterRoom. */\n                export class TReqEnterRoom implements ITReqEnterRoom {\n\n                        /**\n                         * Constructs a new TReqEnterRoom.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqEnterRoom);\n\n                        /** TReqEnterRoom opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqEnterRoom roleInfo. */\n                        public roleInfo?: (ITRoleInfo | null);\n\n                        /** TReqEnterRoom roomInfo. */\n                        public roomInfo?: (ITRoomModel | null);\n\n                        /**\n                         * Creates a new TReqEnterRoom instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqEnterRoom instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqEnterRoom): roomserver.TReqEnterRoom;\n\n                        /**\n                         * Encodes the specified TReqEnterRoom message. Does not implicitly {@link TReqEnterRoom.verify|verify} messages.\n                         * @param message TReqEnterRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqEnterRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqEnterRoom message, length delimited. Does not implicitly {@link TReqEnterRoom.verify|verify} messages.\n                         * @param message TReqEnterRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqEnterRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqEnterRoom message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqEnterRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqEnterRoom;\n\n                        /**\n                         * Decodes a TReqEnterRoom message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqEnterRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqEnterRoom;\n\n                        /**\n                         * Verifies a TReqEnterRoom message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqEnterRoom message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqEnterRoom\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqEnterRoom;\n\n                        /**\n                         * Creates a plain object from a TReqEnterRoom message. Also converts values to other types if specified.\n                         * @param message TReqEnterRoom\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqEnterRoom, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqEnterRoom to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqExitRoom. */\n                export interface ITReqExitRoom {\n\n                        /** TReqExitRoom opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqExitRoom. */\n                export class TReqExitRoom implements ITReqExitRoom {\n\n                        /**\n                         * Constructs a new TReqExitRoom.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqExitRoom);\n\n                        /** TReqExitRoom opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqExitRoom instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqExitRoom instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqExitRoom): roomserver.TReqExitRoom;\n\n                        /**\n                         * Encodes the specified TReqExitRoom message. Does not implicitly {@link TReqExitRoom.verify|verify} messages.\n                         * @param message TReqExitRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqExitRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqExitRoom message, length delimited. Does not implicitly {@link TReqExitRoom.verify|verify} messages.\n                         * @param message TReqExitRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqExitRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqExitRoom message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqExitRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqExitRoom;\n\n                        /**\n                         * Decodes a TReqExitRoom message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqExitRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqExitRoom;\n\n                        /**\n                         * Verifies a TReqExitRoom message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqExitRoom message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqExitRoom\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqExitRoom;\n\n                        /**\n                         * Creates a plain object from a TReqExitRoom message. Also converts values to other types if specified.\n                         * @param message TReqExitRoom\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqExitRoom, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqExitRoom to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqDestroyRoomForce. */\n                export interface ITReqDestroyRoomForce {\n\n                        /** TReqDestroyRoomForce opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqDestroyRoomForce. */\n                export class TReqDestroyRoomForce implements ITReqDestroyRoomForce {\n\n                        /**\n                         * Constructs a new TReqDestroyRoomForce.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqDestroyRoomForce);\n\n                        /** TReqDestroyRoomForce opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqDestroyRoomForce instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqDestroyRoomForce instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqDestroyRoomForce): roomserver.TReqDestroyRoomForce;\n\n                        /**\n                         * Encodes the specified TReqDestroyRoomForce message. Does not implicitly {@link TReqDestroyRoomForce.verify|verify} messages.\n                         * @param message TReqDestroyRoomForce message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqDestroyRoomForce, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqDestroyRoomForce message, length delimited. Does not implicitly {@link TReqDestroyRoomForce.verify|verify} messages.\n                         * @param message TReqDestroyRoomForce message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqDestroyRoomForce, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqDestroyRoomForce message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqDestroyRoomForce\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqDestroyRoomForce;\n\n                        /**\n                         * Decodes a TReqDestroyRoomForce message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqDestroyRoomForce\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqDestroyRoomForce;\n\n                        /**\n                         * Verifies a TReqDestroyRoomForce message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqDestroyRoomForce message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqDestroyRoomForce\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqDestroyRoomForce;\n\n                        /**\n                         * Creates a plain object from a TReqDestroyRoomForce message. Also converts values to other types if specified.\n                         * @param message TReqDestroyRoomForce\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqDestroyRoomForce, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqDestroyRoomForce to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqRoleBroadOptions. */\n                export interface ITReqRoleBroadOptions {\n\n                        /** TReqRoleBroadOptions roleId */\n                        roleId?: (string | null);\n                }\n\n                /** Represents a TReqRoleBroadOptions. */\n                export class TReqRoleBroadOptions implements ITReqRoleBroadOptions {\n\n                        /**\n                         * Constructs a new TReqRoleBroadOptions.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqRoleBroadOptions);\n\n                        /** TReqRoleBroadOptions roleId. */\n                        public roleId: string;\n\n                        /**\n                         * Creates a new TReqRoleBroadOptions instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqRoleBroadOptions instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqRoleBroadOptions): roomserver.TReqRoleBroadOptions;\n\n                        /**\n                         * Encodes the specified TReqRoleBroadOptions message. Does not implicitly {@link TReqRoleBroadOptions.verify|verify} messages.\n                         * @param message TReqRoleBroadOptions message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqRoleBroadOptions, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqRoleBroadOptions message, length delimited. Does not implicitly {@link TReqRoleBroadOptions.verify|verify} messages.\n                         * @param message TReqRoleBroadOptions message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqRoleBroadOptions, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqRoleBroadOptions message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqRoleBroadOptions\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqRoleBroadOptions;\n\n                        /**\n                         * Decodes a TReqRoleBroadOptions message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqRoleBroadOptions\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqRoleBroadOptions;\n\n                        /**\n                         * Verifies a TReqRoleBroadOptions message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqRoleBroadOptions message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqRoleBroadOptions\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqRoleBroadOptions;\n\n                        /**\n                         * Creates a plain object from a TReqRoleBroadOptions message. Also converts values to other types if specified.\n                         * @param message TReqRoleBroadOptions\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqRoleBroadOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqRoleBroadOptions to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TFrameSyncInfo. */\n                export interface ITFrameSyncInfo {\n\n                        /** TFrameSyncInfo serverTime */\n                        serverTime?: (number | Long | null);\n\n                        /** TFrameSyncInfo serverFrameCount */\n                        serverFrameCount?: (number | Long | null);\n\n                        /** TFrameSyncInfo clientTime */\n                        clientTime?: (number | Long | null);\n\n                        /** TFrameSyncInfo clientLerpTime */\n                        clientLerpTime?: (number | Long | null);\n\n                        /** TFrameSyncInfo randomSeed */\n                        randomSeed?: (number | null);\n\n                        /** TFrameSyncInfo isReplay */\n                        isReplay?: (boolean | null);\n                }\n\n                /** Represents a TFrameSyncInfo. */\n                export class TFrameSyncInfo implements ITFrameSyncInfo {\n\n                        /**\n                         * Constructs a new TFrameSyncInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITFrameSyncInfo);\n\n                        /** TFrameSyncInfo serverTime. */\n                        public serverTime: (number | Long);\n\n                        /** TFrameSyncInfo serverFrameCount. */\n                        public serverFrameCount: (number | Long);\n\n                        /** TFrameSyncInfo clientTime. */\n                        public clientTime: (number | Long);\n\n                        /** TFrameSyncInfo clientLerpTime. */\n                        public clientLerpTime: (number | Long);\n\n                        /** TFrameSyncInfo randomSeed. */\n                        public randomSeed: number;\n\n                        /** TFrameSyncInfo isReplay. */\n                        public isReplay: boolean;\n\n                        /**\n                         * Creates a new TFrameSyncInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TFrameSyncInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITFrameSyncInfo): roomserver.TFrameSyncInfo;\n\n                        /**\n                         * Encodes the specified TFrameSyncInfo message. Does not implicitly {@link TFrameSyncInfo.verify|verify} messages.\n                         * @param message TFrameSyncInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITFrameSyncInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TFrameSyncInfo message, length delimited. Does not implicitly {@link TFrameSyncInfo.verify|verify} messages.\n                         * @param message TFrameSyncInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITFrameSyncInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TFrameSyncInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TFrameSyncInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TFrameSyncInfo;\n\n                        /**\n                         * Decodes a TFrameSyncInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TFrameSyncInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TFrameSyncInfo;\n\n                        /**\n                         * Verifies a TFrameSyncInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TFrameSyncInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TFrameSyncInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TFrameSyncInfo;\n\n                        /**\n                         * Creates a plain object from a TFrameSyncInfo message. Also converts values to other types if specified.\n                         * @param message TFrameSyncInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TFrameSyncInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TFrameSyncInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqBroadCastFrameSyncReq. */\n                export interface ITReqBroadCastFrameSyncReq {\n\n                        /** TReqBroadCastFrameSyncReq opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqBroadCastFrameSyncReq syncInfo */\n                        syncInfo?: (ITFrameSyncInfo | null);\n\n                        /** TReqBroadCastFrameSyncReq msgBytes */\n                        msgBytes?: (Uint8Array | null);\n                }\n\n                /** Represents a TReqBroadCastFrameSyncReq. */\n                export class TReqBroadCastFrameSyncReq implements ITReqBroadCastFrameSyncReq {\n\n                        /**\n                         * Constructs a new TReqBroadCastFrameSyncReq.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqBroadCastFrameSyncReq);\n\n                        /** TReqBroadCastFrameSyncReq opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqBroadCastFrameSyncReq syncInfo. */\n                        public syncInfo?: (ITFrameSyncInfo | null);\n\n                        /** TReqBroadCastFrameSyncReq msgBytes. */\n                        public msgBytes: Uint8Array;\n\n                        /**\n                         * Creates a new TReqBroadCastFrameSyncReq instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqBroadCastFrameSyncReq instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqBroadCastFrameSyncReq): roomserver.TReqBroadCastFrameSyncReq;\n\n                        /**\n                         * Encodes the specified TReqBroadCastFrameSyncReq message. Does not implicitly {@link TReqBroadCastFrameSyncReq.verify|verify} messages.\n                         * @param message TReqBroadCastFrameSyncReq message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqBroadCastFrameSyncReq, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqBroadCastFrameSyncReq message, length delimited. Does not implicitly {@link TReqBroadCastFrameSyncReq.verify|verify} messages.\n                         * @param message TReqBroadCastFrameSyncReq message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqBroadCastFrameSyncReq, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqBroadCastFrameSyncReq message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqBroadCastFrameSyncReq\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqBroadCastFrameSyncReq;\n\n                        /**\n                         * Decodes a TReqBroadCastFrameSyncReq message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqBroadCastFrameSyncReq\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqBroadCastFrameSyncReq;\n\n                        /**\n                         * Verifies a TReqBroadCastFrameSyncReq message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqBroadCastFrameSyncReq message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqBroadCastFrameSyncReq\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqBroadCastFrameSyncReq;\n\n                        /**\n                         * Creates a plain object from a TReqBroadCastFrameSyncReq message. Also converts values to other types if specified.\n                         * @param message TReqBroadCastFrameSyncReq\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqBroadCastFrameSyncReq, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqBroadCastFrameSyncReq to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqBroadCastClientMessage. */\n                export interface ITReqBroadCastClientMessage {\n\n                        /** TReqBroadCastClientMessage opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqBroadCastClientMessage syncInfo */\n                        syncInfo?: (ITFrameSyncInfo | null);\n\n                        /** TReqBroadCastClientMessage targets */\n                        targets?: (ITReqRoleBroadOptions[] | null);\n\n                        /** TReqBroadCastClientMessage msgBytes */\n                        msgBytes?: (Uint8Array | null);\n\n                        /** TReqBroadCastClientMessage msgStr */\n                        msgStr?: (string | null);\n                }\n\n                /** Represents a TReqBroadCastClientMessage. */\n                export class TReqBroadCastClientMessage implements ITReqBroadCastClientMessage {\n\n                        /**\n                         * Constructs a new TReqBroadCastClientMessage.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqBroadCastClientMessage);\n\n                        /** TReqBroadCastClientMessage opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqBroadCastClientMessage syncInfo. */\n                        public syncInfo?: (ITFrameSyncInfo | null);\n\n                        /** TReqBroadCastClientMessage targets. */\n                        public targets: ITReqRoleBroadOptions[];\n\n                        /** TReqBroadCastClientMessage msgBytes. */\n                        public msgBytes: Uint8Array;\n\n                        /** TReqBroadCastClientMessage msgStr. */\n                        public msgStr: string;\n\n                        /**\n                         * Creates a new TReqBroadCastClientMessage instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqBroadCastClientMessage instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqBroadCastClientMessage): roomserver.TReqBroadCastClientMessage;\n\n                        /**\n                         * Encodes the specified TReqBroadCastClientMessage message. Does not implicitly {@link TReqBroadCastClientMessage.verify|verify} messages.\n                         * @param message TReqBroadCastClientMessage message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqBroadCastClientMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqBroadCastClientMessage message, length delimited. Does not implicitly {@link TReqBroadCastClientMessage.verify|verify} messages.\n                         * @param message TReqBroadCastClientMessage message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqBroadCastClientMessage, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqBroadCastClientMessage message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqBroadCastClientMessage\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqBroadCastClientMessage;\n\n                        /**\n                         * Decodes a TReqBroadCastClientMessage message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqBroadCastClientMessage\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqBroadCastClientMessage;\n\n                        /**\n                         * Verifies a TReqBroadCastClientMessage message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqBroadCastClientMessage message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqBroadCastClientMessage\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqBroadCastClientMessage;\n\n                        /**\n                         * Creates a plain object from a TReqBroadCastClientMessage message. Also converts values to other types if specified.\n                         * @param message TReqBroadCastClientMessage\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqBroadCastClientMessage, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqBroadCastClientMessage to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqValidateRoom. */\n                export interface ITReqValidateRoom {\n\n                        /** TReqValidateRoom opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqValidateRoom. */\n                export class TReqValidateRoom implements ITReqValidateRoom {\n\n                        /**\n                         * Constructs a new TReqValidateRoom.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqValidateRoom);\n\n                        /** TReqValidateRoom opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqValidateRoom instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqValidateRoom instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqValidateRoom): roomserver.TReqValidateRoom;\n\n                        /**\n                         * Encodes the specified TReqValidateRoom message. Does not implicitly {@link TReqValidateRoom.verify|verify} messages.\n                         * @param message TReqValidateRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqValidateRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqValidateRoom message, length delimited. Does not implicitly {@link TReqValidateRoom.verify|verify} messages.\n                         * @param message TReqValidateRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqValidateRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqValidateRoom message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqValidateRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqValidateRoom;\n\n                        /**\n                         * Decodes a TReqValidateRoom message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqValidateRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqValidateRoom;\n\n                        /**\n                         * Verifies a TReqValidateRoom message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqValidateRoom message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqValidateRoom\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqValidateRoom;\n\n                        /**\n                         * Creates a plain object from a TReqValidateRoom message. Also converts values to other types if specified.\n                         * @param message TReqValidateRoom\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqValidateRoom, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqValidateRoom to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqSetRoomInfo. */\n                export interface ITReqSetRoomInfo {\n\n                        /** TReqSetRoomInfo opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqSetRoomInfo roomInfo */\n                        roomInfo?: (ITRoomSettings | null);\n                }\n\n                /** Represents a TReqSetRoomInfo. */\n                export class TReqSetRoomInfo implements ITReqSetRoomInfo {\n\n                        /**\n                         * Constructs a new TReqSetRoomInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqSetRoomInfo);\n\n                        /** TReqSetRoomInfo opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqSetRoomInfo roomInfo. */\n                        public roomInfo?: (ITRoomSettings | null);\n\n                        /**\n                         * Creates a new TReqSetRoomInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqSetRoomInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqSetRoomInfo): roomserver.TReqSetRoomInfo;\n\n                        /**\n                         * Encodes the specified TReqSetRoomInfo message. Does not implicitly {@link TReqSetRoomInfo.verify|verify} messages.\n                         * @param message TReqSetRoomInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqSetRoomInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqSetRoomInfo message, length delimited. Does not implicitly {@link TReqSetRoomInfo.verify|verify} messages.\n                         * @param message TReqSetRoomInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqSetRoomInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqSetRoomInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqSetRoomInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqSetRoomInfo;\n\n                        /**\n                         * Decodes a TReqSetRoomInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqSetRoomInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqSetRoomInfo;\n\n                        /**\n                         * Verifies a TReqSetRoomInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqSetRoomInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqSetRoomInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqSetRoomInfo;\n\n                        /**\n                         * Creates a plain object from a TReqSetRoomInfo message. Also converts values to other types if specified.\n                         * @param message TReqSetRoomInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqSetRoomInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqSetRoomInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqBanishMember. */\n                export interface ITReqBanishMember {\n\n                        /** TReqBanishMember opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqBanishMember roles */\n                        roles?: (string[] | null);\n                }\n\n                /** Represents a TReqBanishMember. */\n                export class TReqBanishMember implements ITReqBanishMember {\n\n                        /**\n                         * Constructs a new TReqBanishMember.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqBanishMember);\n\n                        /** TReqBanishMember opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqBanishMember roles. */\n                        public roles: string[];\n\n                        /**\n                         * Creates a new TReqBanishMember instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqBanishMember instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqBanishMember): roomserver.TReqBanishMember;\n\n                        /**\n                         * Encodes the specified TReqBanishMember message. Does not implicitly {@link TReqBanishMember.verify|verify} messages.\n                         * @param message TReqBanishMember message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqBanishMember, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqBanishMember message, length delimited. Does not implicitly {@link TReqBanishMember.verify|verify} messages.\n                         * @param message TReqBanishMember message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqBanishMember, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqBanishMember message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqBanishMember\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqBanishMember;\n\n                        /**\n                         * Decodes a TReqBanishMember message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqBanishMember\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqBanishMember;\n\n                        /**\n                         * Verifies a TReqBanishMember message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqBanishMember message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqBanishMember\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqBanishMember;\n\n                        /**\n                         * Creates a plain object from a TReqBanishMember message. Also converts values to other types if specified.\n                         * @param message TReqBanishMember\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqBanishMember, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqBanishMember to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqSetSelfRoomChairNo. */\n                export interface ITReqSetSelfRoomChairNo {\n\n                        /** TReqSetSelfRoomChairNo opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqSetSelfRoomChairNo chairNo */\n                        chairNo?: (number | Long | null);\n                }\n\n                /** Represents a TReqSetSelfRoomChairNo. */\n                export class TReqSetSelfRoomChairNo implements ITReqSetSelfRoomChairNo {\n\n                        /**\n                         * Constructs a new TReqSetSelfRoomChairNo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqSetSelfRoomChairNo);\n\n                        /** TReqSetSelfRoomChairNo opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqSetSelfRoomChairNo chairNo. */\n                        public chairNo: (number | Long);\n\n                        /**\n                         * Creates a new TReqSetSelfRoomChairNo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqSetSelfRoomChairNo instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqSetSelfRoomChairNo): roomserver.TReqSetSelfRoomChairNo;\n\n                        /**\n                         * Encodes the specified TReqSetSelfRoomChairNo message. Does not implicitly {@link TReqSetSelfRoomChairNo.verify|verify} messages.\n                         * @param message TReqSetSelfRoomChairNo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqSetSelfRoomChairNo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqSetSelfRoomChairNo message, length delimited. Does not implicitly {@link TReqSetSelfRoomChairNo.verify|verify} messages.\n                         * @param message TReqSetSelfRoomChairNo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqSetSelfRoomChairNo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqSetSelfRoomChairNo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqSetSelfRoomChairNo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqSetSelfRoomChairNo;\n\n                        /**\n                         * Decodes a TReqSetSelfRoomChairNo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqSetSelfRoomChairNo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqSetSelfRoomChairNo;\n\n                        /**\n                         * Verifies a TReqSetSelfRoomChairNo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqSetSelfRoomChairNo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqSetSelfRoomChairNo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqSetSelfRoomChairNo;\n\n                        /**\n                         * Creates a plain object from a TReqSetSelfRoomChairNo message. Also converts values to other types if specified.\n                         * @param message TReqSetSelfRoomChairNo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqSetSelfRoomChairNo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqSetSelfRoomChairNo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqFilterMembers. */\n                export interface ITReqFilterMembers {\n\n                        /** TReqFilterMembers opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqFilterMembers filterInfo */\n                        filterInfo?: (ITRoomMemberFilterInfo | null);\n                }\n\n                /** Represents a TReqFilterMembers. */\n                export class TReqFilterMembers implements ITReqFilterMembers {\n\n                        /**\n                         * Constructs a new TReqFilterMembers.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqFilterMembers);\n\n                        /** TReqFilterMembers opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqFilterMembers filterInfo. */\n                        public filterInfo?: (ITRoomMemberFilterInfo | null);\n\n                        /**\n                         * Creates a new TReqFilterMembers instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqFilterMembers instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqFilterMembers): roomserver.TReqFilterMembers;\n\n                        /**\n                         * Encodes the specified TReqFilterMembers message. Does not implicitly {@link TReqFilterMembers.verify|verify} messages.\n                         * @param message TReqFilterMembers message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqFilterMembers, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqFilterMembers message, length delimited. Does not implicitly {@link TReqFilterMembers.verify|verify} messages.\n                         * @param message TReqFilterMembers message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqFilterMembers, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqFilterMembers message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqFilterMembers\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqFilterMembers;\n\n                        /**\n                         * Decodes a TReqFilterMembers message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqFilterMembers\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqFilterMembers;\n\n                        /**\n                         * Verifies a TReqFilterMembers message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqFilterMembers message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqFilterMembers\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqFilterMembers;\n\n                        /**\n                         * Creates a plain object from a TReqFilterMembers message. Also converts values to other types if specified.\n                         * @param message TReqFilterMembers\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqFilterMembers, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqFilterMembers to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TStartGameOptions. */\n                export interface ITStartGameOptions {\n                }\n\n                /** Represents a TStartGameOptions. */\n                export class TStartGameOptions implements ITStartGameOptions {\n\n                        /**\n                         * Constructs a new TStartGameOptions.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITStartGameOptions);\n\n                        /**\n                         * Creates a new TStartGameOptions instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TStartGameOptions instance\n                         */\n                        //        public static create(properties?: roomserver.ITStartGameOptions): roomserver.TStartGameOptions;\n\n                        /**\n                         * Encodes the specified TStartGameOptions message. Does not implicitly {@link TStartGameOptions.verify|verify} messages.\n                         * @param message TStartGameOptions message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITStartGameOptions, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TStartGameOptions message, length delimited. Does not implicitly {@link TStartGameOptions.verify|verify} messages.\n                         * @param message TStartGameOptions message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITStartGameOptions, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TStartGameOptions message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TStartGameOptions\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TStartGameOptions;\n\n                        /**\n                         * Decodes a TStartGameOptions message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TStartGameOptions\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TStartGameOptions;\n\n                        /**\n                         * Verifies a TStartGameOptions message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TStartGameOptions message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TStartGameOptions\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TStartGameOptions;\n\n                        /**\n                         * Creates a plain object from a TStartGameOptions message. Also converts values to other types if specified.\n                         * @param message TStartGameOptions\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TStartGameOptions, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TStartGameOptions to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqStartGame. */\n                export interface ITReqStartGame {\n\n                        /** TReqStartGame opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqStartGame startOptions */\n                        startOptions?: (ITStartGameOptions | null);\n                }\n\n                /** Represents a TReqStartGame. */\n                export class TReqStartGame implements ITReqStartGame {\n\n                        /**\n                         * Constructs a new TReqStartGame.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqStartGame);\n\n                        /** TReqStartGame opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqStartGame startOptions. */\n                        public startOptions?: (ITStartGameOptions | null);\n\n                        /**\n                         * Creates a new TReqStartGame instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqStartGame instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqStartGame): roomserver.TReqStartGame;\n\n                        /**\n                         * Encodes the specified TReqStartGame message. Does not implicitly {@link TReqStartGame.verify|verify} messages.\n                         * @param message TReqStartGame message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqStartGame, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqStartGame message, length delimited. Does not implicitly {@link TReqStartGame.verify|verify} messages.\n                         * @param message TReqStartGame message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqStartGame, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqStartGame message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqStartGame\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqStartGame;\n\n                        /**\n                         * Decodes a TReqStartGame message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqStartGame\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqStartGame;\n\n                        /**\n                         * Verifies a TReqStartGame message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqStartGame message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqStartGame\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqStartGame;\n\n                        /**\n                         * Creates a plain object from a TReqStartGame message. Also converts values to other types if specified.\n                         * @param message TReqStartGame\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqStartGame, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqStartGame to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TFrameSyncInitConfig. */\n                export interface ITFrameSyncInitConfig {\n\n                        /** TFrameSyncInitConfig randomSeed */\n                        randomSeed?: (number | null);\n                }\n\n                /** Represents a TFrameSyncInitConfig. */\n                export class TFrameSyncInitConfig implements ITFrameSyncInitConfig {\n\n                        /**\n                         * Constructs a new TFrameSyncInitConfig.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITFrameSyncInitConfig);\n\n                        /** TFrameSyncInitConfig randomSeed. */\n                        public randomSeed: number;\n\n                        /**\n                         * Creates a new TFrameSyncInitConfig instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TFrameSyncInitConfig instance\n                         */\n                        //        public static create(properties?: roomserver.ITFrameSyncInitConfig): roomserver.TFrameSyncInitConfig;\n\n                        /**\n                         * Encodes the specified TFrameSyncInitConfig message. Does not implicitly {@link TFrameSyncInitConfig.verify|verify} messages.\n                         * @param message TFrameSyncInitConfig message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITFrameSyncInitConfig, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TFrameSyncInitConfig message, length delimited. Does not implicitly {@link TFrameSyncInitConfig.verify|verify} messages.\n                         * @param message TFrameSyncInitConfig message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITFrameSyncInitConfig, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TFrameSyncInitConfig message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TFrameSyncInitConfig\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TFrameSyncInitConfig;\n\n                        /**\n                         * Decodes a TFrameSyncInitConfig message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TFrameSyncInitConfig\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TFrameSyncInitConfig;\n\n                        /**\n                         * Verifies a TFrameSyncInitConfig message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TFrameSyncInitConfig message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TFrameSyncInitConfig\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TFrameSyncInitConfig;\n\n                        /**\n                         * Creates a plain object from a TFrameSyncInitConfig message. Also converts values to other types if specified.\n                         * @param message TFrameSyncInitConfig\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TFrameSyncInitConfig, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TFrameSyncInitConfig to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRespStartGameResult. */\n                export interface ITRespStartGameResult {\n\n                        /** TRespStartGameResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TRespStartGameResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TRespStartGameResult frameSyncInitConfig */\n                        frameSyncInitConfig?: (ITFrameSyncInitConfig | null);\n                }\n\n                /** Represents a TRespStartGameResult. */\n                export class TRespStartGameResult implements ITRespStartGameResult {\n\n                        /**\n                         * Constructs a new TRespStartGameResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRespStartGameResult);\n\n                        /** TRespStartGameResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TRespStartGameResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TRespStartGameResult frameSyncInitConfig. */\n                        public frameSyncInitConfig?: (ITFrameSyncInitConfig | null);\n\n                        /**\n                         * Creates a new TRespStartGameResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRespStartGameResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITRespStartGameResult): roomserver.TRespStartGameResult;\n\n                        /**\n                         * Encodes the specified TRespStartGameResult message. Does not implicitly {@link TRespStartGameResult.verify|verify} messages.\n                         * @param message TRespStartGameResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRespStartGameResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRespStartGameResult message, length delimited. Does not implicitly {@link TRespStartGameResult.verify|verify} messages.\n                         * @param message TRespStartGameResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRespStartGameResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRespStartGameResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRespStartGameResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRespStartGameResult;\n\n                        /**\n                         * Decodes a TRespStartGameResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRespStartGameResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRespStartGameResult;\n\n                        /**\n                         * Verifies a TRespStartGameResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRespStartGameResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRespStartGameResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRespStartGameResult;\n\n                        /**\n                         * Creates a plain object from a TRespStartGameResult message. Also converts values to other types if specified.\n                         * @param message TRespStartGameResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRespStartGameResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRespStartGameResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqSearchRoomById. */\n                export interface ITReqSearchRoomById {\n\n                        /** TReqSearchRoomById opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqSearchRoomById. */\n                export class TReqSearchRoomById implements ITReqSearchRoomById {\n\n                        /**\n                         * Constructs a new TReqSearchRoomById.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqSearchRoomById);\n\n                        /** TReqSearchRoomById opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqSearchRoomById instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqSearchRoomById instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqSearchRoomById): roomserver.TReqSearchRoomById;\n\n                        /**\n                         * Encodes the specified TReqSearchRoomById message. Does not implicitly {@link TReqSearchRoomById.verify|verify} messages.\n                         * @param message TReqSearchRoomById message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqSearchRoomById, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqSearchRoomById message, length delimited. Does not implicitly {@link TReqSearchRoomById.verify|verify} messages.\n                         * @param message TReqSearchRoomById message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqSearchRoomById, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqSearchRoomById message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqSearchRoomById\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqSearchRoomById;\n\n                        /**\n                         * Decodes a TReqSearchRoomById message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqSearchRoomById\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqSearchRoomById;\n\n                        /**\n                         * Verifies a TReqSearchRoomById message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqSearchRoomById message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqSearchRoomById\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqSearchRoomById;\n\n                        /**\n                         * Creates a plain object from a TReqSearchRoomById message. Also converts values to other types if specified.\n                         * @param message TReqSearchRoomById\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqSearchRoomById, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqSearchRoomById to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqGetRecommendRooms. */\n                export interface ITReqGetRecommendRooms {\n\n                        /** TReqGetRecommendRooms opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqGetRecommendRooms. */\n                export class TReqGetRecommendRooms implements ITReqGetRecommendRooms {\n\n                        /**\n                         * Constructs a new TReqGetRecommendRooms.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqGetRecommendRooms);\n\n                        /** TReqGetRecommendRooms opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqGetRecommendRooms instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqGetRecommendRooms instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqGetRecommendRooms): roomserver.TReqGetRecommendRooms;\n\n                        /**\n                         * Encodes the specified TReqGetRecommendRooms message. Does not implicitly {@link TReqGetRecommendRooms.verify|verify} messages.\n                         * @param message TReqGetRecommendRooms message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqGetRecommendRooms, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqGetRecommendRooms message, length delimited. Does not implicitly {@link TReqGetRecommendRooms.verify|verify} messages.\n                         * @param message TReqGetRecommendRooms message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqGetRecommendRooms, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqGetRecommendRooms message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqGetRecommendRooms\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqGetRecommendRooms;\n\n                        /**\n                         * Decodes a TReqGetRecommendRooms message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqGetRecommendRooms\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqGetRecommendRooms;\n\n                        /**\n                         * Verifies a TReqGetRecommendRooms message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqGetRecommendRooms message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqGetRecommendRooms\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqGetRecommendRooms;\n\n                        /**\n                         * Creates a plain object from a TReqGetRecommendRooms message. Also converts values to other types if specified.\n                         * @param message TReqGetRecommendRooms\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqGetRecommendRooms, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqGetRecommendRooms to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqMatchUsersWithDefaultRule. */\n                export interface ITReqMatchUsersWithDefaultRule {\n\n                        /** TReqMatchUsersWithDefaultRule opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqMatchUsersWithDefaultRule roleInfo */\n                        roleInfo?: (ITRoleInfo | null);\n\n                        /** TReqMatchUsersWithDefaultRule roomInfo */\n                        roomInfo?: (ITRoomInfo | null);\n                }\n\n                /** Represents a TReqMatchUsersWithDefaultRule. */\n                export class TReqMatchUsersWithDefaultRule implements ITReqMatchUsersWithDefaultRule {\n\n                        /**\n                         * Constructs a new TReqMatchUsersWithDefaultRule.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqMatchUsersWithDefaultRule);\n\n                        /** TReqMatchUsersWithDefaultRule opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqMatchUsersWithDefaultRule roleInfo. */\n                        public roleInfo?: (ITRoleInfo | null);\n\n                        /** TReqMatchUsersWithDefaultRule roomInfo. */\n                        public roomInfo?: (ITRoomInfo | null);\n\n                        /**\n                         * Creates a new TReqMatchUsersWithDefaultRule instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqMatchUsersWithDefaultRule instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqMatchUsersWithDefaultRule): roomserver.TReqMatchUsersWithDefaultRule;\n\n                        /**\n                         * Encodes the specified TReqMatchUsersWithDefaultRule message. Does not implicitly {@link TReqMatchUsersWithDefaultRule.verify|verify} messages.\n                         * @param message TReqMatchUsersWithDefaultRule message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqMatchUsersWithDefaultRule, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqMatchUsersWithDefaultRule message, length delimited. Does not implicitly {@link TReqMatchUsersWithDefaultRule.verify|verify} messages.\n                         * @param message TReqMatchUsersWithDefaultRule message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqMatchUsersWithDefaultRule, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqMatchUsersWithDefaultRule message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqMatchUsersWithDefaultRule\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqMatchUsersWithDefaultRule;\n\n                        /**\n                         * Decodes a TReqMatchUsersWithDefaultRule message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqMatchUsersWithDefaultRule\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqMatchUsersWithDefaultRule;\n\n                        /**\n                         * Verifies a TReqMatchUsersWithDefaultRule message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqMatchUsersWithDefaultRule message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqMatchUsersWithDefaultRule\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqMatchUsersWithDefaultRule;\n\n                        /**\n                         * Creates a plain object from a TReqMatchUsersWithDefaultRule message. Also converts values to other types if specified.\n                         * @param message TReqMatchUsersWithDefaultRule\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqMatchUsersWithDefaultRule, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqMatchUsersWithDefaultRule to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqNotifyCreateRoom. */\n                export interface ITReqNotifyCreateRoom {\n\n                        /** TReqNotifyCreateRoom roomModel */\n                        roomModel?: (ITRoomModel | null);\n                }\n\n                /** Represents a TReqNotifyCreateRoom. */\n                export class TReqNotifyCreateRoom implements ITReqNotifyCreateRoom {\n\n                        /**\n                         * Constructs a new TReqNotifyCreateRoom.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqNotifyCreateRoom);\n\n                        /** TReqNotifyCreateRoom roomModel. */\n                        public roomModel?: (ITRoomModel | null);\n\n                        /**\n                         * Creates a new TReqNotifyCreateRoom instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqNotifyCreateRoom instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqNotifyCreateRoom): roomserver.TReqNotifyCreateRoom;\n\n                        /**\n                         * Encodes the specified TReqNotifyCreateRoom message. Does not implicitly {@link TReqNotifyCreateRoom.verify|verify} messages.\n                         * @param message TReqNotifyCreateRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqNotifyCreateRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqNotifyCreateRoom message, length delimited. Does not implicitly {@link TReqNotifyCreateRoom.verify|verify} messages.\n                         * @param message TReqNotifyCreateRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqNotifyCreateRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqNotifyCreateRoom message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqNotifyCreateRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqNotifyCreateRoom;\n\n                        /**\n                         * Decodes a TReqNotifyCreateRoom message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqNotifyCreateRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqNotifyCreateRoom;\n\n                        /**\n                         * Verifies a TReqNotifyCreateRoom message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqNotifyCreateRoom message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqNotifyCreateRoom\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqNotifyCreateRoom;\n\n                        /**\n                         * Creates a plain object from a TReqNotifyCreateRoom message. Also converts values to other types if specified.\n                         * @param message TReqNotifyCreateRoom\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqNotifyCreateRoom, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqNotifyCreateRoom to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqNotifyRemoveRoom. */\n                export interface ITReqNotifyRemoveRoom {\n\n                        /** TReqNotifyRemoveRoom opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqNotifyRemoveRoom. */\n                export class TReqNotifyRemoveRoom implements ITReqNotifyRemoveRoom {\n\n                        /**\n                         * Constructs a new TReqNotifyRemoveRoom.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqNotifyRemoveRoom);\n\n                        /** TReqNotifyRemoveRoom opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqNotifyRemoveRoom instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqNotifyRemoveRoom instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqNotifyRemoveRoom): roomserver.TReqNotifyRemoveRoom;\n\n                        /**\n                         * Encodes the specified TReqNotifyRemoveRoom message. Does not implicitly {@link TReqNotifyRemoveRoom.verify|verify} messages.\n                         * @param message TReqNotifyRemoveRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqNotifyRemoveRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqNotifyRemoveRoom message, length delimited. Does not implicitly {@link TReqNotifyRemoveRoom.verify|verify} messages.\n                         * @param message TReqNotifyRemoveRoom message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqNotifyRemoveRoom, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqNotifyRemoveRoom message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqNotifyRemoveRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqNotifyRemoveRoom;\n\n                        /**\n                         * Decodes a TReqNotifyRemoveRoom message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqNotifyRemoveRoom\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqNotifyRemoveRoom;\n\n                        /**\n                         * Verifies a TReqNotifyRemoveRoom message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqNotifyRemoveRoom message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqNotifyRemoveRoom\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqNotifyRemoveRoom;\n\n                        /**\n                         * Creates a plain object from a TReqNotifyRemoveRoom message. Also converts values to other types if specified.\n                         * @param message TReqNotifyRemoveRoom\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqNotifyRemoveRoom, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqNotifyRemoveRoom to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqFetchGameOpRecords. */\n                export interface ITReqFetchGameOpRecords {\n\n                        /** TReqFetchGameOpRecords opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqFetchGameOpRecords. */\n                export class TReqFetchGameOpRecords implements ITReqFetchGameOpRecords {\n\n                        /**\n                         * Constructs a new TReqFetchGameOpRecords.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqFetchGameOpRecords);\n\n                        /** TReqFetchGameOpRecords opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqFetchGameOpRecords instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqFetchGameOpRecords instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqFetchGameOpRecords): roomserver.TReqFetchGameOpRecords;\n\n                        /**\n                         * Encodes the specified TReqFetchGameOpRecords message. Does not implicitly {@link TReqFetchGameOpRecords.verify|verify} messages.\n                         * @param message TReqFetchGameOpRecords message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqFetchGameOpRecords, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqFetchGameOpRecords message, length delimited. Does not implicitly {@link TReqFetchGameOpRecords.verify|verify} messages.\n                         * @param message TReqFetchGameOpRecords message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqFetchGameOpRecords, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqFetchGameOpRecords message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqFetchGameOpRecords\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqFetchGameOpRecords;\n\n                        /**\n                         * Decodes a TReqFetchGameOpRecords message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqFetchGameOpRecords\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqFetchGameOpRecords;\n\n                        /**\n                         * Verifies a TReqFetchGameOpRecords message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqFetchGameOpRecords message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqFetchGameOpRecords\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqFetchGameOpRecords;\n\n                        /**\n                         * Creates a plain object from a TReqFetchGameOpRecords message. Also converts values to other types if specified.\n                         * @param message TReqFetchGameOpRecords\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqFetchGameOpRecords, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqFetchGameOpRecords to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TFetchGameOpRecordsResult. */\n                export interface ITFetchGameOpRecordsResult {\n\n                        /** TFetchGameOpRecordsResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TFetchGameOpRecordsResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TFetchGameOpRecordsResult syncOpRecords */\n                        syncOpRecords?: (ITReqBroadCastFrameSyncReq[] | null);\n                }\n\n                /** Represents a TFetchGameOpRecordsResult. */\n                export class TFetchGameOpRecordsResult implements ITFetchGameOpRecordsResult {\n\n                        /**\n                         * Constructs a new TFetchGameOpRecordsResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITFetchGameOpRecordsResult);\n\n                        /** TFetchGameOpRecordsResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TFetchGameOpRecordsResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TFetchGameOpRecordsResult syncOpRecords. */\n                        public syncOpRecords: ITReqBroadCastFrameSyncReq[];\n\n                        /**\n                         * Creates a new TFetchGameOpRecordsResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TFetchGameOpRecordsResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITFetchGameOpRecordsResult): roomserver.TFetchGameOpRecordsResult;\n\n                        /**\n                         * Encodes the specified TFetchGameOpRecordsResult message. Does not implicitly {@link TFetchGameOpRecordsResult.verify|verify} messages.\n                         * @param message TFetchGameOpRecordsResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITFetchGameOpRecordsResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TFetchGameOpRecordsResult message, length delimited. Does not implicitly {@link TFetchGameOpRecordsResult.verify|verify} messages.\n                         * @param message TFetchGameOpRecordsResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITFetchGameOpRecordsResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TFetchGameOpRecordsResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TFetchGameOpRecordsResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TFetchGameOpRecordsResult;\n\n                        /**\n                         * Decodes a TFetchGameOpRecordsResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TFetchGameOpRecordsResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TFetchGameOpRecordsResult;\n\n                        /**\n                         * Verifies a TFetchGameOpRecordsResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TFetchGameOpRecordsResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TFetchGameOpRecordsResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TFetchGameOpRecordsResult;\n\n                        /**\n                         * Creates a plain object from a TFetchGameOpRecordsResult message. Also converts values to other types if specified.\n                         * @param message TFetchGameOpRecordsResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TFetchGameOpRecordsResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TFetchGameOpRecordsResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqHeartBeat. */\n                export interface ITReqHeartBeat {\n\n                        /** TReqHeartBeat opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a TReqHeartBeat. */\n                export class TReqHeartBeat implements ITReqHeartBeat {\n\n                        /**\n                         * Constructs a new TReqHeartBeat.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqHeartBeat);\n\n                        /** TReqHeartBeat opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new TReqHeartBeat instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqHeartBeat instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqHeartBeat): roomserver.TReqHeartBeat;\n\n                        /**\n                         * Encodes the specified TReqHeartBeat message. Does not implicitly {@link TReqHeartBeat.verify|verify} messages.\n                         * @param message TReqHeartBeat message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqHeartBeat, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqHeartBeat message, length delimited. Does not implicitly {@link TReqHeartBeat.verify|verify} messages.\n                         * @param message TReqHeartBeat message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqHeartBeat, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqHeartBeat message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqHeartBeat\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqHeartBeat;\n\n                        /**\n                         * Decodes a TReqHeartBeat message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqHeartBeat\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqHeartBeat;\n\n                        /**\n                         * Verifies a TReqHeartBeat message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqHeartBeat message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqHeartBeat\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqHeartBeat;\n\n                        /**\n                         * Creates a plain object from a TReqHeartBeat message. Also converts values to other types if specified.\n                         * @param message TReqHeartBeat\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqHeartBeat, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqHeartBeat to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a THeartBeatResult. */\n                export interface ITHeartBeatResult {\n\n                        /** THeartBeatResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n                }\n\n                /** Represents a THeartBeatResult. */\n                export class THeartBeatResult implements ITHeartBeatResult {\n\n                        /**\n                         * Constructs a new THeartBeatResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITHeartBeatResult);\n\n                        /** THeartBeatResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /**\n                         * Creates a new THeartBeatResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns THeartBeatResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITHeartBeatResult): roomserver.THeartBeatResult;\n\n                        /**\n                         * Encodes the specified THeartBeatResult message. Does not implicitly {@link THeartBeatResult.verify|verify} messages.\n                         * @param message THeartBeatResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITHeartBeatResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified THeartBeatResult message, length delimited. Does not implicitly {@link THeartBeatResult.verify|verify} messages.\n                         * @param message THeartBeatResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITHeartBeatResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a THeartBeatResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns THeartBeatResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.THeartBeatResult;\n\n                        /**\n                         * Decodes a THeartBeatResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns THeartBeatResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.THeartBeatResult;\n\n                        /**\n                         * Verifies a THeartBeatResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a THeartBeatResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns THeartBeatResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.THeartBeatResult;\n\n                        /**\n                         * Creates a plain object from a THeartBeatResult message. Also converts values to other types if specified.\n                         * @param message THeartBeatResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.THeartBeatResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this THeartBeatResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomServerRegisterForMatcherServerInfo. */\n                export interface ITRoomServerRegisterForMatcherServerInfo {\n\n                        /** TRoomServerRegisterForMatcherServerInfo serverId */\n                        serverId?: (string | null);\n\n                        /** TRoomServerRegisterForMatcherServerInfo connId */\n                        connId?: (string | null);\n\n                        /** TRoomServerRegisterForMatcherServerInfo clientConnAddr */\n                        clientConnAddr?: (string | null);\n\n                        /** TRoomServerRegisterForMatcherServerInfo roomCount */\n                        roomCount?: (number | Long | null);\n                }\n\n                /** Represents a TRoomServerRegisterForMatcherServerInfo. */\n                export class TRoomServerRegisterForMatcherServerInfo implements ITRoomServerRegisterForMatcherServerInfo {\n\n                        /**\n                         * Constructs a new TRoomServerRegisterForMatcherServerInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomServerRegisterForMatcherServerInfo);\n\n                        /** TRoomServerRegisterForMatcherServerInfo serverId. */\n                        public serverId: string;\n\n                        /** TRoomServerRegisterForMatcherServerInfo connId. */\n                        public connId: string;\n\n                        /** TRoomServerRegisterForMatcherServerInfo clientConnAddr. */\n                        public clientConnAddr: string;\n\n                        /** TRoomServerRegisterForMatcherServerInfo roomCount. */\n                        public roomCount: (number | Long);\n\n                        /**\n                         * Creates a new TRoomServerRegisterForMatcherServerInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomServerRegisterForMatcherServerInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomServerRegisterForMatcherServerInfo): roomserver.TRoomServerRegisterForMatcherServerInfo;\n\n                        /**\n                         * Encodes the specified TRoomServerRegisterForMatcherServerInfo message. Does not implicitly {@link TRoomServerRegisterForMatcherServerInfo.verify|verify} messages.\n                         * @param message TRoomServerRegisterForMatcherServerInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomServerRegisterForMatcherServerInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomServerRegisterForMatcherServerInfo message, length delimited. Does not implicitly {@link TRoomServerRegisterForMatcherServerInfo.verify|verify} messages.\n                         * @param message TRoomServerRegisterForMatcherServerInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomServerRegisterForMatcherServerInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomServerRegisterForMatcherServerInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomServerRegisterForMatcherServerInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomServerRegisterForMatcherServerInfo;\n\n                        /**\n                         * Decodes a TRoomServerRegisterForMatcherServerInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomServerRegisterForMatcherServerInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomServerRegisterForMatcherServerInfo;\n\n                        /**\n                         * Verifies a TRoomServerRegisterForMatcherServerInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomServerRegisterForMatcherServerInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomServerRegisterForMatcherServerInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomServerRegisterForMatcherServerInfo;\n\n                        /**\n                         * Creates a plain object from a TRoomServerRegisterForMatcherServerInfo message. Also converts values to other types if specified.\n                         * @param message TRoomServerRegisterForMatcherServerInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomServerRegisterForMatcherServerInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomServerRegisterForMatcherServerInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomServerRegisterForMatcherServerResult. */\n                export interface ITRoomServerRegisterForMatcherServerResult {\n\n                        /** TRoomServerRegisterForMatcherServerResult indicate */\n                        indicate?: (ITResultIndicate | null);\n                }\n\n                /** Represents a TRoomServerRegisterForMatcherServerResult. */\n                export class TRoomServerRegisterForMatcherServerResult implements ITRoomServerRegisterForMatcherServerResult {\n\n                        /**\n                         * Constructs a new TRoomServerRegisterForMatcherServerResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomServerRegisterForMatcherServerResult);\n\n                        /** TRoomServerRegisterForMatcherServerResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /**\n                         * Creates a new TRoomServerRegisterForMatcherServerResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomServerRegisterForMatcherServerResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomServerRegisterForMatcherServerResult): roomserver.TRoomServerRegisterForMatcherServerResult;\n\n                        /**\n                         * Encodes the specified TRoomServerRegisterForMatcherServerResult message. Does not implicitly {@link TRoomServerRegisterForMatcherServerResult.verify|verify} messages.\n                         * @param message TRoomServerRegisterForMatcherServerResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomServerRegisterForMatcherServerResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomServerRegisterForMatcherServerResult message, length delimited. Does not implicitly {@link TRoomServerRegisterForMatcherServerResult.verify|verify} messages.\n                         * @param message TRoomServerRegisterForMatcherServerResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomServerRegisterForMatcherServerResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomServerRegisterForMatcherServerResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomServerRegisterForMatcherServerResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomServerRegisterForMatcherServerResult;\n\n                        /**\n                         * Decodes a TRoomServerRegisterForMatcherServerResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomServerRegisterForMatcherServerResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomServerRegisterForMatcherServerResult;\n\n                        /**\n                         * Verifies a TRoomServerRegisterForMatcherServerResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomServerRegisterForMatcherServerResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomServerRegisterForMatcherServerResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomServerRegisterForMatcherServerResult;\n\n                        /**\n                         * Creates a plain object from a TRoomServerRegisterForMatcherServerResult message. Also converts values to other types if specified.\n                         * @param message TRoomServerRegisterForMatcherServerResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomServerRegisterForMatcherServerResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomServerRegisterForMatcherServerResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomServerUnregisterForMatcherServerInfo. */\n                export interface ITRoomServerUnregisterForMatcherServerInfo {\n\n                        /** TRoomServerUnregisterForMatcherServerInfo serverId */\n                        serverId?: (string | null);\n\n                        /** TRoomServerUnregisterForMatcherServerInfo connId */\n                        connId?: (string | null);\n\n                        /** TRoomServerUnregisterForMatcherServerInfo clientConnAddr */\n                        clientConnAddr?: (string | null);\n                }\n\n                /** Represents a TRoomServerUnregisterForMatcherServerInfo. */\n                export class TRoomServerUnregisterForMatcherServerInfo implements ITRoomServerUnregisterForMatcherServerInfo {\n\n                        /**\n                         * Constructs a new TRoomServerUnregisterForMatcherServerInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomServerUnregisterForMatcherServerInfo);\n\n                        /** TRoomServerUnregisterForMatcherServerInfo serverId. */\n                        public serverId: string;\n\n                        /** TRoomServerUnregisterForMatcherServerInfo connId. */\n                        public connId: string;\n\n                        /** TRoomServerUnregisterForMatcherServerInfo clientConnAddr. */\n                        public clientConnAddr: string;\n\n                        /**\n                         * Creates a new TRoomServerUnregisterForMatcherServerInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomServerUnregisterForMatcherServerInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomServerUnregisterForMatcherServerInfo): roomserver.TRoomServerUnregisterForMatcherServerInfo;\n\n                        /**\n                         * Encodes the specified TRoomServerUnregisterForMatcherServerInfo message. Does not implicitly {@link TRoomServerUnregisterForMatcherServerInfo.verify|verify} messages.\n                         * @param message TRoomServerUnregisterForMatcherServerInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomServerUnregisterForMatcherServerInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomServerUnregisterForMatcherServerInfo message, length delimited. Does not implicitly {@link TRoomServerUnregisterForMatcherServerInfo.verify|verify} messages.\n                         * @param message TRoomServerUnregisterForMatcherServerInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomServerUnregisterForMatcherServerInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomServerUnregisterForMatcherServerInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomServerUnregisterForMatcherServerInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomServerUnregisterForMatcherServerInfo;\n\n                        /**\n                         * Decodes a TRoomServerUnregisterForMatcherServerInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomServerUnregisterForMatcherServerInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomServerUnregisterForMatcherServerInfo;\n\n                        /**\n                         * Verifies a TRoomServerUnregisterForMatcherServerInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomServerUnregisterForMatcherServerInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomServerUnregisterForMatcherServerInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomServerUnregisterForMatcherServerInfo;\n\n                        /**\n                         * Creates a plain object from a TRoomServerUnregisterForMatcherServerInfo message. Also converts values to other types if specified.\n                         * @param message TRoomServerUnregisterForMatcherServerInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomServerUnregisterForMatcherServerInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomServerUnregisterForMatcherServerInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoomServerUnregisterForMatcherServerResult. */\n                export interface ITRoomServerUnregisterForMatcherServerResult {\n\n                        /** TRoomServerUnregisterForMatcherServerResult indicate */\n                        indicate?: (ITResultIndicate | null);\n                }\n\n                /** Represents a TRoomServerUnregisterForMatcherServerResult. */\n                export class TRoomServerUnregisterForMatcherServerResult implements ITRoomServerUnregisterForMatcherServerResult {\n\n                        /**\n                         * Constructs a new TRoomServerUnregisterForMatcherServerResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoomServerUnregisterForMatcherServerResult);\n\n                        /** TRoomServerUnregisterForMatcherServerResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /**\n                         * Creates a new TRoomServerUnregisterForMatcherServerResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoomServerUnregisterForMatcherServerResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoomServerUnregisterForMatcherServerResult): roomserver.TRoomServerUnregisterForMatcherServerResult;\n\n                        /**\n                         * Encodes the specified TRoomServerUnregisterForMatcherServerResult message. Does not implicitly {@link TRoomServerUnregisterForMatcherServerResult.verify|verify} messages.\n                         * @param message TRoomServerUnregisterForMatcherServerResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoomServerUnregisterForMatcherServerResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoomServerUnregisterForMatcherServerResult message, length delimited. Does not implicitly {@link TRoomServerUnregisterForMatcherServerResult.verify|verify} messages.\n                         * @param message TRoomServerUnregisterForMatcherServerResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoomServerUnregisterForMatcherServerResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoomServerUnregisterForMatcherServerResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoomServerUnregisterForMatcherServerResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoomServerUnregisterForMatcherServerResult;\n\n                        /**\n                         * Decodes a TRoomServerUnregisterForMatcherServerResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoomServerUnregisterForMatcherServerResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoomServerUnregisterForMatcherServerResult;\n\n                        /**\n                         * Verifies a TRoomServerUnregisterForMatcherServerResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoomServerUnregisterForMatcherServerResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoomServerUnregisterForMatcherServerResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoomServerUnregisterForMatcherServerResult;\n\n                        /**\n                         * Creates a plain object from a TRoomServerUnregisterForMatcherServerResult message. Also converts values to other types if specified.\n                         * @param message TRoomServerUnregisterForMatcherServerResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoomServerUnregisterForMatcherServerResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoomServerUnregisterForMatcherServerResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqDownloadProto. */\n                export interface ITReqDownloadProto {\n\n                        /** TReqDownloadProto protoVersion */\n                        protoVersion?: (number | null);\n\n                        /** TReqDownloadProto force */\n                        force?: (boolean | null);\n                }\n\n                /** Represents a TReqDownloadProto. */\n                export class TReqDownloadProto implements ITReqDownloadProto {\n\n                        /**\n                         * Constructs a new TReqDownloadProto.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqDownloadProto);\n\n                        /** TReqDownloadProto protoVersion. */\n                        public protoVersion: number;\n\n                        /** TReqDownloadProto force. */\n                        public force: boolean;\n\n                        /**\n                         * Creates a new TReqDownloadProto instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqDownloadProto instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqDownloadProto): roomserver.TReqDownloadProto;\n\n                        /**\n                         * Encodes the specified TReqDownloadProto message. Does not implicitly {@link TReqDownloadProto.verify|verify} messages.\n                         * @param message TReqDownloadProto message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqDownloadProto, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqDownloadProto message, length delimited. Does not implicitly {@link TReqDownloadProto.verify|verify} messages.\n                         * @param message TReqDownloadProto message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqDownloadProto, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqDownloadProto message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqDownloadProto\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqDownloadProto;\n\n                        /**\n                         * Decodes a TReqDownloadProto message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqDownloadProto\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqDownloadProto;\n\n                        /**\n                         * Verifies a TReqDownloadProto message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqDownloadProto message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqDownloadProto\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqDownloadProto;\n\n                        /**\n                         * Creates a plain object from a TReqDownloadProto message. Also converts values to other types if specified.\n                         * @param message TReqDownloadProto\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqDownloadProto, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqDownloadProto to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TProtoInfo. */\n                export interface ITProtoInfo {\n\n                        /** TProtoInfo version */\n                        version?: (number | null);\n\n                        /** TProtoInfo content */\n                        content?: (string | null);\n                }\n\n                /** Represents a TProtoInfo. */\n                export class TProtoInfo implements ITProtoInfo {\n\n                        /**\n                         * Constructs a new TProtoInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITProtoInfo);\n\n                        /** TProtoInfo version. */\n                        public version: number;\n\n                        /** TProtoInfo content. */\n                        public content: string;\n\n                        /**\n                         * Creates a new TProtoInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TProtoInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITProtoInfo): roomserver.TProtoInfo;\n\n                        /**\n                         * Encodes the specified TProtoInfo message. Does not implicitly {@link TProtoInfo.verify|verify} messages.\n                         * @param message TProtoInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITProtoInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TProtoInfo message, length delimited. Does not implicitly {@link TProtoInfo.verify|verify} messages.\n                         * @param message TProtoInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITProtoInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TProtoInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TProtoInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TProtoInfo;\n\n                        /**\n                         * Decodes a TProtoInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TProtoInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TProtoInfo;\n\n                        /**\n                         * Verifies a TProtoInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TProtoInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TProtoInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TProtoInfo;\n\n                        /**\n                         * Creates a plain object from a TProtoInfo message. Also converts values to other types if specified.\n                         * @param message TProtoInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TProtoInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TProtoInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TDownloadProtoResult. */\n                export interface ITDownloadProtoResult {\n\n                        /** TDownloadProtoResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TDownloadProtoResult protoInfo */\n                        protoInfo?: (ITProtoInfo | null);\n                }\n\n                /** Represents a TDownloadProtoResult. */\n                export class TDownloadProtoResult implements ITDownloadProtoResult {\n\n                        /**\n                         * Constructs a new TDownloadProtoResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITDownloadProtoResult);\n\n                        /** TDownloadProtoResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TDownloadProtoResult protoInfo. */\n                        public protoInfo?: (ITProtoInfo | null);\n\n                        /**\n                         * Creates a new TDownloadProtoResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TDownloadProtoResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITDownloadProtoResult): roomserver.TDownloadProtoResult;\n\n                        /**\n                         * Encodes the specified TDownloadProtoResult message. Does not implicitly {@link TDownloadProtoResult.verify|verify} messages.\n                         * @param message TDownloadProtoResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITDownloadProtoResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TDownloadProtoResult message, length delimited. Does not implicitly {@link TDownloadProtoResult.verify|verify} messages.\n                         * @param message TDownloadProtoResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITDownloadProtoResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TDownloadProtoResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TDownloadProtoResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TDownloadProtoResult;\n\n                        /**\n                         * Decodes a TDownloadProtoResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TDownloadProtoResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TDownloadProtoResult;\n\n                        /**\n                         * Verifies a TDownloadProtoResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TDownloadProtoResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TDownloadProtoResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TDownloadProtoResult;\n\n                        /**\n                         * Creates a plain object from a TDownloadProtoResult message. Also converts values to other types if specified.\n                         * @param message TDownloadProtoResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TDownloadProtoResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TDownloadProtoResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRoleNetworkInfo. */\n                export interface ITRoleNetworkInfo {\n\n                        /** TRoleNetworkInfo roomNetworkState */\n                        roomNetworkState?: (number | null);\n\n                        /** TRoleNetworkInfo relayNetworkState */\n                        relayNetworkState?: (number | null);\n                }\n\n                /** Represents a TRoleNetworkInfo. */\n                export class TRoleNetworkInfo implements ITRoleNetworkInfo {\n\n                        /**\n                         * Constructs a new TRoleNetworkInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRoleNetworkInfo);\n\n                        /** TRoleNetworkInfo roomNetworkState. */\n                        public roomNetworkState: number;\n\n                        /** TRoleNetworkInfo relayNetworkState. */\n                        public relayNetworkState: number;\n\n                        /**\n                         * Creates a new TRoleNetworkInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRoleNetworkInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITRoleNetworkInfo): roomserver.TRoleNetworkInfo;\n\n                        /**\n                         * Encodes the specified TRoleNetworkInfo message. Does not implicitly {@link TRoleNetworkInfo.verify|verify} messages.\n                         * @param message TRoleNetworkInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRoleNetworkInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRoleNetworkInfo message, length delimited. Does not implicitly {@link TRoleNetworkInfo.verify|verify} messages.\n                         * @param message TRoleNetworkInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRoleNetworkInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRoleNetworkInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRoleNetworkInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRoleNetworkInfo;\n\n                        /**\n                         * Decodes a TRoleNetworkInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRoleNetworkInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRoleNetworkInfo;\n\n                        /**\n                         * Verifies a TRoleNetworkInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRoleNetworkInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRoleNetworkInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRoleNetworkInfo;\n\n                        /**\n                         * Creates a plain object from a TRoleNetworkInfo message. Also converts values to other types if specified.\n                         * @param message TRoleNetworkInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRoleNetworkInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRoleNetworkInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TChangeMemberNetworkStateResult. */\n                export interface ITChangeMemberNetworkStateResult {\n\n                        /** TChangeMemberNetworkStateResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TChangeMemberNetworkStateResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TChangeMemberNetworkStateResult networkInfo */\n                        networkInfo?: (ITRoleNetworkInfo | null);\n                }\n\n                /** Represents a TChangeMemberNetworkStateResult. */\n                export class TChangeMemberNetworkStateResult implements ITChangeMemberNetworkStateResult {\n\n                        /**\n                         * Constructs a new TChangeMemberNetworkStateResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITChangeMemberNetworkStateResult);\n\n                        /** TChangeMemberNetworkStateResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TChangeMemberNetworkStateResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TChangeMemberNetworkStateResult networkInfo. */\n                        public networkInfo?: (ITRoleNetworkInfo | null);\n\n                        /**\n                         * Creates a new TChangeMemberNetworkStateResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TChangeMemberNetworkStateResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITChangeMemberNetworkStateResult): roomserver.TChangeMemberNetworkStateResult;\n\n                        /**\n                         * Encodes the specified TChangeMemberNetworkStateResult message. Does not implicitly {@link TChangeMemberNetworkStateResult.verify|verify} messages.\n                         * @param message TChangeMemberNetworkStateResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITChangeMemberNetworkStateResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TChangeMemberNetworkStateResult message, length delimited. Does not implicitly {@link TChangeMemberNetworkStateResult.verify|verify} messages.\n                         * @param message TChangeMemberNetworkStateResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITChangeMemberNetworkStateResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TChangeMemberNetworkStateResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TChangeMemberNetworkStateResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TChangeMemberNetworkStateResult;\n\n                        /**\n                         * Decodes a TChangeMemberNetworkStateResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TChangeMemberNetworkStateResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TChangeMemberNetworkStateResult;\n\n                        /**\n                         * Verifies a TChangeMemberNetworkStateResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TChangeMemberNetworkStateResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TChangeMemberNetworkStateResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TChangeMemberNetworkStateResult;\n\n                        /**\n                         * Creates a plain object from a TChangeMemberNetworkStateResult message. Also converts values to other types if specified.\n                         * @param message TChangeMemberNetworkStateResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TChangeMemberNetworkStateResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TChangeMemberNetworkStateResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TChangeCustomPlayerStatus. */\n                export interface ITChangeCustomPlayerStatus {\n                }\n\n                /** Represents a TChangeCustomPlayerStatus. */\n                export class TChangeCustomPlayerStatus implements ITChangeCustomPlayerStatus {\n\n                        /**\n                         * Constructs a new TChangeCustomPlayerStatus.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITChangeCustomPlayerStatus);\n\n                        /**\n                         * Creates a new TChangeCustomPlayerStatus instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TChangeCustomPlayerStatus instance\n                         */\n                        //        public static create(properties?: roomserver.ITChangeCustomPlayerStatus): roomserver.TChangeCustomPlayerStatus;\n\n                        /**\n                         * Encodes the specified TChangeCustomPlayerStatus message. Does not implicitly {@link TChangeCustomPlayerStatus.verify|verify} messages.\n                         * @param message TChangeCustomPlayerStatus message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITChangeCustomPlayerStatus, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TChangeCustomPlayerStatus message, length delimited. Does not implicitly {@link TChangeCustomPlayerStatus.verify|verify} messages.\n                         * @param message TChangeCustomPlayerStatus message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITChangeCustomPlayerStatus, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TChangeCustomPlayerStatus message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TChangeCustomPlayerStatus\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TChangeCustomPlayerStatus;\n\n                        /**\n                         * Decodes a TChangeCustomPlayerStatus message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TChangeCustomPlayerStatus\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TChangeCustomPlayerStatus;\n\n                        /**\n                         * Verifies a TChangeCustomPlayerStatus message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TChangeCustomPlayerStatus message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TChangeCustomPlayerStatus\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TChangeCustomPlayerStatus;\n\n                        /**\n                         * Creates a plain object from a TChangeCustomPlayerStatus message. Also converts values to other types if specified.\n                         * @param message TChangeCustomPlayerStatus\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TChangeCustomPlayerStatus, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TChangeCustomPlayerStatus to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqFrameRecordsInfo. */\n                export interface ITReqFrameRecordsInfo {\n\n                        /** TReqFrameRecordsInfo beginFrame */\n                        beginFrame?: (number | null);\n\n                        /** TReqFrameRecordsInfo endFrame */\n                        endFrame?: (number | null);\n                }\n\n                /** Represents a TReqFrameRecordsInfo. */\n                export class TReqFrameRecordsInfo implements ITReqFrameRecordsInfo {\n\n                        /**\n                         * Constructs a new TReqFrameRecordsInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqFrameRecordsInfo);\n\n                        /** TReqFrameRecordsInfo beginFrame. */\n                        public beginFrame: number;\n\n                        /** TReqFrameRecordsInfo endFrame. */\n                        public endFrame: number;\n\n                        /**\n                         * Creates a new TReqFrameRecordsInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqFrameRecordsInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqFrameRecordsInfo): roomserver.TReqFrameRecordsInfo;\n\n                        /**\n                         * Encodes the specified TReqFrameRecordsInfo message. Does not implicitly {@link TReqFrameRecordsInfo.verify|verify} messages.\n                         * @param message TReqFrameRecordsInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqFrameRecordsInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqFrameRecordsInfo message, length delimited. Does not implicitly {@link TReqFrameRecordsInfo.verify|verify} messages.\n                         * @param message TReqFrameRecordsInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqFrameRecordsInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqFrameRecordsInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqFrameRecordsInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqFrameRecordsInfo;\n\n                        /**\n                         * Decodes a TReqFrameRecordsInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqFrameRecordsInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqFrameRecordsInfo;\n\n                        /**\n                         * Verifies a TReqFrameRecordsInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqFrameRecordsInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqFrameRecordsInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqFrameRecordsInfo;\n\n                        /**\n                         * Creates a plain object from a TReqFrameRecordsInfo message. Also converts values to other types if specified.\n                         * @param message TReqFrameRecordsInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqFrameRecordsInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqFrameRecordsInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TReqFrameRecordsResult. */\n                export interface ITReqFrameRecordsResult {\n\n                        /** TReqFrameRecordsResult indicate */\n                        indicate?: (ITResultIndicate | null);\n\n                        /** TReqFrameRecordsResult opInfo */\n                        opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqFrameRecordsResult messages */\n                        messages?: (ITReqBroadCastFrameSyncReq[] | null);\n                }\n\n                /** Represents a TReqFrameRecordsResult. */\n                export class TReqFrameRecordsResult implements ITReqFrameRecordsResult {\n\n                        /**\n                         * Constructs a new TReqFrameRecordsResult.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITReqFrameRecordsResult);\n\n                        /** TReqFrameRecordsResult indicate. */\n                        public indicate?: (ITResultIndicate | null);\n\n                        /** TReqFrameRecordsResult opInfo. */\n                        public opInfo?: (ITRoomUserOpInfo | null);\n\n                        /** TReqFrameRecordsResult messages. */\n                        public messages: ITReqBroadCastFrameSyncReq[];\n\n                        /**\n                         * Creates a new TReqFrameRecordsResult instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TReqFrameRecordsResult instance\n                         */\n                        //        public static create(properties?: roomserver.ITReqFrameRecordsResult): roomserver.TReqFrameRecordsResult;\n\n                        /**\n                         * Encodes the specified TReqFrameRecordsResult message. Does not implicitly {@link TReqFrameRecordsResult.verify|verify} messages.\n                         * @param message TReqFrameRecordsResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITReqFrameRecordsResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TReqFrameRecordsResult message, length delimited. Does not implicitly {@link TReqFrameRecordsResult.verify|verify} messages.\n                         * @param message TReqFrameRecordsResult message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITReqFrameRecordsResult, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TReqFrameRecordsResult message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TReqFrameRecordsResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TReqFrameRecordsResult;\n\n                        /**\n                         * Decodes a TReqFrameRecordsResult message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TReqFrameRecordsResult\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TReqFrameRecordsResult;\n\n                        /**\n                         * Verifies a TReqFrameRecordsResult message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TReqFrameRecordsResult message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TReqFrameRecordsResult\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TReqFrameRecordsResult;\n\n                        /**\n                         * Creates a plain object from a TReqFrameRecordsResult message. Also converts values to other types if specified.\n                         * @param message TReqFrameRecordsResult\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TReqFrameRecordsResult, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TReqFrameRecordsResult to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TActorMoveInfo. */\n                export interface ITActorMoveInfo {\n\n                        /** TActorMoveInfo x */\n                        x?: (number | null);\n\n                        /** TActorMoveInfo y */\n                        y?: (number | null);\n\n                        /** TActorMoveInfo actorId */\n                        actorId?: (string | null);\n                }\n\n                /** Represents a TActorMoveInfo. */\n                export class TActorMoveInfo implements ITActorMoveInfo {\n\n                        /**\n                         * Constructs a new TActorMoveInfo.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITActorMoveInfo);\n\n                        /** TActorMoveInfo x. */\n                        public x: number;\n\n                        /** TActorMoveInfo y. */\n                        public y: number;\n\n                        /** TActorMoveInfo actorId. */\n                        public actorId: string;\n\n                        /**\n                         * Creates a new TActorMoveInfo instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TActorMoveInfo instance\n                         */\n                        //        public static create(properties?: roomserver.ITActorMoveInfo): roomserver.TActorMoveInfo;\n\n                        /**\n                         * Encodes the specified TActorMoveInfo message. Does not implicitly {@link TActorMoveInfo.verify|verify} messages.\n                         * @param message TActorMoveInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITActorMoveInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TActorMoveInfo message, length delimited. Does not implicitly {@link TActorMoveInfo.verify|verify} messages.\n                         * @param message TActorMoveInfo message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITActorMoveInfo, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TActorMoveInfo message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TActorMoveInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TActorMoveInfo;\n\n                        /**\n                         * Decodes a TActorMoveInfo message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TActorMoveInfo\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TActorMoveInfo;\n\n                        /**\n                         * Verifies a TActorMoveInfo message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TActorMoveInfo message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TActorMoveInfo\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TActorMoveInfo;\n\n                        /**\n                         * Creates a plain object from a TActorMoveInfo message. Also converts values to other types if specified.\n                         * @param message TActorMoveInfo\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TActorMoveInfo, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TActorMoveInfo to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n\n                /** Properties of a TRPGPlayerCmd. */\n                export interface ITRPGPlayerCmd {\n\n                        /** TRPGPlayerCmd roleId */\n                        roleId?: (number | null);\n\n                        /** TRPGPlayerCmd cmdId */\n                        cmdId?: (number | null);\n\n                        /** TRPGPlayerCmd createTime */\n                        createTime?: (number | Long | null);\n\n                        /** TRPGPlayerCmd createFrameCount */\n                        createFrameCount?: (number | null);\n\n                        /** TRPGPlayerCmd frameCount */\n                        frameCount?: (number | null);\n\n                        /** TRPGPlayerCmd cmdIndex */\n                        cmdIndex?: (number | null);\n\n                        /** TRPGPlayerCmd cmdFlags */\n                        cmdFlags?: (number | Long | null);\n\n                        /** TRPGPlayerCmd move */\n                        move?: (ITActorMoveInfo | null);\n                }\n\n                /** Represents a TRPGPlayerCmd. */\n                export class TRPGPlayerCmd implements ITRPGPlayerCmd {\n\n                        /**\n                         * Constructs a new TRPGPlayerCmd.\n                         * @param [properties] Properties to set\n                         */\n                        //        constructor(properties?: roomserver.ITRPGPlayerCmd);\n\n                        /** TRPGPlayerCmd roleId. */\n                        public roleId: number;\n\n                        /** TRPGPlayerCmd cmdId. */\n                        public cmdId: number;\n\n                        /** TRPGPlayerCmd createTime. */\n                        public createTime: (number | Long);\n\n                        /** TRPGPlayerCmd createFrameCount. */\n                        public createFrameCount: number;\n\n                        /** TRPGPlayerCmd frameCount. */\n                        public frameCount: number;\n\n                        /** TRPGPlayerCmd cmdIndex. */\n                        public cmdIndex: number;\n\n                        /** TRPGPlayerCmd cmdFlags. */\n                        public cmdFlags: (number | Long);\n\n                        /** TRPGPlayerCmd move. */\n                        public move?: (ITActorMoveInfo | null);\n\n                        /**\n                         * Creates a new TRPGPlayerCmd instance using the specified properties.\n                         * @param [properties] Properties to set\n                         * @returns TRPGPlayerCmd instance\n                         */\n                        //        public static create(properties?: roomserver.ITRPGPlayerCmd): roomserver.TRPGPlayerCmd;\n\n                        /**\n                         * Encodes the specified TRPGPlayerCmd message. Does not implicitly {@link TRPGPlayerCmd.verify|verify} messages.\n                         * @param message TRPGPlayerCmd message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encode(message: roomserver.ITRPGPlayerCmd, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Encodes the specified TRPGPlayerCmd message, length delimited. Does not implicitly {@link TRPGPlayerCmd.verify|verify} messages.\n                         * @param message TRPGPlayerCmd message or plain object to encode\n                         * @param [writer] Writer to encode to\n                         * @returns Writer\n                         */\n                        //        public static encodeDelimited(message: roomserver.ITRPGPlayerCmd, writer?: $protobuf.Writer): $protobuf.Writer;\n\n                        /**\n                         * Decodes a TRPGPlayerCmd message from the specified reader or buffer.\n                         * @param reader Reader or buffer to decode from\n                         * @param [length] Message length if known beforehand\n                         * @returns TRPGPlayerCmd\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decode(reader: ($protobuf.Reader|Uint8Array), length?: number): roomserver.TRPGPlayerCmd;\n\n                        /**\n                         * Decodes a TRPGPlayerCmd message from the specified reader or buffer, length delimited.\n                         * @param reader Reader or buffer to decode from\n                         * @returns TRPGPlayerCmd\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        //        public static decodeDelimited(reader: ($protobuf.Reader|Uint8Array)): roomserver.TRPGPlayerCmd;\n\n                        /**\n                         * Verifies a TRPGPlayerCmd message.\n                         * @param message Plain object to verify\n                         * @returns `null` if valid, otherwise the reason why it is not\n                         */\n                        //        public static verify(message: { [k: string]: any }): (string|null);\n\n                        /**\n                         * Creates a TRPGPlayerCmd message from a plain object. Also converts values to their respective internal types.\n                         * @param object Plain object\n                         * @returns TRPGPlayerCmd\n                         */\n                        //        public static fromObject(object: { [k: string]: any }): roomserver.TRPGPlayerCmd;\n\n                        /**\n                         * Creates a plain object from a TRPGPlayerCmd message. Also converts values to other types if specified.\n                         * @param message TRPGPlayerCmd\n                         * @param [options] Conversion options\n                         * @returns Plain object\n                         */\n                        //        public static toObject(message: roomserver.TRPGPlayerCmd, options?: $protobuf.IConversionOptions): { [k: string]: any };\n\n                        /**\n                         * Converts this TRPGPlayerCmd to JSON.\n                         * @returns JSON object\n                         */\n                        //        public toJSON(): { [k: string]: any };\n                }\n        }\n\n}\n","\r\nnamespace fsync.network.roomclient.mgobe {\r\n\r\n\r\n\texport enum TRoomMsgEnum {\r\n\t\troommsg = \"roommsg\",\r\n\t\tleaveroom = \"leaveroom\",\r\n\t\tenterroom = \"enterroom\",\r\n\t\tchangeroom = \"changeroom\",\r\n\t\tprepareready = \"prepareready\",\r\n\t\tstartgame = \"startgame\",\r\n\t\tdetoryroom = \"detoryroom\",\r\n\t\tchangedmembernetowrk = \"changedmembernetowrk\",\r\n\t\tframemsg = \"framemsg\",\r\n\t\tstartframesync = \"startframesync\",\r\n\t\tstopframesync = \"stopframesync\"\r\n\t}\r\n\r\n\texport class TRoomProtoHelper {\r\n\t\tgetLocalPlayerIdInRoom(roomInfo: MGOBE.types.RoomInfo, serverRoleId: string): string {\r\n\t\t\tif (!roomInfo) {\r\n\t\t\t\treturn \"\"\r\n\t\t\t}\r\n\r\n\t\t\tlet playerInfo = roomInfo.playerList.find(player => player.id == serverRoleId)\r\n\t\t\tlet roleId = playerInfo ? playerInfo.customProfile : \"\"\r\n\t\t\treturn roleId\r\n\t\t}\r\n\r\n\t\tgetFrameInfo(frame: MGOBE.types.Frame, item: MGOBE.types.FrameItem): roomserver.TReqBroadCastFrameSyncReq {\r\n\t\t\tconst result = new roomserver.TReqBroadCastFrameSyncReq()\r\n\r\n\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\tresult.opInfo.serverRoleId = item.playerId\r\n\t\t\tresult.opInfo.roomId = frame.roomId\r\n\r\n\t\t\tresult.syncInfo = new roomserver.TFrameSyncInfo()\r\n\t\t\tresult.syncInfo.clientTime = item.timestamp\r\n\t\t\tresult.syncInfo.serverTime = frame.time\r\n\t\t\tresult.syncInfo.clientLerpTime = frame.time\r\n\t\t\tresult.syncInfo.serverFrameCount = frame.id\r\n\t\t\tresult.syncInfo.randomSeed = frame.ext.seed\r\n\t\t\tresult.syncInfo.isReplay = frame.isReplay\r\n\r\n\t\t\t// console.log(\"frame.seed:\", frame.ext.seed)\r\n\t\t\t// console.log(\"frame:\", frame.time, frame.id)\r\n\r\n\t\t\tconst frameData = item.data as {\r\n\t\t\t\tm: string,\r\n\t\t\t}\r\n\t\t\tlet str = frameData.m\r\n\t\t\tlet head = str[0]\r\n\t\t\tlet bodyStr = str.slice(1)\r\n\t\t\tlet bodyBytes = base91.decode(bodyStr)\r\n\t\t\tlet realMsgBytes = bodyBytes\r\n\t\t\tif (head == 'e') {\r\n\t\t\t\trealMsgBytes = pako.inflateRaw(bodyBytes)\r\n\t\t\t}\r\n\t\t\tresult.msgBytes = realMsgBytes\r\n\r\n\t\t\t// const bs = []\r\n\t\t\t// for (let key in frameData.msgBytes) {\r\n\t\t\t// \tif (key != null) {\r\n\t\t\t// \t\tbs.push(frameData.msgBytes[key])\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\t\t// const bs2 = Uint8Array.from(bs)\r\n\t\t\t// result.msgBytes = bs2\r\n\r\n\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\tgetIndicate(evt: MGOBE.types.ResponseEvent<any>) {\r\n\t\t\tlet indicate = new roomserver.TResultIndicate()\r\n\t\t\tindicate.ok = (evt.code == MGOBE.ErrCode.EC_OK)\r\n\t\t\tindicate.err = new roomserver.TErrorInfo()\r\n\t\t\tindicate.err.code = evt.code\r\n\t\t\tindicate.err.message = evt.msg\r\n\t\t\tindicate.err.reason = evt.msg\r\n\r\n\t\t\treturn indicate\r\n\t\t}\r\n\r\n\t\tgetOkIndicate() {\r\n\t\t\tlet indicate = new roomserver.TResultIndicate()\r\n\t\t\tindicate.ok = true\r\n\t\t\tindicate.err = new roomserver.TErrorInfo()\r\n\t\t\tindicate.err.code = MGOBE.ErrCode.EC_OK\r\n\t\t\tindicate.err.message = \"\"\r\n\t\t\tindicate.err.reason = \"\"\r\n\r\n\t\t\treturn indicate\r\n\t\t}\r\n\r\n\t\tgetOpInfo(roleInfo: roomserver.TRoleInfo, roomInfo: MGOBE.types.RoomInfo) {\r\n\t\t\tconst opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\topInfo.serverRoleId = roleInfo.basicInfo.serverRoleId\r\n\t\t\topInfo.roleId = RoomProtoHelper.getLocalPlayerIdInRoom(roomInfo, roleInfo.basicInfo.serverRoleId)\r\n\t\t\tif (roomInfo) {\r\n\t\t\t\topInfo.roomId = roomInfo.id\r\n\t\t\t}\r\n\t\t\treturn opInfo\r\n\t\t}\r\n\r\n\t\tcloneOpInfo(opInfo: roomserver.ITRoomUserOpInfo) {\r\n\t\t\tlet opInfo2 = new roomserver.TRoomUserOpInfo()\r\n\t\t\topInfo2.serverRoleId = opInfo.serverRoleId\r\n\t\t\topInfo2.roomId = opInfo.roomId\r\n\t\t\topInfo2.roleId = opInfo.roleId\r\n\t\t\treturn opInfo2\r\n\t\t}\r\n\r\n\t\tgetRoomInfo(roomInfoRaw: MGOBE.types.RoomInfo) {\r\n\t\t\tlet roomModel = new roomserver.TRoomModel()\r\n\r\n\t\t\troomModel.basicInfo = new roomserver.TRoomBasic()\r\n\t\t\troomModel.basicInfo.roomId = roomInfoRaw.id\r\n\t\t\troomModel.basicInfo.createTime = roomInfoRaw.createTime\r\n\t\t\troomModel.basicInfo.connAddr = \"\"\r\n\t\t\troomModel.basicInfo.uuid = \"\"\r\n\t\t\troomModel.basicInfo.createType = roomInfoRaw.createType\r\n\r\n\t\t\troomModel.gameState = new roomserver.TRoomGameState()\r\n\t\t\troomModel.gameState.startTime = roomInfoRaw.startGameTime * 1000\r\n\t\t\troomModel.gameState.gameSessionId = 0\r\n\t\t\troomModel.gameState.isPlaying = (roomInfoRaw.frameSyncState == MGOBE.types.FrameSyncState.START)\r\n\t\t\troomModel.gameState.randomSeed = roomModel.basicInfo.createTime * 1000\r\n\r\n\t\t\troomModel.gameInfo = new roomserver.TRoomGameInfo()\r\n\t\t\troomModel.gameInfo.frameDuration = 1 / roomInfoRaw.frameRate\r\n\t\t\troomModel.gameInfo.gameMode = -1\r\n\t\t\troomModel.gameInfo.matchTimeout = 0\r\n\t\t\troomModel.gameInfo.roleCount = roomInfoRaw.maxPlayers\r\n\r\n\t\t\troomModel.roomSettings = new roomserver.TRoomSettings()\r\n\t\t\troomModel.roomSettings.name = roomInfoRaw.name\r\n\t\t\troomModel.roomSettings.password = \"\"\r\n\t\t\troomModel.roomSettings.roomType = roomInfoRaw.type\r\n\t\t\troomModel.roomSettings.ownerId = roomInfoRaw.owner\r\n\t\t\troomModel.roomSettings.isForbidJoin = roomInfoRaw.isForbidJoin\r\n\t\t\troomModel.roomSettings.isPrivate = roomInfoRaw.isPrivate\r\n\r\n\t\t\troomModel.serverInfo = new roomserver.TServerInfo()\r\n\t\t\troomModel.serverInfo.serverId = roomInfoRaw.routeId\r\n\t\t\troomModel.serverInfo.address = \"\"\r\n\r\n\t\t\troomModel.roleModels = []\r\n\t\t\troomInfoRaw.playerList.forEach(player => {\r\n\t\t\t\tlet roleModel = new roomserver.TRoleModel()\r\n\t\t\t\troleModel.basicInfo = new roomserver.TRoleBasic()\r\n\t\t\t\troleModel.basicInfo.isRobot = player.isRobot\r\n\t\t\t\t// 由于player.id是腾讯服务器自己生成的, 和游戏的roleid无法直接对应, 直接使用 customProfile\r\n\t\t\t\troleModel.basicInfo.serverRoleId = player.id\r\n\t\t\t\troleModel.basicInfo.roleName = player.name\r\n\t\t\t\troleModel.basicInfo.roleId = player.customProfile\r\n\t\t\t\troleModel.netwokInfo = new roomserver.TRoleNetworkInfo()\r\n\t\t\t\troleModel.netwokInfo.relayNetworkState = player.relayNetworkState\r\n\t\t\t\troleModel.netwokInfo.roomNetworkState = player.commonNetworkState\r\n\r\n\t\t\t\troleModel.gameInfo = new roomserver.TRoleGameInfo()\r\n\t\t\t\troleModel.gameState = new roomserver.TRoleGameState()\r\n\t\t\t\troleModel.gameState.state = roomserver.TRolePlayState.READY\r\n\t\t\t\troleModel.roomState = new roomserver.TRoleRoomState()\r\n\t\t\t\troleModel.roomState.isMaster = player.id == roomInfoRaw.owner\r\n\t\t\t\troleModel.userInfo = new roomserver.TUserInfo()\r\n\t\t\t\t// roleModel.userInfo.userId = player.id\r\n\r\n\t\t\t\troomModel.roleModels.push(roleModel)\r\n\t\t\t})\r\n\r\n\t\t\treturn roomModel\r\n\t\t}\r\n\r\n\t\tgetTheOnlyRoomsInfo(roomInfoRaw: MGOBE.types.RoomInfo) {\r\n\t\t\tlet roomsInfo = new roomserver.TRoomsInfo()\r\n\t\t\troomsInfo.count = 1\r\n\t\t\troomsInfo.roomModels = []\r\n\t\t\troomsInfo.roomModels[0] = RoomProtoHelper.getRoomInfo(roomInfoRaw)\r\n\t\t\treturn roomsInfo\r\n\t\t}\r\n\r\n\t\tgetNormalResult(opInfo: roomserver.ITRoomUserOpInfo, evt: MGOBE.types.ResponseEvent<any>) {\r\n\t\t\tlet result = new roomserver.TNormalResult()\r\n\t\t\tresult.indicate = this.getIndicate(evt)\r\n\t\t\tresult.opInfo = this.cloneOpInfo(opInfo)\r\n\t\t\treturn result\r\n\t\t}\r\n\r\n\t\tgetOkNormalResult(opInfo: roomserver.ITRoomUserOpInfo) {\r\n\t\t\tlet result = new roomserver.TNormalResult()\r\n\t\t\tresult.indicate = this.getOkIndicate()\r\n\t\t\tresult.opInfo = this.cloneOpInfo(opInfo)\r\n\t\t\treturn result\r\n\t\t}\r\n\t}\r\n\r\n\texport const RoomProtoHelper = new TRoomProtoHelper()\r\n\r\n\texport class RoomClient implements IRoomClient {\r\n\t\tmatcherClient: MGOBE.Room\r\n\t\troomClient: MGOBE.Room\r\n\t\tproto: ProtoTool\r\n\t\tintervals: Intervals\r\n\r\n\t\tprotected stopHeartBeat: bool\r\n\r\n\t\tprotected cachedRoomInfo?: roomserver.TRoomModel\r\n\r\n\t\tinit() {\r\n\t\t\tthis.stopHeartBeat = false\r\n\r\n\t\t\treturn this\r\n\t\t}\r\n\r\n\t\tsetProto(proto: ProtoTool) {\r\n\t\t\tthis.proto = proto\r\n\t\t}\r\n\r\n\t\t// setPerformRecordContainer(performer: PerformRecordContainer) {\r\n\t\t// this.MatcherClient.SetPerformRecordContainer(performer)\r\n\t\t// this.RoomClient.SetPerformRecordContainer(performer)\r\n\t\t// }\r\n\r\n\t\tstatic isNetworkInited: boolean = false\r\n\t\t/**\r\n\t\t * 初始化连接\r\n\t\t * @param call \r\n\t\t */\r\n\t\tconnectAsync(info: TRoomClientConnectInfo, call: (result: TRoomClientConnectResult) => void) {\r\n\t\t\tif (RoomClient.isNetworkInited) {\r\n\t\t\t\tconst result = new TRoomClientConnectResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\t\t\t\tresult.indicate.ok = true\r\n\t\t\t\tthis.setupRoomInstanceApi()\r\n\t\t\t\tcall(result)\r\n\t\t\t} else {\r\n\t\t\t\tMGOBE.Listener.init(info.gameInfo, info.config, (evt) => {\r\n\t\t\t\t\tconst result = new TRoomClientConnectResult()\r\n\t\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt)\r\n\t\t\t\t\tif (result.indicate.ok) {\r\n\t\t\t\t\t\tRoomClient.isNetworkInited = true\r\n\r\n\t\t\t\t\t\tresult.serverInfo = new TRoomServerInfo()\r\n\t\t\t\t\t\tresult.serverInfo.serverTime = evt.data.serverTime\r\n\r\n\t\t\t\t\t\tthis.setupRoomInstanceApi()\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcall(result)\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprotected setupRoomInstanceApi() {\r\n\t\t\tlet room = new MGOBE.Room()\r\n\t\t\tthis.matcherClient = room\r\n\t\t\tthis.roomClient = room\r\n\r\n\t\t\tMGOBE.Listener.add(this.roomClient)\r\n\r\n\t\t\tthis.initFrameMsgListener()\r\n\t\t\tthis.initRoomClientMsgListener()\r\n\r\n\t\t}\r\n\r\n\t\tclose() {\r\n\t\t\tthis.intervals && this.intervals.clearAllTimer()\r\n\t\t\tif (this.roomClient) {\r\n\t\t\t\tMGOBE.Listener.remove(this.roomClient)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 更新 protobuf 协议文件\r\n\t\t * - 如果客户端版本较新，则服务器只返回服务器上协议版本号\r\n\t\t * - 如果客户端版本较旧，则服务器返回新协议文件内容\r\n\t\t * @param info \r\n\t\t * @param call \r\n\t\t */\r\n\t\tcheckoutProto(info: { clientProtoVersion: number }, call: (result: roomserver.TDownloadProtoResult) => void) {\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 通过房间匹配服匹配房间\r\n\t\t * @param roleInfo \r\n\t\t * @param roomInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tmatchRoom(roleInfo: roomserver.TRoleInfo, roomInfo: roomserver.TRoomInfo, call: (result: roomserver.TMatchJobResult) => void) {\r\n\t\t\tthis.roomClient.matchRoom({\r\n\t\t\t\tmaxPlayers: roomInfo.gameInfo.roleCount,\r\n\t\t\t\troomType: `${roomInfo.roomSettings.roomType}`,\r\n\t\t\t\tplayerInfo: {\r\n\t\t\t\t\tcustomPlayerStatus: 1,\r\n\t\t\t\t\tcustomProfile: roleInfo.basicInfo.roleId,\r\n\t\t\t\t\tname: roleInfo.basicInfo.roleName,\r\n\t\t\t\t}\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst roomInfoRaw = evt.data.roomInfo\r\n\r\n\t\t\t\tconst result = new roomserver.TMatchJobResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt)\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = roleInfo.basicInfo.serverRoleId\r\n\t\t\t\tresult.opInfo.roleId = roleInfo.basicInfo.roleId\r\n\t\t\t\tif (roomInfoRaw) {\r\n\t\t\t\t\tresult.opInfo.roomId = roomInfoRaw.id\r\n\r\n\t\t\t\t\tif (result.indicate.ok) {\r\n\t\t\t\t\t\tresult.roomsInfo = RoomProtoHelper.getTheOnlyRoomsInfo(roomInfoRaw)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 通过ID搜索房间\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tsearchRoomById(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TQueryRoomsResult) => void) {\r\n\t\t\tMGOBE.Room.getRoomByRoomId({\r\n\t\t\t\troomId: `${opInfo.roomId}`,\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = new roomserver.TQueryRoomsResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt)\r\n\t\t\t\tif (result.indicate.ok) {\r\n\t\t\t\t\tresult.roomsInfo = RoomProtoHelper.getTheOnlyRoomsInfo(evt.data.roomInfo)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 发送房间服心跳\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tsendRoomHeartBeat(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.THeartBeatResult) => void) {\r\n\t\t\t// if (!this.roomClient.isConnected) {\r\n\t\t\t// \treturn\r\n\t\t\t// }\r\n\r\n\t\t\t// let reqData: roomserver.TReqHeartBeat = {\r\n\t\t\t// \topInfo: opInfo,\r\n\t\t\t// }\r\n\t\t\t// this.roomClient.SendReqPB(ReqId.BasicHeartBeat, reqData, roomserver.TReqHeartBeat, (sessionInfo: SessionInfo) => {\r\n\t\t\t// \tlet result = this.proto.decode(sessionInfo.data, roomserver.THeartBeatResult)\r\n\t\t\t// \tcall(result)\r\n\t\t\t// })\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 发送房间匹配服心跳\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tsendMatcherHeartBeat(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.THeartBeatResult) => void) {\r\n\t\t}\r\n\r\n\t\tsendHeartBeat(opInfo: roomserver.ITRoomUserOpInfo) {\r\n\t\t\tthis.sendRoomHeartBeat(opInfo, (result: roomserver.THeartBeatResult) => {\r\n\t\t\t\t//fmt.Println(\"SendRoomHeartBeat:\", result)\r\n\t\t\t})\r\n\t\t\tthis.sendMatcherHeartBeat(opInfo, (result: roomserver.THeartBeatResult) => {\r\n\t\t\t\t//fmt.Println(\"SendMatcherHeartBeat:\", result)\r\n\t\t\t})\r\n\t\t}\r\n\t\t/**\r\n\t\t * 维持心跳\r\n\t\t * @param opInfo \r\n\t\t */\r\n\t\tstartHeartBeatProcess(opInfo: roomserver.ITRoomUserOpInfo) {\r\n\t\t\tlet id\r\n\t\t\tid = this.intervals.setInterval(() => {\r\n\t\t\t\tif (this.stopHeartBeat) {\r\n\t\t\t\t\tclearInterval(id)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tthis.sendHeartBeat(opInfo)\r\n\t\t\t}, 1e3)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 停止心跳\r\n\t\t */\r\n\t\tstopHeartBeatProcess() {\r\n\t\t\tthis.stopHeartBeat = true\r\n\t\t}\r\n\r\n\t\tprotected _updateRoomInfo(roomInfo?: MGOBE.types.RoomInfo) {\r\n\t\t\tif (roomInfo) {\r\n\t\t\t\tthis.cachedRoomInfo = RoomProtoHelper.getRoomInfo(roomInfo)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetLocalRoomInfo(): roomserver.TRoomModel {\r\n\t\t\treturn this.cachedRoomInfo\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 进入房间\r\n\t\t * @param roleInfo \r\n\t\t * @param roomInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tenterRoom(roleInfo: roomserver.TRoleInfo, roomInfo: roomserver.ITRoomModel, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.joinRoom({\r\n\t\t\t\tplayerInfo: {\r\n\t\t\t\t\tname: roleInfo.basicInfo.roleName,\r\n\t\t\t\t\tcustomPlayerStatus: 1,\r\n\t\t\t\t\tcustomProfile: roleInfo.basicInfo.roleId,\r\n\t\t\t\t}\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt)\r\n\t\t\t\tresult.opInfo = RoomProtoHelper.getOpInfo(roleInfo, evt.data.roomInfo)\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 退出房间\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\texitRoom(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.leaveRoom({\r\n\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt)\r\n\t\t\t\tresult.opInfo = RoomProtoHelper.cloneOpInfo(opInfo)\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 强制销毁房间\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tdestoryRoomForce(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.dismissRoom({\r\n\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = RoomProtoHelper.getNormalResult(opInfo, evt)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 进入准备状态\r\n\t\t * - 所有玩家进入准备状态之后，即可开始游戏\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tprepareStartGame(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TRespStartGameResult) => void) {\r\n\t\t\tlet result = new roomserver.TRespStartGameResult()\r\n\t\t\tresult.opInfo = RoomProtoHelper.cloneOpInfo(opInfo)\r\n\t\t\tresult.indicate = new roomserver.TResultIndicate()\r\n\t\t\tresult.indicate.ok = true\r\n\t\t\tresult.indicate.err = new roomserver.TErrorInfo()\r\n\t\t\tresult.indicate.err.code = MGOBE.ErrCode.EC_OK\r\n\t\t\tresult.indicate.err.message = \"\"\r\n\t\t\tresult.indicate.err.reason = \"\"\r\n\t\t\tresult.frameSyncInitConfig = {\r\n\t\t\t\trandomSeed: 1,\r\n\t\t\t}\r\n\r\n\t\t\tcall(result)\r\n\r\n\t\t\tthis.roomEvent.emit(TRoomMsgEnum.prepareready, result)\r\n\t\t\tthis.roomEvent.emit(TRoomMsgEnum.startgame, result)\r\n\t\t}\r\n\r\n\t\tprotected frameEvent: slib.SEvent<roomserver.ITReqBroadCastFrameSyncReq> = new slib.SEvent<roomserver.TReqBroadCastFrameSyncReq>()\r\n\t\tprotected initFrameMsgListener() {\r\n\r\n\t\t\tthis.roomClient.onRecvFrame = (evt) => {\r\n\t\t\t\tconst frame = evt.data.frame\r\n\t\t\t\t// const dt = Math.random() * 500 + 500\r\n\t\t\t\t// setTimeout(() => {\r\n\t\t\t\tframe.items.forEach((item, index) => {\r\n\t\t\t\t\tconst result = RoomProtoHelper.getFrameInfo(frame, item)\r\n\t\t\t\t\tthis.frameEvent.emit(TRoomMsgEnum.framemsg, result)\r\n\t\t\t\t})\r\n\t\t\t\t// }, dt)\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t/**\r\n\t\t * 监听帧同步广播\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenFrameSyncBroadCast(call: (message: roomserver.TReqBroadCastFrameSyncReq) => void) {\r\n\t\t\tthis.frameEvent.on(TRoomMsgEnum.framemsg, call)\r\n\t\t}\r\n\r\n\t\toffFrameSyncBroadCast(call: (message: roomserver.TReqBroadCastClientMessage) => void) {\r\n\t\t\tthis.frameEvent.off(TRoomMsgEnum.framemsg, call)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 广播房间消息\r\n\t\t * @param reqData \r\n\t\t * @param call \r\n\t\t */\r\n\t\tbroadCastRoomMessage(reqData: roomserver.TReqBroadCastClientMessage, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.sendToClient({\r\n\t\t\t\tmsg: reqData.msgStr,\r\n\t\t\t\trecvPlayerList: reqData.targets.map(target => target.roleId),\r\n\t\t\t\trecvType: MGOBE.types.RecvType.ROOM_SOME,\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = RoomProtoHelper.getNormalResult(reqData.opInfo, evt)\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 广播帧同步消息\r\n\t\t * @param reqData\r\n\t\t * @param call\r\n\t\t */\r\n\t\tbroadCastFrameSyncMessage(reqData: roomserver.TReqBroadCastFrameSyncReq, call: (result: roomserver.TNormalResult) => void) {\r\n\r\n\t\t\t// e表示经过压缩, d表示未经压缩\r\n\t\t\t// 实际是否经过zip\r\n\t\t\tlet isCompressed = false\r\n\t\t\t// zip后的数据\r\n\t\t\tlet zstr: string\r\n\t\t\t// 经观察, 大小小于40的数据很少能压缩\r\n\t\t\tlet needCompress = reqData.msgBytes.byteLength > 40\r\n\t\t\tif (needCompress) {\r\n\t\t\t\tlet zdata = pako.deflateRaw(reqData.msgBytes)\r\n\t\t\t\tisCompressed = zdata.byteLength < reqData.msgBytes.byteLength\r\n\t\t\t\tif (isCompressed) {\r\n\t\t\t\t\tzstr = \"e\" + base91.encode(zdata)\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(\"compressedMSG:\", zdata.byteLength, reqData.msgBytes.byteLength)\r\n\t\t\t}\r\n\t\t\tif (!isCompressed) {\r\n\t\t\t\tzstr = \"d\" + base91.encode(reqData.msgBytes)\r\n\t\t\t}\r\n\t\t\tthis.roomClient.sendFrame({\r\n\t\t\t\tdata: {\r\n\t\t\t\t\tm: zstr,\r\n\t\t\t\t\t// opInfo: reqData.opInfo,\r\n\t\t\t\t},\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = RoomProtoHelper.getNormalResult(reqData.opInfo, evt)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 请求补帧\r\n\t\t */\r\n\t\trequestFrameSyncMessages(opInfo: roomserver.TRoomUserOpInfo, paras: roomserver.TReqFrameRecordsInfo, call: (result: roomserver.TReqFrameRecordsResult) => void) {\r\n\t\t\tthis.roomClient.requestFrame({\r\n\t\t\t\tbeginFrameId: paras.beginFrame,\r\n\t\t\t\tendFrameId: paras.endFrame,\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = new roomserver.TReqFrameRecordsResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt)\r\n\t\t\t\tresult.opInfo = RoomProtoHelper.cloneOpInfo(opInfo)\r\n\t\t\t\tresult.messages = []\r\n\t\t\t\tif (result.indicate.ok) {\r\n\t\t\t\t\tevt.data.frames.forEach(frame => {\r\n\t\t\t\t\t\tframe.items.forEach((item) => {\r\n\t\t\t\t\t\t\tresult.messages.push(RoomProtoHelper.getFrameInfo(frame, item))\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\tcall(result)\r\n\r\n\t\t\t\tresult.messages.forEach((message) => {\r\n\t\t\t\t\tthis.frameEvent.emit(TRoomMsgEnum.framemsg, message)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tprotected roomEvent: slib.SEvent<any> = new slib.SEvent<any>()\r\n\r\n\t\tprotected initRoomClientMsgListener() {\r\n\t\t\tthis.roomClient.onRecvFromClient = (evt) => {\r\n\t\t\t\tconst result = new roomserver.TReqBroadCastClientMessage()\r\n\t\t\t\tconst info = evt.data\r\n\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = info.sendPlayerId\r\n\t\t\t\tresult.opInfo.roleId = \"\"\r\n\t\t\t\tresult.opInfo.roomId = info.roomId\r\n\r\n\t\t\t\tresult.msgStr = info.msg\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.roommsg, result)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听房间内广播消息\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenRoomBroadCast(call: (message: roomserver.TReqBroadCastClientMessage) => void) {\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.roommsg, (result: roomserver.TReqBroadCastClientMessage) => {\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听成员离开房间\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenExitRoom(call: (message: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.onLeaveRoom = this.roomClient.onLeaveRoom || ((evt) => {\r\n\t\t\t\tconst result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = evt.data.leavePlayerId\r\n\t\t\t\tresult.opInfo.roleId = \"\"\r\n\t\t\t\tresult.opInfo.roomId = evt.data.roomInfo.id\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.leaveroom, result)\r\n\t\t\t})\r\n\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.leaveroom, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听成员进入房间\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenEnterRoom(call: (message: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.onJoinRoom = this.roomClient.onJoinRoom || ((evt) => {\r\n\t\t\t\tconst result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = evt.data.joinPlayerId\r\n\t\t\t\tresult.opInfo.roleId = RoomProtoHelper.getLocalPlayerIdInRoom(evt.data.roomInfo, evt.data.joinPlayerId)\r\n\t\t\t\tresult.opInfo.roomId = evt.data.roomInfo.id\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.enterroom, result)\r\n\t\t\t})\r\n\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.enterroom, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听成员设置房间\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenSetRoomInfo(call: (message: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.onChangeRoom = this.roomClient.onChangeRoom || ((evt) => {\r\n\t\t\t\tconst result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = evt.data.roomInfo.owner\r\n\t\t\t\tresult.opInfo.roleId = RoomProtoHelper.getLocalPlayerIdInRoom(evt.data.roomInfo, evt.data.roomInfo.owner)\r\n\t\t\t\tresult.opInfo.roomId = evt.data.roomInfo.id\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.changeroom, result)\r\n\t\t\t})\r\n\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.changeroom, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听成员进入准备状态\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenPrepareStartGame(call: (message: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.prepareready, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听游戏开始\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenStartGame(call: (message: roomserver.TRespStartGameResult) => void) {\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.startgame, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听同步游戏记录\r\n\t\t * @param call\r\n\t\t */\r\n\t\tlistenFetchGameOpRecords(call: (message: roomserver.TFetchGameOpRecordsResult) => void) {\r\n\t\t\tthrow new Error(\"not implemented.\")\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 房间销毁\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenDestoryRoom(call: (message: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.onDismissRoom = this.roomClient.onDismissRoom || ((evt) => {\r\n\t\t\t\tconst roomInfo = evt.data.roomInfo\r\n\t\t\t\tconst result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = roomInfo.owner\r\n\t\t\t\tresult.opInfo.roleId = RoomProtoHelper.getLocalPlayerIdInRoom(roomInfo, roomInfo.owner)\r\n\t\t\t\tresult.opInfo.roomId = roomInfo.id\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.detoryroom, result)\r\n\t\t\t})\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.detoryroom, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 验证房间\r\n\t\t * @param call\r\n\t\t */\r\n\t\tvalidateRoom(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tconst result = RoomProtoHelper.getOkNormalResult(opInfo)\r\n\t\t\tcall(result)\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 设置房间信息\r\n\t\t * @param call\r\n\t\t */\r\n\t\tsetRoomInfo(opInfo: roomserver.ITRoomUserOpInfo, roomInfo: roomserver.ITRoomSettings, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.changeRoom({\r\n\t\t\t\troomName: roomInfo.name,\r\n\t\t\t\tisForbidJoin: roomInfo.isForbidJoin,\r\n\t\t\t\tisPrivate: roomInfo.isPrivate,\r\n\t\t\t\towner: roomInfo.ownerId,\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = RoomProtoHelper.getNormalResult(opInfo, evt)\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 放逐成员（未实现）\r\n\t\t * @param call\r\n\t\t */\r\n\t\tbanishMember(opInfo: roomserver.ITRoomUserOpInfo, roles: string[], call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.removePlayer({\r\n\t\t\t\tremovePlayerId: roles[0],\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = RoomProtoHelper.getNormalResult(opInfo, evt)\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取房间信息（未实现）\r\n\t\t * @param call\r\n\t\t */\r\n\t\tgetRoomInfo(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TGetRoomInfoResult) => void) {\r\n\t\t\tthis.roomClient.getRoomDetail((evt) => {\r\n\t\t\t\tconst result = new roomserver.TGetRoomInfoResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt)\r\n\t\t\t\tresult.opInfo = RoomProtoHelper.cloneOpInfo(opInfo)\r\n\r\n\t\t\t\tconst roomInfoRaw = evt.data.roomInfo\r\n\t\t\t\tif (roomInfoRaw) {\r\n\t\t\t\t\tresult.opInfo.roomId = roomInfoRaw.id\r\n\t\t\t\t\tif (result.indicate.ok) {\r\n\t\t\t\t\t\tresult.roomModel = RoomProtoHelper.getRoomInfo(roomInfoRaw)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 获取游戏操作记录（未实现）\r\n\t\t * @param call\r\n\t\t */\r\n\t\tfetchGameOpRecords(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TFetchGameOpRecordsResult) => void) {\r\n\t\t\tthrow new Error(\"not implemented.\")\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听成员网络状态变化\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenChangedMemberNetworkState(call: (result: roomserver.TChangeMemberNetworkStateResult) => void) {\r\n\t\t\tthis.roomClient.onChangePlayerNetworkState = this.roomClient.onChangePlayerNetworkState || ((evt) => {\r\n\t\t\t\tconst info = evt.data\r\n\r\n\t\t\t\tconst result = new roomserver.TChangeMemberNetworkStateResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = info.changePlayerId\r\n\t\t\t\tresult.opInfo.roleId = RoomProtoHelper.getLocalPlayerIdInRoom(info.roomInfo, info.changePlayerId)\r\n\t\t\t\tresult.opInfo.roomId = info.roomInfo.id\r\n\r\n\t\t\t\tresult.networkInfo = new roomserver.TRoleNetworkInfo()\r\n\t\t\t\tresult.networkInfo.roomNetworkState = info.networkState\r\n\t\t\t\tresult.networkInfo.relayNetworkState = info.networkState\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.changedmembernetowrk, result)\r\n\t\t\t})\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.changedmembernetowrk, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 监听玩家信息变化\r\n\t\t * @param call \r\n\t\t */\r\n\t\tlistenChangeCustomPlayerStatus(call: (result: roomserver.TChangeCustomPlayerStatus) => void) {\r\n\t\t\tthrow new Error(\"not implemented: 暂时没啥用,不实现.\")\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 开始帧同步\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tstartFrameSync(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.startFrameSync({\r\n\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = RoomProtoHelper.getNormalResult(opInfo, evt)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 停止帧同步\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tstopFrameSync(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.stopFrameSync({\r\n\r\n\t\t\t}, (evt) => {\r\n\t\t\t\tconst result = RoomProtoHelper.getNormalResult(opInfo, evt)\r\n\r\n\t\t\t\tcall(result)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 开始帧同步广播回调接口\r\n\t\t * @param call \r\n\t\t */\r\n\t\tonStartFrameSync(call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.onStartFrameSync = this.roomClient.onStartFrameSync || ((evt) => {\r\n\t\t\t\tlet result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = \"\"\r\n\t\t\t\tresult.opInfo.roleId = \"\"\r\n\t\t\t\tresult.opInfo.roomId = evt.data.roomInfo.id\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.startframesync, result)\r\n\t\t\t})\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.startframesync, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 停止帧同步广播回调接口\r\n\t\t */\r\n\t\tonStopFrameSync(call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.onStopFrameSync = this.roomClient.onStopFrameSync || ((evt) => {\r\n\t\t\t\tlet result = new roomserver.TNormalResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getOkIndicate()\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.opInfo.serverRoleId = \"\"\r\n\t\t\t\tresult.opInfo.roleId = \"\"\r\n\t\t\t\tresult.opInfo.roomId = evt.data.roomInfo.id\r\n\r\n\t\t\t\tthis._updateRoomInfo(evt.data.roomInfo)\r\n\r\n\t\t\t\tthis.roomEvent.emit(TRoomMsgEnum.stopframesync, result)\r\n\t\t\t})\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.stopframesync, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 自动补帧失败回调接口\r\n\t\t */\r\n\t\tonAutoRequestFrameError(call: (result: roomserver.TReqFrameRecordsResult) => void) {\r\n\t\t\tthis.roomClient.onAutoRequestFrameError = this.roomClient.onAutoRequestFrameError || ((evt) => {\r\n\t\t\t\tconst result = new roomserver.TReqFrameRecordsResult()\r\n\t\t\t\tresult.indicate = RoomProtoHelper.getIndicate(evt.data)\r\n\t\t\t\tresult.opInfo = new roomserver.TRoomUserOpInfo()\r\n\t\t\t\tresult.messages = []\r\n\t\t\t\tif (result.indicate.ok) {\r\n\t\t\t\t\tconst framesData = evt.data.data\r\n\t\t\t\t\tif (framesData) {\r\n\t\t\t\t\t\tframesData.frames.forEach(frame => {\r\n\t\t\t\t\t\t\tresult.opInfo.roomId = frame.roomId\r\n\t\t\t\t\t\t\tframe.items.forEach((item) => {\r\n\t\t\t\t\t\t\t\tresult.messages.push(RoomProtoHelper.getFrameInfo(frame, item))\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcall(result)\r\n\r\n\t\t\t\tresult.messages.forEach((message) => {\r\n\t\t\t\t\tthis.frameEvent.emit(TRoomMsgEnum.framemsg, message)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\tthis.roomEvent.on(TRoomMsgEnum.stopframesync, (evt) => {\r\n\t\t\t\tcall(evt)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * 重试自动补帧\r\n\t\t * @param opInfo \r\n\t\t * @param call \r\n\t\t */\r\n\t\tretryAutoRequestFrame(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\r\n\t\t\tthis.roomClient.retryAutoRequestFrame()\r\n\r\n\t\t\tconst result = RoomProtoHelper.getOkNormalResult(opInfo)\r\n\t\t\tcall(result)\r\n\t\t}\r\n\t}\r\n\r\n}\r\n","namespace fsync.network.roomclient.glee.v1 {\n\n\texport class RoomClient implements IRoomClient {\n\t\tgetLocalRoomInfo?(): roomserver.TRoomModel {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\toffFrameSyncBroadCast(call: (message: roomserver.TReqBroadCastFrameSyncReq) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tconnectAsync(info: TRoomClientConnectInfo, call: (result: TRoomClientConnectResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\trequestFrameSyncMessages(opInfo: roomserver.TRoomUserOpInfo, paras: roomserver.TReqFrameRecordsInfo, call: (result: roomserver.TReqFrameRecordsResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tlistenDestoryRoom(call: (message: roomserver.TNormalResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tlistenChangedMemberNetworkState(call: (result: roomserver.TChangeMemberNetworkStateResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tlistenChangeCustomPlayerStatus(call: (result: roomserver.TChangeCustomPlayerStatus) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tstartFrameSync(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tstopFrameSync(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tonStartFrameSync(call: (result: roomserver.TNormalResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tonStopFrameSync(call: (result: roomserver.TNormalResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tonAutoRequestFrameError(call: (result: roomserver.TReqFrameRecordsResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\t\tretryAutoRequestFrame(opInfo: roomserver.TRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tthrow new Error(\"Method not implemented.\")\n\t\t}\n\n\t\tmatcherClient: PBClient\n\t\troomClient: PBClient\n\t\tproto: ProtoTool\n\t\tintervals: Intervals\n\n\t\tprotected stopHeartBeat: bool\n\n\t\tinit() {\n\t\t\tthis.stopHeartBeat = false\n\n\t\t\tthis.matcherClient = new PBClient().init(ClientFactory.createClient(\"websocket\"))\n\t\t\tthis.roomClient = new PBClient().init(ClientFactory.createClient(\"websocket\"))\n\n\t\t\tlet onClose = () => {\n\t\t\t\tconsole.warn(\"client disconnected\")\n\t\t\t}\n\t\t\tthis.matcherClient.onclose = onClose\n\t\t\tthis.roomClient.onclose = onClose\n\n\t\t\treturn this\n\t\t}\n\n\t\tsetProto(proto: ProtoTool) {\n\t\t\tthis.proto = proto\n\t\t\tthis.matcherClient.proto = proto\n\t\t\tthis.roomClient.proto = proto\n\t\t}\n\n\t\t// setPerformRecordContainer(performer: PerformRecordContainer) {\n\t\t// this.MatcherClient.SetPerformRecordContainer(performer)\n\t\t// this.RoomClient.SetPerformRecordContainer(performer)\n\t\t// }\n\n\t\tclose() {\n\t\t\tthis.matcherClient.close()\n\t\t\tthis.roomClient.close()\n\t\t}\n\n\t\t/**\n\t\t * 更新 protobuf 协议文件\n\t\t * - 如果客户端版本较新，则服务器只返回服务器上协议版本号\n\t\t * - 如果客户端版本较旧，则服务器返回新协议文件内容\n\t\t * @param info \n\t\t * @param call \n\t\t */\n\t\tcheckoutProto(info: { clientProtoVersion: number }, call: (result: roomserver.TDownloadProtoResult) => void) {\n\t\t\tlet reqData: roomserver.ITReqDownloadProto = {\n\t\t\t\tprotoVersion: info.clientProtoVersion,\n\t\t\t\tforce: false,\n\t\t\t}\n\t\t\tthis.matcherClient.SendReqPB(ReqId.BasicCheckoutProto, reqData, roomserver.TReqDownloadProto, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TDownloadProtoResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 通过房间匹配服匹配房间\n\t\t * @param roleInfo \n\t\t * @param roomInfo \n\t\t * @param call \n\t\t */\n\t\tmatchRoom(roleInfo: roomserver.TRoleInfo, roomInfo: roomserver.TRoomInfo, call: (result: roomserver.TMatchJobResult) => void) {\n\t\t\tlet reqData: roomserver.TReqMatchUsersWithDefaultRule = {\n\t\t\t\topInfo: {\n\t\t\t\t\troleId: roleInfo.basicInfo.roleId,\n\t\t\t\t\troomId: roomInfo.basicInfo.roomId,\n\t\t\t\t},\n\t\t\t\troleInfo: roleInfo,\n\t\t\t\troomInfo: roomInfo,\n\t\t\t}\n\t\t\tthis.matcherClient.SendReqPB(ReqId.RoomMatchUsersWithDefaultRule, reqData, roomserver.TReqMatchUsersWithDefaultRule, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TMatchJobResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 通过ID搜索房间\n\t\t * @param opInfo \n\t\t * @param call \n\t\t */\n\t\tsearchRoomById(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TQueryRoomsResult) => void) {\n\t\t\tlet reqData: roomserver.TReqSearchRoomById = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.matcherClient.SendReqPB(ReqId.RoomSearchRoomById, reqData, roomserver.TReqSearchRoomById, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TQueryRoomsResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 发送房间服心跳\n\t\t * @param opInfo \n\t\t * @param call \n\t\t */\n\t\tsendRoomHeartBeat(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.THeartBeatResult) => void) {\n\t\t\tif (!this.roomClient.isConnected) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlet reqData: roomserver.TReqHeartBeat = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.BasicHeartBeat, reqData, roomserver.TReqHeartBeat, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.THeartBeatResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 发送房间匹配服心跳\n\t\t * @param opInfo \n\t\t * @param call \n\t\t */\n\t\tsendMatcherHeartBeat(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.THeartBeatResult) => void) {\n\t\t\tif (!this.matcherClient.isConnected) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlet reqData: roomserver.TReqHeartBeat = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.matcherClient.SendReqPB(ReqId.BasicHeartBeat, reqData, roomserver.TReqHeartBeat, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.THeartBeatResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\tsendHeartBeat(opInfo: roomserver.ITRoomUserOpInfo) {\n\t\t\tthis.sendRoomHeartBeat(opInfo, (result: roomserver.THeartBeatResult) => {\n\t\t\t\t//fmt.Println(\"SendRoomHeartBeat:\", result)\n\t\t\t})\n\t\t\tthis.sendMatcherHeartBeat(opInfo, (result: roomserver.THeartBeatResult) => {\n\t\t\t\t//fmt.Println(\"SendMatcherHeartBeat:\", result)\n\t\t\t})\n\t\t}\n\t\t/**\n\t\t * 维持心跳\n\t\t * @param opInfo \n\t\t */\n\t\tstartHeartBeatProcess(opInfo: roomserver.ITRoomUserOpInfo) {\n\t\t\tlet id\n\t\t\tid = this.intervals.setInterval(() => {\n\t\t\t\tif (this.stopHeartBeat) {\n\t\t\t\t\tclearInterval(id)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tthis.sendHeartBeat(opInfo)\n\t\t\t}, 1e3)\n\t\t}\n\n\t\t/**\n\t\t * 停止心跳\n\t\t */\n\t\tstopHeartBeatProcess() {\n\t\t\tthis.stopHeartBeat = true\n\t\t}\n\n\t\t/**\n\t\t * 进入房间\n\t\t * @param roleInfo \n\t\t * @param roomInfo \n\t\t * @param call \n\t\t */\n\t\tenterRoom(roleInfo: roomserver.TRoleInfo, roomInfo: roomserver.ITRoomModel, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tlet reqData: roomserver.TReqEnterRoom = {\n\t\t\t\topInfo: {\n\t\t\t\t\troleId: roleInfo.basicInfo.roleId,\n\t\t\t\t\troomId: roomInfo.basicInfo.roomId,\n\t\t\t\t},\n\t\t\t\troleInfo: roleInfo,\n\t\t\t\troomInfo: roomInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomEnterRoom, reqData, roomserver.TReqEnterRoom, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 退出房间\n\t\t * @param opInfo \n\t\t * @param call \n\t\t */\n\t\texitRoom(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tlet reqData: roomserver.TReqExitRoom = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomExitRoom, reqData, roomserver.TReqExitRoom, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 强制销毁房间\n\t\t * @param opInfo \n\t\t * @param call \n\t\t */\n\t\tdestoryRoomForce(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tlet reqData: roomserver.TReqDestroyRoomForce = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomDestroyRoomForce, reqData, roomserver.TReqDestroyRoomForce, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 进入准备状态\n\t\t * - 所有玩家进入准备状态之后，即可开始游戏\n\t\t * @param opInfo \n\t\t * @param call \n\t\t */\n\t\tprepareStartGame(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TRespStartGameResult) => void) {\n\t\t\t//fmt.Println(\"PrepareStartGame\", opInfo)\n\t\t\tlet reqData: roomserver.TReqStartGame = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomPrepareRoomStartGame, reqData, roomserver.TReqStartGame, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TRespStartGameResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 广播房间消息\n\t\t * @param reqData \n\t\t * @param call \n\t\t */\n\t\tbroadCastRoomMessage(reqData: roomserver.TReqBroadCastClientMessage, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomBroadCastClientMessage, reqData, roomserver.TReqBroadCastClientMessage, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 广播帧同步消息\n\t\t * @param reqData\n\t\t * @param call\n\t\t */\n\t\tbroadCastFrameSyncMessage(reqData: roomserver.TReqBroadCastFrameSyncReq, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomFrameSync, reqData, roomserver.TReqBroadCastFrameSyncReq, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听帧同步广播\n\t\t * @param call \n\t\t */\n\t\tlistenFrameSyncBroadCast(call: (message: roomserver.TReqBroadCastFrameSyncReq) => void) {\n\t\t\tthis.roomClient.SubEvent(RespId.RoomNotifyFrameSync, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TReqBroadCastFrameSyncReq)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听房间内广播消息\n\t\t * @param call \n\t\t */\n\t\tlistenRoomBroadCast(call: (message: roomserver.TReqBroadCastClientMessage) => void) {\n\t\t\tthis.roomClient.SubEvent(RespId.RoomNotifyClientMessage, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TReqBroadCastClientMessage)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听成员离开房间\n\t\t * @param call \n\t\t */\n\t\tlistenExitRoom(call: (message: roomserver.TNormalResult) => void) {\n\t\t\tthis.roomClient.SubEvent(toRespId(ReqId.RoomExitRoom), (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听成员进入房间\n\t\t * @param call \n\t\t */\n\t\tlistenEnterRoom(call: (message: roomserver.TNormalResult) => void) {\n\t\t\tthis.roomClient.SubEvent(toRespId(ReqId.RoomEnterRoom), (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听成员设置房间\n\t\t * @param call\n\t\t */\n\t\tlistenSetRoomInfo(call: (message: roomserver.TNormalResult) => void) {\n\t\t\tthis.roomClient.SubEvent(toRespId(ReqId.RoomSetRoomInfo), (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听成员进入准备状态\n\t\t * @param call\n\t\t */\n\t\tlistenPrepareStartGame(call: (message: roomserver.TNormalResult) => void) {\n\t\t\tthis.roomClient.SubEvent(toRespId(ReqId.RoomPrepareRoomStartGame), (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听游戏开始\n\t\t * @param call\n\t\t */\n\t\tlistenStartGame(call: (message: roomserver.TRespStartGameResult) => void) {\n\t\t\tthis.roomClient.SubEvent(toRespId(ReqId.RoomStartGame), (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TRespStartGameResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 监听同步游戏记录\n\t\t * @param call\n\t\t */\n\t\tlistenFetchGameOpRecords(call: (message: roomserver.TFetchGameOpRecordsResult) => void) {\n\t\t\tthis.roomClient.SubEvent(toRespId(ReqId.RoomFetchGameOpRecords), (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TFetchGameOpRecordsResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 验证房间\n\t\t * @param call\n\t\t */\n\t\tvalidateRoom(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tlet reqData: roomserver.TReqValidateRoom = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomIsRoomValid, reqData, roomserver.TReqValidateRoom, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 设置房间信息\n\t\t * @param call\n\t\t */\n\t\tsetRoomInfo(opInfo: roomserver.ITRoomUserOpInfo, roomInfo: roomserver.ITRoomSettings, call: (result: roomserver.TNormalResult) => void) {\n\t\t\tlet reqData: roomserver.TReqSetRoomInfo = {\n\t\t\t\topInfo: opInfo,\n\t\t\t\troomInfo: roomInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomSetRoomInfo, reqData, roomserver.TReqSetRoomInfo, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 放逐成员（未实现）\n\t\t * @param call\n\t\t * @deprecated\n\t\t */\n\t\tbanishMember(opInfo: roomserver.ITRoomUserOpInfo, roles: TRoleId[], call: (result: roomserver.TNormalResult) => void) {\n\t\t\tconst roles2 = roles.map(v => `${v}`)\n\t\t\tlet reqData: roomserver.TReqBanishMember = {\n\t\t\t\topInfo: opInfo,\n\t\t\t\troles: roles2,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomBanishMember, reqData, roomserver.TReqBanishMember, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TNormalResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 获取房间信息（未实现）\n\t\t * @param call\n\t\t */\n\t\tgetRoomInfo(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TGetRoomInfoResult) => void) {\n\t\t\tlet reqData: roomserver.TReqGetRoomInfo = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomGetRoomInfo, reqData, roomserver.TReqGetRoomInfo, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TGetRoomInfoResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t\t/**\n\t\t * 获取游戏操作记录（未实现）\n\t\t * @param call\n\t\t */\n\t\tfetchGameOpRecords(opInfo: roomserver.ITRoomUserOpInfo, call: (result: roomserver.TFetchGameOpRecordsResult) => void) {\n\t\t\tlet reqData: roomserver.TReqFetchGameOpRecords = {\n\t\t\t\topInfo: opInfo,\n\t\t\t}\n\t\t\tthis.roomClient.SendReqPB(ReqId.RoomFetchGameOpRecords, reqData, roomserver.TReqFetchGameOpRecords, (sessionInfo: SessionInfo) => {\n\t\t\t\tlet result = this.proto.decode(sessionInfo.data, roomserver.TFetchGameOpRecordsResult)\n\t\t\t\tcall(result)\n\t\t\t})\n\t\t}\n\n\t}\n\n}","\nnamespace fsync {\n\n\texport class TPrefab {\n\t\tprefabId: PrefabId\n\n\t\tinit(prefabId: PrefabId) {\n\t\t\tthis.prefabId = prefabId\n\t\t\treturn this\n\t\t}\n\t}\n\n}\n","namespace fsync {\n\n\texport interface IView<T = any> {\n\t\tgetRaw?<W = T>(): W\n\t\tinit(): IView<T>\n\t\tsetPos(pos: Vector3): void;\n\t\tsetScale(pos: Vector3): void;\n\t\tsetRotation(quat: Vector4): void;\n\t\tdestroy(): void\n\t}\n\n}","\nnamespace fsync {\n\n\texport class ViewBindManager {\n\t\tprotected entityViewMap: { [key: string]: IView } = EmptyTable()\n\n\t\tinit() {\n\t\t\tthis.entityViewMap = EmptyTable()\n\t\t\treturn this\n\t\t}\n\n\t\tgetEntityView(entity: Entity): IView {\n\t\t\treturn this.entityViewMap[entity.identity]\n\t\t}\n\n\t\tbindEntityView(entity: Entity, view: IView) {\n\t\t\tthis.entityViewMap[entity.identity] = view\n\t\t}\n\n\t\tunbindEntityView(entity: Entity) {\n\t\t\tdelete this.entityViewMap[entity.identity]\n\t\t}\n\n\t\tremoveEntity(entity: Entity) {\n\t\t\tthis.removeEntityById(entity.identity)\n\t\t}\n\n\t\tremoveEntityById(entityId: EntityID) {\n\t\t\tlet view = this.entityViewMap[entityId]\n\t\t\tview.destroy()\n\t\t\tdelete this.entityViewMap[entityId]\n\t\t}\n\n\t\tgetAllEntityID(): EntityID[] {\n\t\t\treturn Object.keys(this.entityViewMap)\n\t\t}\n\n\t\tclear() {\n\t\t\tfor (let key of this.getAllEntityID()) {\n\t\t\t\tthis.removeEntityById(key)\n\t\t\t}\n\t\t}\n\t}\n\n}","\nnamespace graph {\n\n\texport let createSprite: typeof graphengine.createSprite = () => {\n\t\treturn graphengine.createSprite()\n\t}\n\n\texport type ISprite = graphengine.ISprite\n\n\texport type SystemEvent<T = any> = {\n\t\tdata: T\n\t}\n\n\texport let systemEventCenter\n\texport const getSystemEvent: () => slib.SEvent<SystemEvent> = () => {\n\t\tif (systemEventCenter == null) {\n\t\t\tsystemEventCenter = new slib.SEvent<SystemEvent>()\n\t\t}\n\t\treturn systemEventCenter\n\t}\n\texport const PredefSystemEvent = {\n\t\tGameFinished: \"GameFinished\",\n\t}\n\n}\n\nnamespace graph {\n\twindow[\"graph\"] = graph\n}\n","namespace fsync {\n\n\t@cname(\"TransformSyncSystem\")\n\texport class TransformSyncSystem extends SystemBase {\n\t\tviewBinder: ViewBindManager\n\t\tupdate() {\n\n\t\t\t// 自动跟踪entity销毁、创建\n\t\t\t// !!! 还需要补充同entityid，不同view类型和状态的情况处理，否则会出错\n\t\t\t{\n\t\t\t\tlet entities = this.entityManager.createQuery().toArray()\n\t\t\t\tlet existsMap = EmptyTable()\n\t\t\t\tfor (let entity of entities) {\n\t\t\t\t\texistsMap[entity.identity] = entity\n\t\t\t\t}\n\t\t\t\tlet viewMap = EmptyTable()\n\t\t\t\tfor (let id of this.viewBinder.getAllEntityID()) {\n\t\t\t\t\tviewMap[id] = true\n\t\t\t\t\tif (!existsMap[id]) {\n\t\t\t\t\t\tthis.viewBinder.removeEntityById(id)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let entity of entities) {\n\t\t\t\t\tif (!viewMap[entity.identity]) {\n\t\t\t\t\t\tlet meta = this.entityManager.getComponent(entity, PrefabMeta)\n\t\t\t\t\t\tif (meta != null) {\n\t\t\t\t\t\t\tlet ViewFactory = PrefabManager.inst.getPrefabView(meta.prefabId)\n\t\t\t\t\t\t\tlet view = new ViewFactory().init()\n\t\t\t\t\t\t\tthis.viewBinder.bindEntityView(entity, view)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// console.log(\"allentitycount:\", this.entityManager.createQuery().with(Translation).toArray().length)\n\t\t\tthis.entityManager.createQuery().with(Translation).forEach((entity) => {\n\t\t\t\tlet view = this.viewBinder.getEntityView(entity)\n\t\t\t\tif (view != null) {\n\t\t\t\t\tlet trans = this.entityManager.getComponent(entity, Translation)\n\t\t\t\t\tview.setPos(trans.value)\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.entityManager.createQuery().with(Scale).forEach((entity) => {\n\t\t\t\tlet view = this.viewBinder.getEntityView(entity)\n\t\t\t\tif (view != null) {\n\t\t\t\t\tlet scale = this.entityManager.getComponent(entity, Scale)\n\t\t\t\t\tview.setScale(scale.value)\n\t\t\t\t}\n\t\t\t})\n\t\t\tthis.entityManager.createQuery().with(Rotation).forEach((entity) => {\n\t\t\t\tlet view = this.viewBinder.getEntityView(entity)\n\t\t\t\tif (view != null) {\n\t\t\t\t\tlet rotate = this.entityManager.getComponent(entity, Rotation)\n\t\t\t\t\tview.setRotation(rotate.value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n}"]}